import{Component,Fragment,h,Listen,Prop,State,Watch}from"@stencil/core";import apiFetch from"../../../../functions/fetch";import{addQueryArgs}from"@wordpress/url";import{Universe}from"stencil-wormhole";import{baseUrl}from"../../../../services/session";import{getOrder,setOrder}from"@store/checkouts";import uiStore from"@store/ui";export class ScCart{constructor(){this.open=null,this.mode="live",this.uiState="idle"}handleOpenChange(){uiStore.set("cart",{...uiStore.state.cart,open:this.open}),!0===this.open&&this.fetchOrder()}order(){return getOrder(this.formId,this.mode)}setOrder(e){setOrder(e,this.formId)}pageHasForm(){return!!document.querySelector("sc-checkout")}getItemsCount(){var e,t;const r=null===(t=null===(e=this.order())||void 0===e?void 0:e.line_items)||void 0===t?void 0:t.data;let o=0;return(r||[]).forEach((e=>{o+=null==e?void 0:e.quantity})),o}handleSetState(e){this.uiState=e.detail}handleErrorEvent(e){this.error=e.detail,this.uiState="idle"}handleCloseCart(){this.open=!1}async fetchOrder(){var e;try{this.uiState="loading";const t=await apiFetch({method:"GET",path:addQueryArgs(`${baseUrl}${null===(e=this.order())||void 0===e?void 0:e.id}`,{expand:["line_items","line_item.price","price.product","customer","customer.shipping_address","payment_intent","discount","discount.promotion","discount.coupon","recommended_bumps","bump.price","shipping_address","tax_identifier"]})});this.setOrder(t)}catch(e){throw console.error(e),e}finally{this.uiState="idle"}}componentWillLoad(){Universe.create(this,this.state()),this.open=!!uiStore.state.cart.open,uiStore.onChange("cart",(e=>{this.open=e.open}))}state(){var e,t,r,o,i,s,a,n,d,l,c,h;return{processor_data:null===(e=this.order())||void 0===e?void 0:e.processor_data,uiState:this.uiState,checkoutLink:this.checkoutLink,loading:"loading"===this.uiState,busy:"busy"===this.uiState,navigating:"navigating"===this.uiState,empty:!(null===(o=null===(r=null===(t=this.order())||void 0===t?void 0:t.line_items)||void 0===r?void 0:r.pagination)||void 0===o?void 0:o.count),error:this.error,order:this.order(),lineItems:(null===(s=null===(i=this.order())||void 0===i?void 0:i.line_items)||void 0===s?void 0:s.data)||[],tax_status:null===(a=this.order())||void 0===a?void 0:a.tax_status,customerShippingAddress:"string"!=typeof(null===(n=this.order())||void 0===n?void 0:n.customer)?null===(l=null===(d=this.order())||void 0===d?void 0:d.customer)||void 0===l?void 0:l.shipping_address:{},shippingAddress:null===(c=this.order())||void 0===c?void 0:c.shipping_address,taxStatus:null===(h=this.order())||void 0===h?void 0:h.tax_status,formId:this.formId}}render(){return h(Fragment,null,this.order()&&h(Universe.Provider,{state:this.state()},h("sc-cart-session-provider",{order:this.order(),"form-id":this.formId,"group-id":this.formId,onScUpdateOrderState:e=>this.setOrder(e.detail),onScError:e=>this.error=e.detail},h("sc-cart-icon",{count:this.getItemsCount(),onClick:()=>this.open=!this.open}),h("sc-drawer",{open:this.open,onScAfterHide:()=>this.open=!1,onScAfterShow:()=>this.open=!0},!0===this.open&&h(Fragment,null,h("div",{class:"cart__header-suffix",slot:"header"},h("slot",{name:"cart-header"}),h("sc-error",{style:{"--sc-alert-border-radius":"0"},slot:"header",error:this.error,onScUpdateError:e=>this.error=e.detail})),h("slot",null)),"busy"===this.uiState&&h("sc-block-ui",{"z-index":9})))))}static get is(){return"sc-cart"}static get encapsulation(){return"shadow"}static get originalStyleUrls(){return{$:["sc-cart.scss"]}}static get styleUrls(){return{$:["sc-cart.css"]}}static get properties(){return{formId:{type:"string",mutable:!1,complexType:{original:"string",resolved:"string",references:{}},required:!1,optional:!1,docs:{tags:[],text:"The form id to use for the cart."},attribute:"form-id",reflect:!0},header:{type:"string",mutable:!1,complexType:{original:"string",resolved:"string",references:{}},required:!1,optional:!1,docs:{tags:[],text:"The header for the popout."},attribute:"header",reflect:!1},checkoutLink:{type:"string",mutable:!1,complexType:{original:"string",resolved:"string",references:{}},required:!1,optional:!1,docs:{tags:[],text:""},attribute:"checkout-link",reflect:!1},cartTemplate:{type:"string",mutable:!1,complexType:{original:"string",resolved:"string",references:{}},required:!1,optional:!1,docs:{tags:[],text:"The template for the cart to inject when opened."},attribute:"cart-template",reflect:!1},mode:{type:"string",mutable:!1,complexType:{original:"'test' | 'live'",resolved:'"live" | "test"',references:{}},required:!1,optional:!1,docs:{tags:[],text:"Are we in test or live mode."},attribute:"mode",reflect:!1,defaultValue:"'live'"},checkoutUrl:{type:"string",mutable:!1,complexType:{original:"string",resolved:"string",references:{}},required:!1,optional:!1,docs:{tags:[],text:"The checkout url for the button."},attribute:"checkout-url",reflect:!1},alwaysShow:{type:"boolean",mutable:!1,complexType:{original:"boolean",resolved:"boolean",references:{}},required:!1,optional:!1,docs:{tags:[],text:"Should we force show the cart, even if there's a form on the page?"},attribute:"always-show",reflect:!1}}}static get states(){return{open:{},uiState:{},error:{}}}static get watchers(){return[{propName:"open",methodName:"handleOpenChange"}]}static get listeners(){return[{name:"scSetState",method:"handleSetState",target:void 0,capture:!1,passive:!1},{name:"scError",method:"handleErrorEvent",target:void 0,capture:!1,passive:!1},{name:"scCloseCart",method:"handleCloseCart",target:void 0,capture:!1,passive:!1}]}}