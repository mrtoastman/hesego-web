/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { Activation, Address, Bump, CancellationReason, Checkout, ChoiceItem, Customer, DiscountResponse, Download, Fee, FormState, FormStateSetter, License, LineItem, LineItemData, ManualPaymentMethod, Order, OrderStatus, PaymentIntent, PaymentMethod, Price, PriceChoice, Prices, Processor, ProcessorName, Product, ProductGroup, Products, Purchase, ResponseError, RuleGroup, Subscription, SubscriptionProtocol, SubscriptionStatus, TaxIdentifier, TaxProtocol, TaxStatus, WordPressUser } from "./types";
import { LineItemData as LineItemData1 } from "src/types";
export namespace Components {
    interface ScAddress {
        /**
          * The address.
         */
        "address": Partial<Address>;
        /**
          * Is this disabled?
         */
        "disabled": boolean;
        /**
          * The label for the field.
         */
        "label": string;
        /**
          * Is this loading?
         */
        "loading": boolean;
        "names": Partial<Address>;
        "placeholders": Partial<Address>;
        "reportValidity": () => Promise<boolean>;
        /**
          * Is this required?
         */
        "required": boolean;
        /**
          * Should we show name field?
         */
        "showLine2": boolean;
        /**
          * Should we show name field?
         */
        "showName": boolean;
    }
    interface ScAlert {
        /**
          * Makes the alert closable.
         */
        "closable": boolean;
        /**
          * The length of time, in milliseconds, the alert will show before closing itself. If the user interacts with the alert before it closes (e.g. moves the mouse over it), the timer will restart. Defaults to `Infinity`.
         */
        "duration": number;
        /**
          * Hides the alert
         */
        "hide": () => Promise<void>;
        /**
          * No icon
         */
        "noIcon": boolean;
        /**
          * Indicates whether or not the alert is open. You can use this in lieu of the show/hide methods.
         */
        "open": boolean;
        /**
          * Scroll margin
         */
        "scrollMargin": string;
        /**
          * Scroll into view.
         */
        "scrollOnOpen": boolean;
        /**
          * Shows the alert.
         */
        "show": () => Promise<void>;
        /**
          * The title.
         */
        "title": string;
        /**
          * The type of alert.
         */
        "type": 'primary' | 'success' | 'info' | 'warning' | 'danger';
    }
    interface ScAvatar {
        /**
          * The image source to use for the avatar.
         */
        "image": string;
        /**
          * Initials to use as a fallback when no image is available (1-2 characters max recommended).
         */
        "initials": string;
        /**
          * A label to use to describe the avatar to assistive devices.
         */
        "label": string;
        /**
          * Indicates how the browser should load the image.
         */
        "loading": 'eager' | 'lazy';
        /**
          * The shape of the avatar.
         */
        "shape": 'circle' | 'square' | 'rounded';
    }
    interface ScBadgeNotice {
        "label": string;
        "size": 'small' | 'medium' | 'large';
        "type": 'primary' | 'success' | 'info' | 'warning' | 'danger' | 'default';
    }
    interface ScBlockUi {
        "spinner": boolean;
        "transparent": boolean;
        "zIndex": number;
    }
    interface ScBreadcrumb {
        /**
          * Optional URL to direct the user to when the breadcrumb item is activated. When set, a link will be rendered internally. When unset, a button will be rendered instead.
         */
        "href"?: string;
        /**
          * The `rel` attribute to use on the link. Only used when `href` is set.
         */
        "rel": string;
        /**
          * Tells the browser where to open the link. Only used when `href` is set.
         */
        "target"?: '_blank' | '_parent' | '_self' | '_top';
    }
    interface ScBreadcrumbs {
        /**
          * The label to use for the breadcrumb control. This will not be shown, but it will be announced by screen readers and other assistive devices.
         */
        "label": string;
    }
    interface ScButton {
        /**
          * Draws the button in a busy state.
         */
        "busy"?: boolean;
        /**
          * Draws the button with a caret for use with dropdowns, popovers, etc.
         */
        "caret"?: boolean;
        /**
          * Draws a circle button.
         */
        "circle"?: boolean;
        /**
          * Disables the button.
         */
        "disabled"?: boolean;
        /**
          * Tells the browser to download the linked file as this filename. Only used when `href` is set.
         */
        "download": string;
        /**
          * Draws the button full-width.
         */
        "full"?: boolean;
        /**
          * When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`.
         */
        "href": string;
        /**
          * Draws the button in a loading state.
         */
        "loading"?: boolean;
        /**
          * An optional name for the button. Ignored when `href` is set.
         */
        "name": string;
        /**
          * Draws an outlined button.
         */
        "outline"?: boolean;
        /**
          * Draws a pill-style button with rounded edges.
         */
        "pill"?: boolean;
        /**
          * The button's size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * Indicates if activating the button should submit the form. Ignored when `href` is set.
         */
        "submit"?: boolean;
        /**
          * Tells the browser where to open the link. Only used when `href` is set.
         */
        "target": '_blank' | '_parent' | '_self' | '_top';
        /**
          * The button's type.
         */
        "type": 'default' | 'primary' | 'success' | 'info' | 'warning' | 'danger' | 'text' | 'link';
        /**
          * An optional value for the button. Ignored when `href` is set.
         */
        "value": string;
    }
    interface ScButtonGroup {
        "label": string;
        "separate": boolean;
    }
    interface ScCancelDialog {
        "open": boolean;
        "protocol": SubscriptionProtocol;
        "subscription": Subscription;
    }
    interface ScCancelDiscount {
        "comment": string;
        "protocol": SubscriptionProtocol;
        "reason": CancellationReason;
        "subscription": Subscription;
    }
    interface ScCancelSurvey {
        "protocol": SubscriptionProtocol;
        "reasons": CancellationReason[];
    }
    interface ScCard {
        /**
          * Is this card borderless.
         */
        "borderless": boolean;
        /**
          * A link for the card.
         */
        "href": string;
        /**
          * Is this card loading.
         */
        "loading": boolean;
        /**
          * Eliminate the divider
         */
        "noDivider": boolean;
        /**
          * Remove padding
         */
        "noPadding": boolean;
    }
    interface ScCart {
        /**
          * Should we force show the cart, even if there's a form on the page?
         */
        "alwaysShow": boolean;
        /**
          * The template for the cart to inject when opened.
         */
        "cartTemplate": string;
        "checkoutLink": string;
        /**
          * The checkout url for the button.
         */
        "checkoutUrl": string;
        /**
          * The form id to use for the cart.
         */
        "formId": string;
        /**
          * The header for the popout.
         */
        "header": string;
        /**
          * Are we in test or live mode.
         */
        "mode": 'test' | 'live';
    }
    interface ScCartForm {
        /**
          * The form id to use for the cart.
         */
        "formId": string;
        /**
          * Are we in test or live mode.
         */
        "mode": 'test' | 'live';
        /**
          * The price id to add.
         */
        "priceId": string;
        /**
          * The quantity
         */
        "quantity": number;
    }
    interface ScCartFormSubmit {
        /**
          * Is the cart busy
         */
        "busy": boolean;
        /**
          * Show a full-width button.
         */
        "full": boolean;
        /**
          * Icon to show.
         */
        "icon": string;
        /**
          * The button's size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * The button type.
         */
        "type": 'default' | 'primary' | 'success' | 'info' | 'warning' | 'danger' | 'text' | 'link';
    }
    interface ScCartHeader {
        "lineItems": Array<LineItem>;
    }
    interface ScCartIcon {
        /**
          * The count to show in the cart icon.
         */
        "count": number;
        /**
          * The icon to show.
         */
        "icon": string;
    }
    interface ScCartLoader {
        /**
          * The form id to use for the cart.
         */
        "formId": string;
        /**
          * The mode for the form.
         */
        "mode": 'live' | 'test';
        /**
          * The cart template to inject when opened.
         */
        "template": string;
    }
    interface ScCartSessionProvider {
        /**
          * Order Object
         */
        "order": Checkout;
    }
    interface ScCartSubmit {
        /**
          * Is the cart busy
         */
        "busy": boolean;
        "checkoutLink": string;
        /**
          * Show a full-width button.
         */
        "full": boolean;
        /**
          * Icon to show.
         */
        "icon": string;
        /**
          * The button's size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * The button type.
         */
        "type": 'default' | 'primary' | 'success' | 'info' | 'warning' | 'danger' | 'text' | 'link';
    }
    interface ScCcLogo {
        "brand": string;
    }
    interface ScChargesList {
        "allLink": string;
        "heading": string;
        /**
          * Query to fetch charges
         */
        "query": {
    page: number;
    per_page: number;
  };
        "showPagination": boolean;
    }
    interface ScCheckbox {
        /**
          * Draws the checkbox in a checked state.
         */
        "checked": boolean;
        /**
          * Disables the checkbox.
         */
        "disabled": boolean;
        /**
          * Makes this edit and not editable.
         */
        "edit": boolean;
        /**
          * Draws the checkbox in an indeterminate state.
         */
        "indeterminate": boolean;
        /**
          * This will be true when the control is in an invalid state. Validity is determined by the `required` prop.
         */
        "invalid": boolean;
        /**
          * The checkbox's name attribute.
         */
        "name": string;
        /**
          * Checks for validity and shows the browser's validation message if the control is invalid.
         */
        "reportValidity": () => Promise<boolean>;
        /**
          * Makes the checkbox a required field.
         */
        "required": boolean;
        /**
          * Removes focus from the checkbox.
         */
        "triggerBlur": () => Promise<void>;
        /**
          * Simulates a click on the checkbox.
         */
        "triggerClick": () => Promise<void>;
        /**
          * Sets focus on the checkbox.
         */
        "triggerFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * The checkbox's value attribute.
         */
        "value": string;
    }
    interface ScCheckout {
        /**
          * The abandoned checkout return url.
         */
        "abandonedCheckoutReturnUrl": string;
        /**
          * Alignment
         */
        "alignment": 'center' | 'wide' | 'full';
        /**
          * Currency to use for this checkout.
         */
        "currencyCode": string;
        /**
          * Stores the current customer
         */
        "customer": Customer;
        /**
          * Should we disable components validation
         */
        "disableComponentsValidation": boolean;
        /**
          * Can we edit line items?
         */
        "editLineItems": boolean;
        /**
          * The checkout form id
         */
        "formId": number;
        /**
          * Text for the loading states of the form.
         */
        "loadingText": {
    finalizing: string;
    paying: string;
    confirming: string;
    confirmed: string;
  };
        /**
          * Is this user logged in?
         */
        "loggedIn": boolean;
        /**
          * Manual payment methods enabled for this form.
         */
        "manualPaymentMethods": ManualPaymentMethod[];
        /**
          * Are we in test or live mode.
         */
        "mode": 'test' | 'live';
        /**
          * When the form was modified.
         */
        "modified": string;
        /**
          * Whether to persist the session in the browser between visits.
         */
        "persistSession": boolean;
        /**
          * An array of prices to pre-fill in the form.
         */
        "prices": Array<PriceChoice>;
        /**
          * Processors enabled for this form.
         */
        "processors": Processor[];
        /**
          * A product to pre-fill the form.
         */
        "product": Product;
        /**
          * Can we remove line items?
         */
        "removeLineItems": boolean;
        /**
          * Use the Stripe payment element.
         */
        "stripePaymentElement": boolean;
        /**
          * Submit the form
         */
        "submit": ({ skip_validation }?: { skip_validation: boolean; }) => Promise<Checkout | NodeJS.Timeout>;
        /**
          * Success text for the form.
         */
        "successText": {
    title: string;
    description: string;
    button: string;
  };
        /**
          * Where to go on success
         */
        "successUrl": string;
        /**
          * The account tax protocol
         */
        "taxProtocol": TaxProtocol;
        /**
          * Validate the form.
         */
        "validate": () => Promise<boolean>;
    }
    interface ScCheckoutFormErrors {
        /**
          * The current order.
         */
        "checkoutState": FormState;
        /**
          * Error to display.
         */
        "error": ResponseError | null;
    }
    interface ScCheckoutMolliePayment {
        "method": string;
        "processorId": string;
    }
    interface ScCheckoutUnsavedChangesWarning {
        "state": FormState;
    }
    interface ScChoice {
        /**
          * Draws the choice in a checked state.
         */
        "checked": boolean;
        /**
          * Is the choice disabled
         */
        "disabled": boolean;
        /**
          * This will be true when the control is in an invalid state. Validity is determined by the `required` prop.
         */
        "invalid": boolean;
        /**
          * The choice name attribute
         */
        "name": string;
        /**
          * Checks for validity and shows the browser's validation message if the control is invalid.
         */
        "reportValidity": () => Promise<boolean>;
        /**
          * Is this required
         */
        "required": boolean;
        /**
          * Sets a custom validation message. If `message` is not empty, the field will be considered invalid.
         */
        "setCustomValidity": (message: string) => Promise<void>;
        /**
          * Show the radio/checkbox control
         */
        "showControl": boolean;
        /**
          * Show the label
         */
        "showLabel": boolean;
        /**
          * Show the price
         */
        "showPrice": boolean;
        /**
          * The size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * Simulates a click on the choice.
         */
        "triggerClick": () => Promise<void>;
        "triggerFocus": () => Promise<void>;
        /**
          * The choice name attribute
         */
        "type": 'radio' | 'checkbox';
        /**
          * The choice value
         */
        "value": string;
    }
    interface ScChoiceContainer {
        /**
          * Draws the choice in a checked state.
         */
        "checked": boolean;
        /**
          * Is the choice disabled
         */
        "disabled": boolean;
        /**
          * This will be true when the control is in an invalid state. Validity is determined by the `required` prop.
         */
        "invalid": boolean;
        /**
          * The choice name attribute
         */
        "name": string;
        /**
          * Checks for validity and shows the browser's validation message if the control is invalid.
         */
        "reportValidity": () => Promise<boolean>;
        /**
          * Is this required
         */
        "required": boolean;
        /**
          * Sets a custom validation message. If `message` is not empty, the field will be considered invalid.
         */
        "setCustomValidity": (message: string) => Promise<void>;
        /**
          * Show the radio/checkbox control
         */
        "showControl": boolean;
        /**
          * The size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * Simulates a click on the choice.
         */
        "triggerClick": () => Promise<void>;
        "triggerFocus": () => Promise<void>;
        /**
          * The choice name attribute
         */
        "type": 'radio' | 'checkbox';
        /**
          * The choice value
         */
        "value": string;
    }
    interface ScChoices {
        "autoWidth": boolean;
        /**
          * Number of columns on desktop
         */
        "columns": number;
        /**
          * Validation error message.
         */
        "errorMessage": string;
        /**
          * The input's help text.
         */
        "help": string;
        /**
          * Hides the fieldset and legend that surrounds the group. The label will still be read by screen readers.
         */
        "hideLabel": boolean;
        /**
          * The group label. Required for proper accessibility. Alternatively, you can use the label slot.
         */
        "label": string;
        /**
          * Required
         */
        "required": boolean;
        /**
          * Should we show the label
         */
        "showLabel": boolean;
        /**
          * Input size
         */
        "size": 'small' | 'medium' | 'large';
        "triggerFocus": () => Promise<void>;
    }
    interface ScColumn {
    }
    interface ScColumns {
        /**
          * Is this full vertical height
         */
        "isFullHeight": boolean;
        /**
          * Is this reverse ordered on mobile
         */
        "isReversedOnMobile": boolean;
        /**
          * Is this stacked on mobile
         */
        "isStackedOnMobile": boolean;
        /**
          * The vertical alignment of the columns.
         */
        "verticalAlignment": string;
    }
    interface ScCompactAddress {
        /**
          * The address.
         */
        "address": Partial<Address>;
        /**
          * Label for the address
         */
        "label": string;
        /**
          * Is this loading
         */
        "loading": boolean;
        "names": Partial<Address>;
        /**
          * Placeholders
         */
        "placeholders": Partial<Address>;
        "reportValidity": () => Promise<boolean>;
        /**
          * Is this required?
         */
        "required": boolean;
    }
    interface ScConditionalForm {
        /**
          * Selector label
         */
        "rule_groups": RuleGroup[];
    }
    interface ScConsumer {
        "renderer": any;
    }
    interface ScCouponForm {
        /**
          * Is the form calculating
         */
        "busy": boolean;
        /**
          * The text for apply button
         */
        "buttonText": string;
        "collapsed": boolean;
        /**
          * Currency
         */
        "currency": string;
        /**
          * The discount
         */
        "discount": DiscountResponse;
        /**
          * The discount amount
         */
        "discountAmount": number;
        /**
          * The error message
         */
        "error": string;
        /**
          * Force the form to show
         */
        "forceOpen": boolean;
        /**
          * The label for the coupon form
         */
        "label": string;
        /**
          * Is the form loading
         */
        "loading": boolean;
        /**
          * Is it open
         */
        "open": boolean;
        /**
          * The placeholder for the input
         */
        "placeholder": string;
    }
    interface ScCustomOrderPriceInput {
        /**
          * Is this busy
         */
        "busy": boolean;
        /**
          * Help text.
         */
        "help": string;
        /**
          * Label for the field.
         */
        "label": string;
        /**
          * Label for the choice.
         */
        "lineItems": LineItem[];
        /**
          * Is this loading
         */
        "loading": boolean;
        /**
          * Input placeholder.
         */
        "placeholder": string;
        /**
          * Stores the price
         */
        "price": Price;
        /**
          * Id of the price.
         */
        "priceId": string;
        /**
          * Is this required?
         */
        "required": boolean;
        /**
          * Show the currency code?
         */
        "showCode": boolean;
    }
    interface ScCustomerDetails {
        "customer": Customer;
        "editLink": string;
        "error": string;
        "heading": string;
        "loading": boolean;
    }
    interface ScCustomerEdit {
        "customer": Customer;
        "heading": string;
        "successUrl": string;
    }
    interface ScCustomerEmail {
        /**
          * Is abandoned checkout enabled?
         */
        "abandonedCheckoutEnabled": boolean;
        /**
          * The input's autofocus attribute.
         */
        "autofocus": boolean;
        /**
          * Force a customer.
         */
        "customer": Customer;
        /**
          * Disables the input.
         */
        "disabled": boolean;
        /**
          * Inputs focus
         */
        "hasFocus": boolean;
        /**
          * The input's help text.
         */
        "help": string;
        /**
          * This will be true when the control is in an invalid state. Validity is determined by props such as `type`, `required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.
         */
        "invalid": boolean;
        /**
          * The input's label.
         */
        "label": string;
        /**
          * Is the user logged in.
         */
        "loggedIn": boolean;
        /**
          * (passed from the sc-checkout component automatically)
         */
        "order": Checkout;
        /**
          * Draws a pill-style input with rounded edges.
         */
        "pill": boolean;
        /**
          * The input's placeholder text.
         */
        "placeholder": string;
        /**
          * Makes the input readonly.
         */
        "readonly": boolean;
        "reportValidity": () => Promise<boolean>;
        /**
          * Makes the input a required field.
         */
        "required": boolean;
        /**
          * Should we show the label
         */
        "showLabel": boolean;
        /**
          * The input's size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * A message for tracking confirmation.
         */
        "trackingConfirmationMessage": string;
        /**
          * The input's value attribute.
         */
        "value": string;
    }
    interface ScCustomerFirstname {
        /**
          * The input's autofocus attribute.
         */
        "autofocus": boolean;
        /**
          * Force a customer.
         */
        "customer": Customer;
        /**
          * Disables the input.
         */
        "disabled": boolean;
        /**
          * Inputs focus
         */
        "hasFocus": boolean;
        /**
          * The input's help text.
         */
        "help": string;
        /**
          * This will be true when the control is in an invalid state. Validity is determined by props such as `type`, `required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.
         */
        "invalid": boolean;
        /**
          * The input's label.
         */
        "label": string;
        /**
          * Is the user logged in.
         */
        "loggedIn": boolean;
        /**
          * (passed from the sc-checkout component automatically)
         */
        "order": Checkout;
        /**
          * Draws a pill-style input with rounded edges.
         */
        "pill": boolean;
        /**
          * The input's placeholder text.
         */
        "placeholder": string;
        /**
          * Makes the input readonly.
         */
        "readonly": boolean;
        "reportValidity": () => Promise<boolean>;
        /**
          * Makes the input a required field.
         */
        "required": boolean;
        /**
          * Should we show the label
         */
        "showLabel": boolean;
        /**
          * The input's size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * The input's value attribute.
         */
        "value": string;
    }
    interface ScCustomerLastname {
        /**
          * The input's autofocus attribute.
         */
        "autofocus": boolean;
        /**
          * Force a customer.
         */
        "customer": Customer;
        /**
          * Disables the input.
         */
        "disabled": boolean;
        /**
          * Inputs focus
         */
        "hasFocus": boolean;
        /**
          * The input's help text.
         */
        "help": string;
        /**
          * This will be true when the control is in an invalid state. Validity is determined by props such as `type`, `required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.
         */
        "invalid": boolean;
        /**
          * The input's label.
         */
        "label": string;
        /**
          * Is the user logged in.
         */
        "loggedIn": boolean;
        /**
          * (passed from the sc-checkout component automatically)
         */
        "order": Checkout;
        /**
          * Draws a pill-style input with rounded edges.
         */
        "pill": boolean;
        /**
          * The input's placeholder text.
         */
        "placeholder": string;
        /**
          * Makes the input readonly.
         */
        "readonly": boolean;
        "reportValidity": () => Promise<boolean>;
        /**
          * Makes the input a required field.
         */
        "required": boolean;
        /**
          * Should we show the label
         */
        "showLabel": boolean;
        /**
          * The input's size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * The input's value attribute.
         */
        "value": string;
    }
    interface ScCustomerName {
        /**
          * The input's autofocus attribute.
         */
        "autofocus": boolean;
        /**
          * Force a customer.
         */
        "customer": Customer;
        /**
          * Disables the input.
         */
        "disabled": boolean;
        /**
          * Inputs focus
         */
        "hasFocus": boolean;
        /**
          * The input's help text.
         */
        "help": string;
        /**
          * This will be true when the control is in an invalid state. Validity is determined by props such as `type`, `required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.
         */
        "invalid": boolean;
        /**
          * The input's label.
         */
        "label": string;
        /**
          * Is the user logged in.
         */
        "loggedIn": boolean;
        /**
          * (passed from the sc-checkout component automatically)
         */
        "order": Checkout;
        /**
          * Draws a pill-style input with rounded edges.
         */
        "pill": boolean;
        /**
          * The input's placeholder text.
         */
        "placeholder": string;
        /**
          * Makes the input readonly.
         */
        "readonly": boolean;
        "reportValidity": () => Promise<boolean>;
        /**
          * Makes the input a required field.
         */
        "required": boolean;
        /**
          * Should we show the label
         */
        "showLabel": boolean;
        /**
          * The input's size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * The input's value attribute.
         */
        "value": string;
    }
    interface ScDashboardCustomerDetails {
        "customerId": string;
        "heading": string;
    }
    interface ScDashboardDownloadsList {
        "allLink": string;
        "heading": string;
        "isCustomer": boolean;
        /**
          * Customer id to fetch subscriptions
         */
        "query": any;
        "requestNonce": string;
    }
    interface ScDashboardModule {
        "error": string;
        "heading": string;
        "loading": boolean;
    }
    interface ScDialog {
        /**
          * The dialog's label as displayed in the header. You should always include a relevant label even when using `no-header`, as it is required for proper accessibility.
         */
        "label": string;
        /**
          * Disables the header. This will also remove the default close button, so please ensure you provide an easy, accessible way for users to dismiss the dialog.
         */
        "noHeader": boolean;
        /**
          * Indicates whether or not the dialog is open. You can use this in lieu of the show/hide methods.
         */
        "open": boolean;
    }
    interface ScDivider {
    }
    interface ScDonationChoices {
        "busy": boolean;
        /**
          * Currency code for the donation.
         */
        "currencyCode": string;
        /**
          * The default amount to load the page with.
         */
        "defaultAmount": string;
        /**
          * The label for the field.
         */
        "label": string;
        /**
          * Order line items.
         */
        "lineItems": LineItem[];
        /**
          * Is this loading
         */
        "loading": boolean;
        /**
          * The price id for the fields.
         */
        "priceId": string;
        "removeInvalid": boolean;
        "reportValidity": () => Promise<boolean>;
    }
    interface ScDownloadsList {
        "customerId": string;
        "downloads": Download[];
        "heading": string;
    }
    interface ScDrawer {
        /**
          * By default, the drawer slides out of its containing block (usually the viewport). To make the drawer slide out of its parent element, set this prop and add `position: relative` to the parent.
         */
        "contained": boolean;
        /**
          * The drawer's label as displayed in the header. You should always include a relevant label even when using `no-header`, as it is required for proper accessibility.
         */
        "label": string;
        /**
          * Removes the header. This will also remove the default close button, so please ensure you provide an easy, accessible way for users to dismiss the drawer.
         */
        "noHeader": boolean;
        /**
          * Indicates whether or not the drawer is open. You can use this in lieu of the show/hide methods.
         */
        "open": boolean;
        /**
          * The direction from which the drawer will open.
         */
        "placement": 'top' | 'end' | 'bottom' | 'start';
    }
    interface ScDropdown {
        "clickEl"?: HTMLElement;
        /**
          * Determines whether the dropdown should hide when a menu item is selected
         */
        "closeOnSelect": boolean;
        /**
          * Is this disabled.
         */
        "disabled": boolean;
        /**
          * The distance in pixels from which to offset the panel away from its trigger.
         */
        "distance": number;
        /**
          * Enable this option to prevent the panel from being clipped when the component is placed inside a container with `overflow: auto|scroll`.
         */
        "hoist": boolean;
        /**
          * Indicates whether or not the dropdown is open. You can use this in lieu of the show/hide methods.
         */
        "open"?: boolean;
        /**
          * The placement of the dropdown.
         */
        "placement": | 'top'
    | 'top-start'
    | 'top-end'
    | 'bottom'
    | 'bottom-start'
    | 'bottom-end'
    | 'right'
    | 'right-start'
    | 'right-end'
    | 'left'
    | 'left-start'
    | 'left-end';
        /**
          * The placement of the dropdown panel
         */
        "position": 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
        /**
          * The distance in pixels from which to offset the panel along its trigger.
         */
        "skidding": number;
    }
    interface ScEmpty {
        "icon": string;
    }
    interface ScError {
        /**
          * Error to display.
         */
        "error": ResponseError | null;
    }
    interface ScExpressPayment {
        "busy": boolean;
        "debug": boolean;
        "dividerText": string;
        "formId": number | string;
        "hasPaymentOptions": boolean;
        "order": Checkout;
        "processor": ProcessorName;
    }
    interface ScFlex {
        "alignItems": string;
        "columnGap": string;
        "flexDirection": string;
        "flexWrap": string;
        "justifyContent": string;
        "stack": string;
    }
    interface ScForm {
        /**
          * Serializes all form controls elements and returns a `FormData` object.
         */
        "getFormData": () => Promise<FormData>;
        "getFormJson": () => Promise<Record<string, unknown>>;
        /**
          * Prevent the form from validating inputs before submitting.
         */
        "novalidate": boolean;
        "submit": () => Promise<void>;
        "validate": () => Promise<boolean>;
    }
    interface ScFormComponentsValidator {
        /**
          * Disable validation?
         */
        "disabled": boolean;
        /**
          * The order
         */
        "order": Checkout;
        /**
          * The tax protocol
         */
        "taxProtocol": TaxProtocol;
    }
    interface ScFormControl {
        /**
          * Store the error message
         */
        "errorMessage": string;
        /**
          * Display server-side validation errors.
         */
        "errors": any;
        /**
          * Help text
         */
        "help": string;
        /**
          * Help id
         */
        "helpId": string;
        /**
          * Input id.
         */
        "inputId": string;
        /**
          * Input label.
         */
        "label": string;
        /**
          * Input label id.
         */
        "labelId": string;
        /**
          * Name for the input. Used for validation errors.
         */
        "name": string;
        /**
          * Whether the input is required.
         */
        "required": boolean;
        /**
          * Show the label.
         */
        "showLabel": boolean;
        /**
          * Size of the label
         */
        "size": 'small' | 'medium' | 'large';
    }
    interface ScFormErrorProvider {
        /**
          * The current order.
         */
        "checkoutState": FormState;
    }
    interface ScFormRow {
    }
    interface ScFormStateProvider {
    }
    interface ScFormatBytes {
        /**
          * Determines how to display the result, e.g. "100 bytes", "100 b", or "100b".
         */
        "display": 'long' | 'short' | 'narrow';
        /**
          * The locale to use when formatting the number.
         */
        "locale": string;
        /**
          * The unit to display.
         */
        "unit": 'byte' | 'bit';
        /**
          * The number to format in bytes.
         */
        "value": number;
    }
    interface ScFormatDate {
        /**
          * The date/time to format. If not set, the current date and time will be used.
         */
        "date": Date | string | number;
        /**
          * The format for displaying the day.
         */
        "day": 'numeric' | '2-digit';
        /**
          * The format for displaying the era.
         */
        "era": 'narrow' | 'short' | 'long';
        /**
          * The format for displaying the hour.
         */
        "hour": 'numeric' | '2-digit';
        /**
          * When set, 24 hour time will always be used.
         */
        "hourFormat": 'auto' | '12' | '24';
        /**
          * The locale to use when formatting the date/time.
         */
        "locale": string;
        /**
          * The format for displaying the minute.
         */
        "minute": 'numeric' | '2-digit';
        /**
          * The format for displaying the month.
         */
        "month": 'numeric' | '2-digit' | 'narrow' | 'short' | 'long';
        /**
          * The format for displaying the second.
         */
        "second": 'numeric' | '2-digit';
        /**
          * The time zone to express the time in.
         */
        "timeZone": string;
        /**
          * The format for displaying the time.
         */
        "timeZoneName": 'short' | 'long';
        "type": 'timestamp' | 'date';
        /**
          * The format for displaying the weekday.
         */
        "weekday": 'narrow' | 'short' | 'long';
        /**
          * The format for displaying the year.
         */
        "year": 'numeric' | '2-digit';
    }
    interface ScFormatInterval {
        "every": string;
        "fallback": string;
        "interval": string;
        /**
          * The number to format.
         */
        "value": number;
    }
    interface ScFormatNumber {
        /**
          * The currency to use when formatting. Must be an ISO 4217 currency code such as `USD` or `EUR`.
         */
        "currency": string;
        /**
          * How to display the currency.
         */
        "currencyDisplay": 'symbol' | 'narrowSymbol' | 'code' | 'name';
        /**
          * The locale to use when formatting the number.
         */
        "locale": string;
        /**
          * The maximum number of fraction digits to use. Possible values are 0 - 20.
         */
        "maximumFractionDigits": number;
        /**
          * The maximum number of significant digits to use,. Possible values are 1 - 21.
         */
        "maximumSignificantDigits": number;
        /**
          * The minimum number of fraction digits to use. Possible values are 0 - 20.
         */
        "minimumFractionDigits": number;
        /**
          * The minimum number of integer digits to use. Possible values are 1 - 21.
         */
        "minimumIntegerDigits": number;
        /**
          * The minimum number of significant digits to use. Possible values are 1 - 21.
         */
        "minimumSignificantDigits": number;
        "noConvert": boolean;
        /**
          * Turns off grouping separators.
         */
        "noGrouping": boolean;
        /**
          * The formatting style to use.
         */
        "type": 'currency' | 'decimal' | 'percent';
        /**
          * The number to format.
         */
        "value": number;
    }
    interface ScHeading {
        "size": 'small' | 'medium' | 'large';
    }
    interface ScIcon {
        /**
          * An alternative description to use for accessibility. If omitted, the name or src will be used to generate it.
         */
        "label": string;
        /**
          * The name of a registered custom icon library.
         */
        "library": string;
        /**
          * The name of the icon to draw.
         */
        "name": string;
        /**
          * An external URL of an SVG file.
         */
        "src": string;
    }
    interface ScInput {
        /**
          * The input's autocomplete attribute.
         */
        "autocomplete": string;
        /**
          * The input's autocorrect attribute.
         */
        "autocorrect": string;
        /**
          * The input's autofocus attribute.
         */
        "autofocus": boolean;
        /**
          * Adds a clear button when the input is populated.
         */
        "clearable": boolean;
        /**
          * Disables the input.
         */
        "disabled": boolean;
        /**
          * Inputs focus
         */
        "hasFocus": boolean;
        /**
          * The input's help text.
         */
        "help": string;
        /**
          * Hidden
         */
        "hidden": boolean;
        /**
          * The input's inputmode attribute.
         */
        "inputmode": 'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url';
        /**
          * This will be true when the control is in an invalid state. Validity is determined by props such as `type`, `required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.
         */
        "invalid": boolean;
        /**
          * The input's label.
         */
        "label": string;
        /**
          * The input's maximum value.
         */
        "max": number | string;
        /**
          * The maximum length of input that will be considered valid.
         */
        "maxlength": number;
        /**
          * The input's minimum value.
         */
        "min": number | string;
        /**
          * The minimum length of input that will be considered valid.
         */
        "minlength": number;
        /**
          * The input's name attribute.
         */
        "name": string;
        /**
          * A pattern to validate input against.
         */
        "pattern": string;
        /**
          * Draws a pill-style input with rounded edges.
         */
        "pill": boolean;
        /**
          * The input's placeholder text.
         */
        "placeholder": string;
        /**
          * Makes the input readonly.
         */
        "readonly": boolean;
        "reportValidity": () => Promise<boolean>;
        /**
          * Makes the input a required field.
         */
        "required": boolean;
        /**
          * Sets a custom validation message. If `message` is not empty, the field will be considered invalid.
         */
        "setCustomValidity": (message: string) => Promise<void>;
        /**
          * Should we show the label
         */
        "showLabel": boolean;
        /**
          * The input's size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * Enables spell checking on the input.
         */
        "spellcheck": boolean;
        "squared": boolean;
        "squaredBottom": boolean;
        "squaredLeft": boolean;
        "squaredRight": boolean;
        "squaredTop": boolean;
        /**
          * The input's step attribute.
         */
        "step": number;
        /**
          * Adds a password toggle button to password inputs.
         */
        "togglePassword": boolean;
        /**
          * Removes focus from the input.
         */
        "triggerBlur": () => Promise<void>;
        /**
          * Sets focus on the input.
         */
        "triggerFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * The input's type.
         */
        "type": 'email' | 'number' | 'password' | 'search' | 'tel' | 'text' | 'url' | 'hidden';
        /**
          * The input's value attribute.
         */
        "value": string;
    }
    interface ScInvoicesList {
        "allLink": string;
        "heading": string;
        /**
          * Query to fetch invoices
         */
        "query": {
    page: number;
    per_page: number;
  };
    }
    interface ScLicensesList {
        "activations": Activation[];
        "copied": boolean;
        "heading": string;
        "licenses": License[];
    }
    interface ScLineItem {
        /**
          * Currency symbol
         */
        "currency": string;
        /**
          * Price of the item
         */
        "price": string;
    }
    interface ScLineItemBump {
        "label": string;
        "loading": boolean;
        "order": Checkout;
    }
    interface ScLineItemTax {
        "loading": boolean;
        "order": Checkout;
    }
    interface ScLineItemTotal {
        "loading": boolean;
        "order": Checkout;
        "size": 'large' | 'medium';
        "total": 'total' | 'subtotal';
    }
    interface ScLineItems {
        "busy": boolean;
        "editLineItems": boolean;
        "editable": boolean;
        "lockedChoices": Array<PriceChoice>;
        "order": Checkout;
        "prices": Prices;
        "removable": boolean;
        "removeLineItems": boolean;
    }
    interface ScLineItemsProvider {
        /**
          * Order Object
         */
        "order": Checkout;
    }
    interface ScLoginForm {
    }
    interface ScLoginProvider {
        /**
          * Is the user logged in.
         */
        "loggedIn": boolean;
        "order": Checkout;
    }
    interface ScMenu {
        "setCurrentItem": (item: HTMLScMenuItemElement) => Promise<void>;
    }
    interface ScMenuDivider {
    }
    interface ScMenuItem {
        /**
          * Draws the item in a checked state.
         */
        "checked": boolean;
        /**
          * Draws the menu item in a disabled state.
         */
        "disabled": boolean;
        /**
          * Optional link to follow.
         */
        "href": string;
        /**
          * Removes focus from the button.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the button.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * A unique value to store in the menu item. This can be used as a way to identify menu items when selected.
         */
        "value": string;
    }
    interface ScMenuLabel {
    }
    interface ScMollieAddMethod {
        "country": string;
        "currency": string;
        "customerId": string;
        "liveMode": boolean;
        "processorId": string;
        "successUrl": string;
    }
    interface ScOrder {
        "customerIds": string[];
        "heading": string;
        "orderId": string;
    }
    interface ScOrderBump {
        /**
          * The bump
         */
        "bump": Bump;
        /**
          * The checkout
         */
        "checkout": Checkout;
        /**
          * Should we show the controls
         */
        "showControl": boolean;
    }
    interface ScOrderBumps {
        "bumps": Bump[];
        "checkout": Checkout;
        "help": string;
        "label": string;
        "showControl": boolean;
    }
    interface ScOrderConfirmComponentsValidator {
        /**
          * The checkout
         */
        "checkout": Checkout;
    }
    interface ScOrderConfirmProvider {
        /**
          * Success text for the form.
         */
        "successText": {
    title: string;
    description: string;
    button: string;
  };
        /**
          * Success url.
         */
        "successUrl": string;
    }
    interface ScOrderConfirmation {
        "order": Checkout;
    }
    interface ScOrderConfirmationCustomer {
        /**
          * The customer
         */
        "customer": Customer;
        /**
          * Error message.
         */
        "error": string;
        /**
          * The heading
         */
        "heading": string;
        /**
          * Is this loading?
         */
        "loading": boolean;
        /**
          * The Order
         */
        "order": Checkout;
    }
    interface ScOrderConfirmationDetails {
        "loading": boolean;
        "order": Order;
    }
    interface ScOrderConfirmationLineItems {
        "loading": boolean;
        "order": Checkout;
    }
    interface ScOrderConfirmationTotals {
        "order": Checkout;
    }
    interface ScOrderCouponForm {
        "busy": boolean;
        "buttonText": string;
        "collapsed": boolean;
        "error": any;
        "label": string;
        "loading": boolean;
        "order": Checkout;
        "placeholder": string;
    }
    interface ScOrderDetail {
        "fallback": string;
        "label": string;
        "loading": boolean;
        "metaKey": string;
        "order": Checkout;
        "value": string;
    }
    interface ScOrderManualInstructions {
        "manualPaymentInstructions": string;
        "manualPaymentTitle": string;
    }
    interface ScOrderPassword {
        /**
          * The input's autofocus attribute.
         */
        "autofocus": boolean;
        /**
          * The input's password confirmation attribute.
         */
        "confirmation": boolean;
        /**
          * The input's confirmation help text.
         */
        "confirmationHelp": string;
        /**
          * The input's confirmation label text.
         */
        "confirmationLabel": string;
        /**
          * The input's confirmation placeholder text.
         */
        "confirmationPlaceholder": string;
        /**
          * Disables the input.
         */
        "disabled": boolean;
        /**
          * Does the email exist?
         */
        "emailExists": boolean;
        /**
          * The input's help text.
         */
        "help": string;
        /**
          * The input's label.
         */
        "label": string;
        "loggedIn": boolean;
        /**
          * Draws a pill-style input with rounded edges.
         */
        "pill": boolean;
        /**
          * The input's placeholder text.
         */
        "placeholder": string;
        /**
          * Makes the input readonly.
         */
        "readonly": boolean;
        "reportValidity": () => Promise<boolean>;
        /**
          * Makes the input a required field.
         */
        "required": boolean;
        /**
          * Should we show the label
         */
        "showLabel": boolean;
        /**
          * The input's size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * The input's value attribute.
         */
        "value": string;
    }
    interface ScOrderShippingAddress {
        "cityPlaceholder": string;
        "countryPlaceholder": string;
        /**
          * Default country for address
         */
        "defaultCountry": string;
        /**
          * Show the full address
         */
        "full": boolean;
        /**
          * Label for the field.
         */
        "label": string;
        "line1Placeholder": string;
        "line2Placeholder": string;
        /**
          * Is this loading.
         */
        "loading": boolean;
        /**
          * Show the placeholder fields.
         */
        "namePlaceholder": string;
        /**
          * Placeholder values.
         */
        "placeholders": Partial<Address>;
        "postalCodePlaceholder": string;
        "reportValidity": () => Promise<boolean>;
        /**
          * Is this required (defaults to false)
         */
        "required": boolean;
        /**
          * Holds the customer's billing address
         */
        "shippingAddress": Address;
        /**
          * Is shipping enabled for this order?
         */
        "shippingEnabled": boolean;
        /**
          * Show the name field.
         */
        "showName": boolean;
        "statePlaceholder": string;
        /**
          * Tax enabled status of the order
         */
        "taxEnabled": boolean;
        /**
          * Tax status of the order
         */
        "taxStatus": TaxStatus;
    }
    interface ScOrderStatusBadge {
        /**
          * Makes the tag clearable.
         */
        "clearable": boolean;
        /**
          * Draws a pill-style tag with rounded edges.
         */
        "pill": boolean;
        /**
          * The tag's size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * The tag's statux type.
         */
        "status": OrderStatus;
    }
    interface ScOrderSubmit {
        /**
          * Is the order busy
         */
        "busy": boolean;
        /**
          * Currency Code
         */
        "currencyCode": string;
        /**
          * Show a full-width button.
         */
        "full": boolean;
        /**
          * Icon to show.
         */
        "icon": string;
        /**
          * Is the order loading.
         */
        "loading": boolean;
        /**
          * Is this created in "test" mode
         */
        "mode": 'test' | 'live';
        /**
          * The current order.
         */
        "order": Checkout;
        /**
          * Is the order paying.
         */
        "paying": boolean;
        /**
          * The selected processor.
         */
        "processor": ProcessorName;
        /**
          * Keys and secrets for processors.
         */
        "processors": Processor[];
        /**
          * Show the secure notice
         */
        "secureNotice": boolean;
        /**
          * Secure
         */
        "secureNoticeText": string;
        /**
          * Show the total.
         */
        "showTotal": boolean;
        /**
          * The button's size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * The button type.
         */
        "type": 'default' | 'primary' | 'success' | 'info' | 'warning' | 'danger' | 'text' | 'link';
    }
    interface ScOrderSummary {
        "busy": boolean;
        "closedText": string;
        "collapsed": boolean;
        "collapsedOnMobile": boolean;
        "collapsible": boolean;
        "openText": string;
        "order": Checkout;
    }
    interface ScOrderTaxIdInput {
        /**
          * AU zone label
         */
        "auAbnLabel": string;
        /**
          * Is this busy
         */
        "busy": boolean;
        /**
          * GST zone label
         */
        "caGstLabel": string;
        /**
          * EU zone label
         */
        "euVatLabel": string;
        /**
          * UK zone label
         */
        "gbVatLabel": string;
        /**
          * The order
         */
        "order": Partial<Checkout>;
        /**
          * Other zones label
         */
        "otherLabel": string;
        /**
          * Force show the field.
         */
        "show": boolean;
        /**
          * Tax identifier
         */
        "taxIdentifier": TaxIdentifier;
        /**
          * The tax protocol.
         */
        "taxProtocol": TaxProtocol;
    }
    interface ScOrdersList {
        "allLink": string;
        "heading": string;
        "isCustomer": boolean;
        /**
          * Query to fetch orders
         */
        "query": {
    page: number;
    per_page: number;
  };
    }
    interface ScPagination {
        "page": number;
        "perPage": number;
        "total": number;
        "totalPages": number;
        "totalShowing": number;
    }
    interface ScPasswordNag {
        "open": boolean;
        /**
          * The success url.
         */
        "successUrl": string;
        /**
          * The type of alert.
         */
        "type": 'primary' | 'success' | 'info' | 'warning' | 'danger';
    }
    interface ScPayment {
        /**
          * Disabled processor types
         */
        "disabledProcessorTypes": string[];
        /**
          * Hide the test mode badge
         */
        "hideTestModeBadge": boolean;
        /**
          * The input's label.
         */
        "label": string;
        "secureNotice": string;
        "stripePaymentElement": boolean;
    }
    interface ScPaymentMethod {
        "externalLink": string;
        "externalLinkTooltipText": string;
        "full": boolean;
        "paymentMethod": PaymentMethod;
    }
    interface ScPaymentMethodChoice {
        /**
          * Should we show this in a card?
         */
        "card": boolean;
        /**
          * Is this a manual processor
         */
        "isManual": boolean;
        /**
          * The method id
         */
        "methodId": string;
        /**
          * The processor ID
         */
        "processorId": string;
    }
    interface ScPaymentMethodsList {
        /**
          * The heading
         */
        "heading": string;
        /**
          * Is this a customer
         */
        "isCustomer": boolean;
        /**
          * Query to fetch paymentMethods
         */
        "query": object;
    }
    interface ScPaymentSelected {
        "iconName": string;
        "label": string;
    }
    interface ScPaypalAddMethod {
        "currency": string;
        "customerId": string;
        "liveMode": boolean;
        "successUrl": string;
    }
    interface ScPaypalButtons {
        /**
          * Is this busy?
         */
        "busy": boolean;
        /**
          * Buttons to render
         */
        "buttons": string[];
        /**
          * Client id for the script.
         */
        "clientId": string;
        /**
          * Button color.
         */
        "color": 'gold' | 'blue' | 'silver' | 'black' | 'white';
        /**
          * Label for the button.
         */
        "label": 'paypal' | 'checkout' | 'buynow' | 'pay' | 'installment';
        /**
          * The merchant id for paypal.
         */
        "merchantId": string;
        /**
          * Merchant initiated billing enabled.
         */
        "merchantInitiated": boolean;
        /**
          * Test or live mode.
         */
        "mode": 'test' | 'live';
        /**
          * The order.
         */
        "order": Checkout;
    }
    interface ScPremiumTag {
        /**
          * The tag's size.
         */
        "size": 'small' | 'medium' | 'large';
    }
    interface ScPriceChoice {
        /**
          * Is this blank?
         */
        "blank": boolean;
        /**
          * Is this checked by default
         */
        "checked": boolean;
        /**
          * Label for the choice.
         */
        "description": string;
        /**
          * Errors from response
         */
        "error": ResponseError;
        /**
          * Is this an ad-hoc price choice
         */
        "isAdHoc": Boolean;
        /**
          * Label for the choice.
         */
        "label": string;
        /**
          * Is this loading
         */
        "loading": boolean;
        /**
          * Session
         */
        "order": Checkout;
        /**
          * Stores the price
         */
        "price": Price;
        /**
          * Id of the price.
         */
        "priceId": string;
        /**
          * Price entities
         */
        "prices": Prices;
        /**
          * Product entity
         */
        "products": Products;
        /**
          * Default quantity
         */
        "quantity": number;
        /**
          * Show the radio/checkbox control
         */
        "showControl": boolean;
        /**
          * Show the label
         */
        "showLabel": boolean;
        /**
          * Show the price amount
         */
        "showPrice": boolean;
        /**
          * Choice Type
         */
        "type": 'checkbox' | 'radio';
    }
    interface ScPriceChoices {
        /**
          * Number of columns
         */
        "columns": number;
        /**
          * Selector label
         */
        "label": string;
        /**
          * Session
         */
        "order": Checkout;
        /**
          * Required by default
         */
        "required": boolean;
    }
    interface ScPriceInput {
        /**
          * The input's autofocus attribute.
         */
        "autofocus": boolean;
        /**
          * Adds a clear button when the input is populated.
         */
        "clearable": boolean;
        /**
          * 3 letter currency code for input
         */
        "currencyCode": string;
        /**
          * Disables the input.
         */
        "disabled": boolean;
        /**
          * Inputs focus
         */
        "hasFocus": boolean;
        /**
          * The input's help text.
         */
        "help": string;
        /**
          * This will be true when the control is in an invalid state. Validity is determined by props such as `type`, `required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.
         */
        "invalid": boolean;
        /**
          * The input's label.
         */
        "label": string;
        /**
          * The input's maximum value.
         */
        "max": number;
        /**
          * The maximum length of input that will be considered valid.
         */
        "maxlength": number;
        /**
          * The input's minimum value.
         */
        "min": number;
        /**
          * The minimum length of input that will be considered valid.
         */
        "minlength": number;
        /**
          * The input's name attribute.
         */
        "name": string;
        /**
          * Draws a pill-style input with rounded edges.
         */
        "pill": boolean;
        /**
          * The input's placeholder text.
         */
        "placeholder": string;
        /**
          * Makes the input readonly.
         */
        "readonly": boolean;
        "reportValidity": () => Promise<boolean>;
        /**
          * Makes the input a required field.
         */
        "required": boolean;
        /**
          * Sets a custom validation message. If `message` is not empty, the field will be considered invalid.
         */
        "setCustomValidity": (message: string) => Promise<void>;
        /**
          * Show the currency code with the input
         */
        "showCode": boolean;
        /**
          * Should we show the label
         */
        "showLabel": boolean;
        /**
          * The input's size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * Removes focus from the input.
         */
        "triggerBlur": () => Promise<void>;
        /**
          * Sets focus on the input.
         */
        "triggerFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * The input's value attribute.
         */
        "value": string;
    }
    interface ScPriceRange {
        /**
          * The array of price objects
         */
        "prices": Price[];
    }
    interface ScProductLineItem {
        /**
          * Product monetary amount
         */
        "amount": number;
        /**
          * Currency for the product
         */
        "currency": string;
        /**
          * Can we select the quantity
         */
        "editable": boolean;
        /**
          * Product line item fees.
         */
        "fees": Fee[];
        /**
          * Url for the product image
         */
        "imageUrl": string;
        /**
          * Recurring interval (i.e. monthly, once, etc.)
         */
        "interval": string;
        /**
          * The max allowed.
         */
        "max": number;
        /**
          * Product name
         */
        "name": string;
        /**
          * Quantity
         */
        "quantity": number;
        /**
          * Is the line item removable
         */
        "removable": boolean;
        /**
          * The line item scratch amount
         */
        "scratchAmount": number;
        /**
          * Is the setup fee not included in the free trial?
         */
        "setupFeeTrialEnabled": boolean;
        /**
          * Trial duration days
         */
        "trialDurationDays": number;
    }
    interface ScProductSelectedPrice {
        /**
          * The product id.
         */
        "productId": string;
    }
    interface ScProse {
    }
    interface ScProvider {
        "STENCIL_CONTEXT": { [key: string]: any };
    }
    interface ScPurchaseDownloadsList {
        "allLink": string;
        "busy": boolean;
        "error": string;
        "heading": string;
        "loading": boolean;
        "purchases": Array<Purchase>;
        "requestNonce": string;
    }
    interface ScQuantitySelect {
        "clickEl"?: HTMLElement;
        "disabled": boolean;
        /**
          * Inputs focus
         */
        "hasFocus": boolean;
        "max": number;
        "min": number;
        "quantity": number;
    }
    interface ScRadio {
        /**
          * Simulates a click on the radio.
         */
        "ceClick": () => Promise<void>;
        /**
          * Draws the radio in a checked state.
         */
        "checked": boolean;
        /**
          * Is the radio disabled
         */
        "disabled": boolean;
        /**
          * This will be true as a workaround in the block editor to focus on the content.
         */
        "edit": boolean;
        /**
          * This will be true when the control is in an invalid state. Validity is determined by the `required` prop.
         */
        "invalid": boolean;
        /**
          * The radios name attribute
         */
        "name": string;
        /**
          * Checks for validity and shows the browser's validation message if the control is invalid.
         */
        "reportValidity": () => Promise<boolean>;
        /**
          * Is this required
         */
        "required": boolean;
        /**
          * The radios value
         */
        "value": string;
    }
    interface ScRadioGroup {
        /**
          * This will be true when the control is in an invalid state. Validity is determined by props such as `type`, `required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.
         */
        "invalid": boolean;
        /**
          * The radio group label. Required for proper accessibility.
         */
        "label": string;
        /**
          * Checks for validity and shows the browser's validation message if the control is invalid.
         */
        "reportValidity": () => Promise<boolean>;
        /**
          * Is one of these items required.
         */
        "required": boolean;
        /**
          * The selected value of the control.
         */
        "value": string;
    }
    interface ScRichText {
        /**
          * Disables the textarea.
         */
        "disabled": boolean;
        /**
          * The textarea's help text. Alternatively, you can use the help-text slot.
         */
        "help": string;
        /**
          * The textarea's label. Alternatively, you can use the label slot.
         */
        "label": string;
        /**
          * The max length.
         */
        "maxlength": number;
        /**
          * The textarea's name attribute.
         */
        "name": string;
        /**
          * The textarea's placeholder text.
         */
        "placeholder": string;
        /**
          * Makes the textarea readonly.
         */
        "readonly": boolean;
        /**
          * Makes the textarea a required field.
         */
        "required": boolean;
        /**
          * Should we show the label
         */
        "showLabel": boolean;
        /**
          * The textarea's size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * The textarea's value attribute.
         */
        "value": string;
    }
    interface ScSecureNotice {
    }
    interface ScSelect {
        /**
          * The input's autocomplete attribute.
         */
        "autocomplete": string;
        /**
          * The input's value attribute.
         */
        "choices": Array<ChoiceItem>;
        "disabled": boolean;
        /**
          * Some help text for the input.
         */
        "help": string;
        "hoist": boolean;
        /**
          * This will be true when the control is in an invalid state. Validity is determined by props such as `type`, `required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.
         */
        "invalid": boolean;
        /**
          * The input's label.
         */
        "label": string;
        "loading": boolean;
        /**
          * The input's name attribute.
         */
        "name": string;
        /**
          * Is this open
         */
        "open": boolean;
        /**
          * Placeholder for no value
         */
        "placeholder": string;
        "position": 'bottom-left' | 'bottom-right';
        "reportValidity": () => Promise<boolean>;
        "required": boolean;
        /**
          * Is search enabled?
         */
        "search": boolean;
        /**
          * Placeholder for search
         */
        "searchPlaceholder": string;
        /**
          * Sets a custom validation message. If `message` is not empty, the field will be considered invalid.
         */
        "setCustomValidity": (message: string) => Promise<void>;
        "showParentLabel": boolean;
        /**
          * The input's size.
         */
        "size": 'small' | 'medium' | 'large';
        "squared": boolean;
        "squaredBottom": boolean;
        "squaredLeft": boolean;
        "squaredRight": boolean;
        "squaredTop": boolean;
        /**
          * Can we unselect items.
         */
        "unselect": boolean;
        /**
          * The input's value attribute.
         */
        "value": string;
    }
    interface ScSessionProvider {
        /**
          * Finalize the order.
          * @returns
         */
        "finalize": () => Promise<Checkout | NodeJS.Timeout>;
        /**
          * Should we persist the session.
         */
        "persist": boolean;
        /**
          * An array of prices to pre-fill in the form.
         */
        "prices": Array<PriceChoice>;
    }
    interface ScSkeleton {
        /**
          * Animation effect
         */
        "effect": 'pulse' | 'sheen' | 'none';
    }
    interface ScSpacing {
    }
    interface ScSpinner {
    }
    interface ScStackedList {
    }
    interface ScStackedListRow {
        "href": string;
        "mobileSize": number;
        "target": string;
    }
    interface ScStripeAddMethod {
        "customerId": string;
        "liveMode": boolean;
        "successUrl": string;
    }
    interface ScStripeElement {
        /**
          * Confirm card payment
         */
        "confirmCardPayment": (secret: any) => Promise<any>;
        /**
          * Confirm card setup.
         */
        "confirmCardSetup": (secret: any) => Promise<any>;
        /**
          * Whether this field is disabled
         */
        "disabled": boolean;
        /**
          * The form state
         */
        "formState": FormState;
        /**
          * Inputs focus
         */
        "hasFocus": boolean;
        /**
          * The input's label. Alternatively, you can use the label slot.
         */
        "label": string;
        /**
          * Mode for the payment
         */
        "mode": 'live' | 'test';
        /**
          * The checkout session object for finalizing intents
         */
        "order": Checkout;
        /**
          * The input's help text. Alternatively, you can use the help-text slot.
         */
        "secureText": string;
        /**
          * The selected processor id
         */
        "selectedProcessorId": ProcessorName;
        /**
          * Should we show the label
         */
        "showLabel": boolean;
        /**
          * The input's size.
         */
        "size": 'small' | 'medium' | 'large';
    }
    interface ScStripePaymentElement {
        /**
          * Should we collect an address?
         */
        "address": boolean;
        "confirm": (type: any, args?: {}) => Promise<void>;
        /**
          * The current form state.
         */
        "formState": FormState;
        /**
          * Order to watch
         */
        "order": Checkout;
        /**
          * The selected processor name.
         */
        "selectedProcessorId": ProcessorName;
        /**
          * The Payment Intent
         */
        "stripePaymentIntent": PaymentIntent;
        /**
          * Success url to redirect.
         */
        "successUrl": string;
    }
    interface ScStripePaymentRequest {
        /**
          * Amount
         */
        "amount": number;
        /**
          * Country
         */
        "country": string;
        /**
          * Currency
         */
        "currencyCode": string;
        /**
          * Is this in debug mode.
         */
        "debug": boolean;
        "error": ResponseError | null;
        /**
          * This is required to validate the form on the server
         */
        "formId": number | string;
        /**
          * Label
         */
        "label": string;
        /**
          * Checkout Session
         */
        "order": Checkout;
        "paymentMethod": string;
        "prices": Prices;
        /**
          * Stripe publishable key
         */
        "publishableKey": string;
        /**
          * Your stripe connected account id.
         */
        "stripeAccountId": string;
        /**
          * Payment request theme
         */
        "theme": string;
    }
    interface ScSubscription {
        "heading": string;
        "protocol": SubscriptionProtocol;
        "query": object;
        "showCancel": boolean;
        "subscription": Subscription;
        /**
          * Customer id to fetch subscriptions
         */
        "subscriptionId": string;
    }
    interface ScSubscriptionAdHocConfirm {
        "heading": string;
        "price": Price;
    }
    interface ScSubscriptionCancel {
        "backUrl": string;
        "comment": string;
        "heading": string;
        "protocol": SubscriptionProtocol;
        "reason": CancellationReason;
        "subscription": Subscription;
        "successUrl": string;
    }
    interface ScSubscriptionDetails {
        "hideRenewalText": boolean;
        "pendingPrice": Price;
        "subscription": Subscription;
    }
    interface ScSubscriptionNextPayment {
        "subscription": Subscription;
    }
    interface ScSubscriptionPayment {
        "backUrl": string;
        "customerIds": Array<string>;
        "paymentMethods": Array<PaymentMethod>;
        "subscription": Subscription;
        "subscriptionId": string;
        "successUrl": string;
    }
    interface ScSubscriptionPaymentMethod {
        /**
          * The heading
         */
        "heading": string;
        /**
          * The subscription
         */
        "subscription": Subscription;
    }
    interface ScSubscriptionStatusBadge {
        /**
          * Makes the tag clearable.
         */
        "clearable": boolean;
        /**
          * Draws a pill-style tag with rounded edges.
         */
        "pill": boolean;
        /**
          * The tag's size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * Subscription status
         */
        "status": SubscriptionStatus;
        /**
          * The tag's status type.
         */
        "subscription": Subscription;
    }
    interface ScSubscriptionSwitch {
        "filterAbove": number;
        "heading": string;
        "productGroupId": ProductGroup;
        "productId": string;
        /**
          * Customer id to fetch subscriptions
         */
        "query": object;
        "subscription": Subscription;
    }
    interface ScSubscriptionsList {
        "allLink": string;
        "cancelBehavior": 'period_end' | 'immediate';
        "heading": string;
        "isCustomer": boolean;
        /**
          * Customer id to fetch subscriptions
         */
        "query": {
    page: number;
    per_page: number;
  };
    }
    interface ScSwitch {
        /**
          * Draws the switch in a checked state.
         */
        "checked": boolean;
        /**
          * Disables the switch.
         */
        "disabled": boolean;
        /**
          * This will be true as a workaround in the block editor to focus on the content.
         */
        "edit": boolean;
        /**
          * This will be true when the control is in an invalid state. Validity is determined by the `required` prop.
         */
        "invalid": boolean;
        /**
          * The switch's name attribute.
         */
        "name": string;
        /**
          * Checks for validity and shows the browser's validation message if the control is invalid.
         */
        "reportValidity": () => Promise<boolean>;
        /**
          * Makes the switch a required field.
         */
        "required": boolean;
        "reversed": boolean;
        /**
          * The switch's value attribute.
         */
        "value": string;
    }
    interface ScTab {
        /**
          * Draws the tab in an active state.
         */
        "active": boolean;
        "count": string;
        /**
          * Draws the tab in a disabled state.
         */
        "disabled": boolean;
        "href": string;
        /**
          * The name of the tab panel the tab will control. The panel must be located in the same tab group.
         */
        "panel": string;
        /**
          * Removes focus from the tab.
         */
        "triggerBlur": () => Promise<void>;
        /**
          * Sets focus to the tab.
         */
        "triggerFocus": (options?: FocusOptions) => Promise<void>;
    }
    interface ScTabGroup {
    }
    interface ScTabPanel {
        /**
          * When true, the tab panel will be shown.
         */
        "active": boolean;
        /**
          * The tab panel's name.
         */
        "name": string;
    }
    interface ScTable {
    }
    interface ScTableCell {
    }
    interface ScTableHead {
    }
    interface ScTableRow {
        "href": string;
    }
    interface ScTag {
        /**
          * Makes the tag clearable.
         */
        "clearable": boolean;
        /**
          * Draws a pill-style tag with rounded edges.
         */
        "pill": boolean;
        /**
          * The tag's size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * The tag's type.
         */
        "type": 'primary' | 'success' | 'info' | 'warning' | 'danger' | 'default';
    }
    interface ScTaxIdInput {
        /**
          * AU zone label
         */
        "auAbnLabel": string;
        /**
          * GST zone label
         */
        "caGstLabel": string;
        /**
          * The country code.
         */
        "country": string;
        /**
          * EU zone label
         */
        "euVatLabel": string;
        /**
          * UK zone label
         */
        "gbVatLabel": string;
        /**
          * Help text.
         */
        "help": string;
        /**
          * Is this loading?
         */
        "loading": boolean;
        /**
          * Tax ID Number
         */
        "number": string;
        /**
          * Other zones label
         */
        "otherLabel": string;
        /**
          * Force show the field.
         */
        "show": boolean;
        /**
          * The status
         */
        "status": 'valid' | 'invalid' | 'unknown';
        /**
          * Type of tax id
         */
        "type": string;
    }
    interface ScText {
        "tag": 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'p';
        "truncate": boolean;
    }
    interface ScTextarea {
        /**
          * The textarea's autocapitalize attribute.
         */
        "autocapitalize": 'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters';
        /**
          * The textarea's autocomplete attribute.
         */
        "autocomplete": string;
        /**
          * The textarea's autocorrect attribute.
         */
        "autocorrect": string;
        /**
          * The textarea's autofocus attribute.
         */
        "autofocus": boolean;
        /**
          * Disables the textarea.
         */
        "disabled": boolean;
        /**
          * The input's enterkeyhint attribute. This can be used to customize the label or icon of the Enter key on virtual keyboards.
         */
        "enterkeyhint": 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';
        /**
          * Draws a filled textarea.
         */
        "filled": boolean;
        /**
          * The textarea's help text. Alternatively, you can use the help-text slot.
         */
        "help": string;
        /**
          * The textarea's inputmode attribute.
         */
        "inputmode": 'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url';
        /**
          * This will be true when the control is in an invalid state. Validity is determined by props such as `type`, `required`, `minlength`, and `maxlength` using the browser's constraint validation API.
         */
        "invalid": boolean;
        /**
          * The textarea's label. Alternatively, you can use the label slot.
         */
        "label": string;
        /**
          * The maximum length of input that will be considered valid.
         */
        "maxlength": number;
        /**
          * The minimum length of input that will be considered valid.
         */
        "minlength": number;
        /**
          * The textarea's name attribute.
         */
        "name": string;
        /**
          * The textarea's placeholder text.
         */
        "placeholder": string;
        /**
          * Makes the textarea readonly.
         */
        "readonly": boolean;
        /**
          * Checks for validity and shows the browser's validation message if the control is invalid.
         */
        "reportValidity": () => Promise<boolean>;
        /**
          * Makes the textarea a required field.
         */
        "required": boolean;
        /**
          * Controls how the textarea can be resized.
         */
        "resize": 'none' | 'vertical' | 'auto';
        /**
          * The number of rows to display by default.
         */
        "rows": number;
        /**
          * Should we show the label
         */
        "showLabel": boolean;
        /**
          * The textarea's size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * Enables spell checking on the textarea.
         */
        "spellcheck": boolean;
        /**
          * Sets focus on the input.
         */
        "triggerFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * The textarea's value attribute.
         */
        "value": string;
    }
    interface ScToggle {
        /**
          * Is this a borderless toggle?
         */
        "borderless": boolean;
        /**
          * Are these collapsible?
         */
        "collapsible": boolean;
        /**
          * Disables the details so it can't be toggled.
         */
        "disabled": boolean;
        /**
          * Indicates whether or not the details is open. You can use this in lieu of the show/hide methods.
         */
        "open": boolean;
        /**
          * Is this a shady
         */
        "shady": boolean;
        /**
          * Should we show a radio control?
         */
        "showControl": boolean;
        /**
          * Should we show the arrow icon?
         */
        "showIcon": boolean;
        /**
          * The summary to show in the details header. If you need to display HTML, use the `summary` slot instead.
         */
        "summary": string;
    }
    interface ScToggles {
        /**
          * Should this function as an accordion?
         */
        "accordion": boolean;
        /**
          * Are these collapsible?
         */
        "collapsible": boolean;
        /**
          * Theme for the toggles
         */
        "theme": 'default' | 'container';
    }
    interface ScTooltip {
        /**
          * Freeze open or closed.
         */
        "freeze": boolean;
        /**
          * Open or not
         */
        "open": boolean;
        /**
          * The tooltip's padding.
         */
        "padding": number;
        /**
          * Tooltip text
         */
        "text": string;
        /**
          * The tooltip's type.
         */
        "type": 'primary' | 'success' | 'info' | 'warning' | 'danger' | 'text';
        /**
          * Tooltip fixed width
         */
        "width": string;
    }
    interface ScTotal {
        "order": Checkout;
        "total": 'total' | 'subtotal' | 'amount_due';
    }
    interface ScUpcomingInvoice {
        "adHocAmount": number;
        "discount": {
    promotion_code?: string;
    coupon?: string;
  };
        "heading": string;
        "payment_method": PaymentMethod;
        "priceId": string;
        "quantity": number;
        "quantityUpdatesEnabled": boolean;
        "subscriptionId": string;
        "successUrl": string;
    }
    interface ScUpgradeRequired {
        "required": boolean;
        /**
          * The tag's size.
         */
        "size": 'small' | 'medium' | 'large';
    }
    interface ScWordpressPasswordEdit {
        "heading": string;
        "successUrl": string;
        "user": WordPressUser;
    }
    interface ScWordpressUser {
        "heading": string;
        "user": WordPressUser;
    }
    interface ScWordpressUserEdit {
        "heading": string;
        "successUrl": string;
        "user": WordPressUser;
    }
}
export interface ScAddressCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScAddressElement;
}
export interface ScAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScAlertElement;
}
export interface ScButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScButtonElement;
}
export interface ScCancelDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScCancelDialogElement;
}
export interface ScCancelDiscountCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScCancelDiscountElement;
}
export interface ScCancelSurveyCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScCancelSurveyElement;
}
export interface ScCartHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScCartHeaderElement;
}
export interface ScCartSessionProviderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScCartSessionProviderElement;
}
export interface ScCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScCheckboxElement;
}
export interface ScCheckoutCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScCheckoutElement;
}
export interface ScCheckoutMolliePaymentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScCheckoutMolliePaymentElement;
}
export interface ScChoiceCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScChoiceElement;
}
export interface ScChoiceContainerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScChoiceContainerElement;
}
export interface ScCompactAddressCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScCompactAddressElement;
}
export interface ScConsumerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScConsumerElement;
}
export interface ScCouponFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScCouponFormElement;
}
export interface ScCustomOrderPriceInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScCustomOrderPriceInputElement;
}
export interface ScCustomerEmailCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScCustomerEmailElement;
}
export interface ScCustomerFirstnameCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScCustomerFirstnameElement;
}
export interface ScCustomerLastnameCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScCustomerLastnameElement;
}
export interface ScCustomerNameCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScCustomerNameElement;
}
export interface ScDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScDialogElement;
}
export interface ScDonationChoicesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScDonationChoicesElement;
}
export interface ScDrawerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScDrawerElement;
}
export interface ScDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScDropdownElement;
}
export interface ScErrorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScErrorElement;
}
export interface ScFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScFormElement;
}
export interface ScFormErrorProviderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScFormErrorProviderElement;
}
export interface ScFormStateProviderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScFormStateProviderElement;
}
export interface ScIconCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScIconElement;
}
export interface ScInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScInputElement;
}
export interface ScLineItemsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScLineItemsElement;
}
export interface ScLineItemsProviderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScLineItemsProviderElement;
}
export interface ScLoginProviderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScLoginProviderElement;
}
export interface ScMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScMenuElement;
}
export interface ScOrderBumpCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScOrderBumpElement;
}
export interface ScOrderConfirmProviderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScOrderConfirmProviderElement;
}
export interface ScOrderCouponFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScOrderCouponFormElement;
}
export interface ScOrderShippingAddressCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScOrderShippingAddressElement;
}
export interface ScOrderSummaryCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScOrderSummaryElement;
}
export interface ScOrderTaxIdInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScOrderTaxIdInputElement;
}
export interface ScPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScPaginationElement;
}
export interface ScPaypalButtonsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScPaypalButtonsElement;
}
export interface ScPriceChoiceCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScPriceChoiceElement;
}
export interface ScPriceChoicesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScPriceChoicesElement;
}
export interface ScPriceInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScPriceInputElement;
}
export interface ScProductLineItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScProductLineItemElement;
}
export interface ScProductSelectedPriceCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScProductSelectedPriceElement;
}
export interface ScProviderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScProviderElement;
}
export interface ScQuantitySelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScQuantitySelectElement;
}
export interface ScRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScRadioElement;
}
export interface ScRichTextCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScRichTextElement;
}
export interface ScSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScSelectElement;
}
export interface ScSessionProviderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScSessionProviderElement;
}
export interface ScStripeElementCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScStripeElementElement;
}
export interface ScStripePaymentElementCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScStripePaymentElementElement;
}
export interface ScStripePaymentRequestCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScStripePaymentRequestElement;
}
export interface ScSubscriptionCancelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScSubscriptionCancelElement;
}
export interface ScSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScSwitchElement;
}
export interface ScTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScTabElement;
}
export interface ScTabGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScTabGroupElement;
}
export interface ScTagCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScTagElement;
}
export interface ScTaxIdInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScTaxIdInputElement;
}
export interface ScTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScTextareaElement;
}
export interface ScToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScToggleElement;
}
declare global {
    interface HTMLScAddressElement extends Components.ScAddress, HTMLStencilElement {
    }
    var HTMLScAddressElement: {
        prototype: HTMLScAddressElement;
        new (): HTMLScAddressElement;
    };
    interface HTMLScAlertElement extends Components.ScAlert, HTMLStencilElement {
    }
    var HTMLScAlertElement: {
        prototype: HTMLScAlertElement;
        new (): HTMLScAlertElement;
    };
    interface HTMLScAvatarElement extends Components.ScAvatar, HTMLStencilElement {
    }
    var HTMLScAvatarElement: {
        prototype: HTMLScAvatarElement;
        new (): HTMLScAvatarElement;
    };
    interface HTMLScBadgeNoticeElement extends Components.ScBadgeNotice, HTMLStencilElement {
    }
    var HTMLScBadgeNoticeElement: {
        prototype: HTMLScBadgeNoticeElement;
        new (): HTMLScBadgeNoticeElement;
    };
    interface HTMLScBlockUiElement extends Components.ScBlockUi, HTMLStencilElement {
    }
    var HTMLScBlockUiElement: {
        prototype: HTMLScBlockUiElement;
        new (): HTMLScBlockUiElement;
    };
    interface HTMLScBreadcrumbElement extends Components.ScBreadcrumb, HTMLStencilElement {
    }
    var HTMLScBreadcrumbElement: {
        prototype: HTMLScBreadcrumbElement;
        new (): HTMLScBreadcrumbElement;
    };
    interface HTMLScBreadcrumbsElement extends Components.ScBreadcrumbs, HTMLStencilElement {
    }
    var HTMLScBreadcrumbsElement: {
        prototype: HTMLScBreadcrumbsElement;
        new (): HTMLScBreadcrumbsElement;
    };
    interface HTMLScButtonElement extends Components.ScButton, HTMLStencilElement {
    }
    var HTMLScButtonElement: {
        prototype: HTMLScButtonElement;
        new (): HTMLScButtonElement;
    };
    interface HTMLScButtonGroupElement extends Components.ScButtonGroup, HTMLStencilElement {
    }
    var HTMLScButtonGroupElement: {
        prototype: HTMLScButtonGroupElement;
        new (): HTMLScButtonGroupElement;
    };
    interface HTMLScCancelDialogElement extends Components.ScCancelDialog, HTMLStencilElement {
    }
    var HTMLScCancelDialogElement: {
        prototype: HTMLScCancelDialogElement;
        new (): HTMLScCancelDialogElement;
    };
    interface HTMLScCancelDiscountElement extends Components.ScCancelDiscount, HTMLStencilElement {
    }
    var HTMLScCancelDiscountElement: {
        prototype: HTMLScCancelDiscountElement;
        new (): HTMLScCancelDiscountElement;
    };
    interface HTMLScCancelSurveyElement extends Components.ScCancelSurvey, HTMLStencilElement {
    }
    var HTMLScCancelSurveyElement: {
        prototype: HTMLScCancelSurveyElement;
        new (): HTMLScCancelSurveyElement;
    };
    interface HTMLScCardElement extends Components.ScCard, HTMLStencilElement {
    }
    var HTMLScCardElement: {
        prototype: HTMLScCardElement;
        new (): HTMLScCardElement;
    };
    interface HTMLScCartElement extends Components.ScCart, HTMLStencilElement {
    }
    var HTMLScCartElement: {
        prototype: HTMLScCartElement;
        new (): HTMLScCartElement;
    };
    interface HTMLScCartFormElement extends Components.ScCartForm, HTMLStencilElement {
    }
    var HTMLScCartFormElement: {
        prototype: HTMLScCartFormElement;
        new (): HTMLScCartFormElement;
    };
    interface HTMLScCartFormSubmitElement extends Components.ScCartFormSubmit, HTMLStencilElement {
    }
    var HTMLScCartFormSubmitElement: {
        prototype: HTMLScCartFormSubmitElement;
        new (): HTMLScCartFormSubmitElement;
    };
    interface HTMLScCartHeaderElement extends Components.ScCartHeader, HTMLStencilElement {
    }
    var HTMLScCartHeaderElement: {
        prototype: HTMLScCartHeaderElement;
        new (): HTMLScCartHeaderElement;
    };
    interface HTMLScCartIconElement extends Components.ScCartIcon, HTMLStencilElement {
    }
    var HTMLScCartIconElement: {
        prototype: HTMLScCartIconElement;
        new (): HTMLScCartIconElement;
    };
    interface HTMLScCartLoaderElement extends Components.ScCartLoader, HTMLStencilElement {
    }
    var HTMLScCartLoaderElement: {
        prototype: HTMLScCartLoaderElement;
        new (): HTMLScCartLoaderElement;
    };
    interface HTMLScCartSessionProviderElement extends Components.ScCartSessionProvider, HTMLStencilElement {
    }
    var HTMLScCartSessionProviderElement: {
        prototype: HTMLScCartSessionProviderElement;
        new (): HTMLScCartSessionProviderElement;
    };
    interface HTMLScCartSubmitElement extends Components.ScCartSubmit, HTMLStencilElement {
    }
    var HTMLScCartSubmitElement: {
        prototype: HTMLScCartSubmitElement;
        new (): HTMLScCartSubmitElement;
    };
    interface HTMLScCcLogoElement extends Components.ScCcLogo, HTMLStencilElement {
    }
    var HTMLScCcLogoElement: {
        prototype: HTMLScCcLogoElement;
        new (): HTMLScCcLogoElement;
    };
    interface HTMLScChargesListElement extends Components.ScChargesList, HTMLStencilElement {
    }
    var HTMLScChargesListElement: {
        prototype: HTMLScChargesListElement;
        new (): HTMLScChargesListElement;
    };
    interface HTMLScCheckboxElement extends Components.ScCheckbox, HTMLStencilElement {
    }
    var HTMLScCheckboxElement: {
        prototype: HTMLScCheckboxElement;
        new (): HTMLScCheckboxElement;
    };
    interface HTMLScCheckoutElement extends Components.ScCheckout, HTMLStencilElement {
    }
    var HTMLScCheckoutElement: {
        prototype: HTMLScCheckoutElement;
        new (): HTMLScCheckoutElement;
    };
    interface HTMLScCheckoutFormErrorsElement extends Components.ScCheckoutFormErrors, HTMLStencilElement {
    }
    var HTMLScCheckoutFormErrorsElement: {
        prototype: HTMLScCheckoutFormErrorsElement;
        new (): HTMLScCheckoutFormErrorsElement;
    };
    interface HTMLScCheckoutMolliePaymentElement extends Components.ScCheckoutMolliePayment, HTMLStencilElement {
    }
    var HTMLScCheckoutMolliePaymentElement: {
        prototype: HTMLScCheckoutMolliePaymentElement;
        new (): HTMLScCheckoutMolliePaymentElement;
    };
    interface HTMLScCheckoutUnsavedChangesWarningElement extends Components.ScCheckoutUnsavedChangesWarning, HTMLStencilElement {
    }
    var HTMLScCheckoutUnsavedChangesWarningElement: {
        prototype: HTMLScCheckoutUnsavedChangesWarningElement;
        new (): HTMLScCheckoutUnsavedChangesWarningElement;
    };
    interface HTMLScChoiceElement extends Components.ScChoice, HTMLStencilElement {
    }
    var HTMLScChoiceElement: {
        prototype: HTMLScChoiceElement;
        new (): HTMLScChoiceElement;
    };
    interface HTMLScChoiceContainerElement extends Components.ScChoiceContainer, HTMLStencilElement {
    }
    var HTMLScChoiceContainerElement: {
        prototype: HTMLScChoiceContainerElement;
        new (): HTMLScChoiceContainerElement;
    };
    interface HTMLScChoicesElement extends Components.ScChoices, HTMLStencilElement {
    }
    var HTMLScChoicesElement: {
        prototype: HTMLScChoicesElement;
        new (): HTMLScChoicesElement;
    };
    interface HTMLScColumnElement extends Components.ScColumn, HTMLStencilElement {
    }
    var HTMLScColumnElement: {
        prototype: HTMLScColumnElement;
        new (): HTMLScColumnElement;
    };
    interface HTMLScColumnsElement extends Components.ScColumns, HTMLStencilElement {
    }
    var HTMLScColumnsElement: {
        prototype: HTMLScColumnsElement;
        new (): HTMLScColumnsElement;
    };
    interface HTMLScCompactAddressElement extends Components.ScCompactAddress, HTMLStencilElement {
    }
    var HTMLScCompactAddressElement: {
        prototype: HTMLScCompactAddressElement;
        new (): HTMLScCompactAddressElement;
    };
    interface HTMLScConditionalFormElement extends Components.ScConditionalForm, HTMLStencilElement {
    }
    var HTMLScConditionalFormElement: {
        prototype: HTMLScConditionalFormElement;
        new (): HTMLScConditionalFormElement;
    };
    interface HTMLScConsumerElement extends Components.ScConsumer, HTMLStencilElement {
    }
    var HTMLScConsumerElement: {
        prototype: HTMLScConsumerElement;
        new (): HTMLScConsumerElement;
    };
    interface HTMLScCouponFormElement extends Components.ScCouponForm, HTMLStencilElement {
    }
    var HTMLScCouponFormElement: {
        prototype: HTMLScCouponFormElement;
        new (): HTMLScCouponFormElement;
    };
    interface HTMLScCustomOrderPriceInputElement extends Components.ScCustomOrderPriceInput, HTMLStencilElement {
    }
    var HTMLScCustomOrderPriceInputElement: {
        prototype: HTMLScCustomOrderPriceInputElement;
        new (): HTMLScCustomOrderPriceInputElement;
    };
    interface HTMLScCustomerDetailsElement extends Components.ScCustomerDetails, HTMLStencilElement {
    }
    var HTMLScCustomerDetailsElement: {
        prototype: HTMLScCustomerDetailsElement;
        new (): HTMLScCustomerDetailsElement;
    };
    interface HTMLScCustomerEditElement extends Components.ScCustomerEdit, HTMLStencilElement {
    }
    var HTMLScCustomerEditElement: {
        prototype: HTMLScCustomerEditElement;
        new (): HTMLScCustomerEditElement;
    };
    interface HTMLScCustomerEmailElement extends Components.ScCustomerEmail, HTMLStencilElement {
    }
    var HTMLScCustomerEmailElement: {
        prototype: HTMLScCustomerEmailElement;
        new (): HTMLScCustomerEmailElement;
    };
    interface HTMLScCustomerFirstnameElement extends Components.ScCustomerFirstname, HTMLStencilElement {
    }
    var HTMLScCustomerFirstnameElement: {
        prototype: HTMLScCustomerFirstnameElement;
        new (): HTMLScCustomerFirstnameElement;
    };
    interface HTMLScCustomerLastnameElement extends Components.ScCustomerLastname, HTMLStencilElement {
    }
    var HTMLScCustomerLastnameElement: {
        prototype: HTMLScCustomerLastnameElement;
        new (): HTMLScCustomerLastnameElement;
    };
    interface HTMLScCustomerNameElement extends Components.ScCustomerName, HTMLStencilElement {
    }
    var HTMLScCustomerNameElement: {
        prototype: HTMLScCustomerNameElement;
        new (): HTMLScCustomerNameElement;
    };
    interface HTMLScDashboardCustomerDetailsElement extends Components.ScDashboardCustomerDetails, HTMLStencilElement {
    }
    var HTMLScDashboardCustomerDetailsElement: {
        prototype: HTMLScDashboardCustomerDetailsElement;
        new (): HTMLScDashboardCustomerDetailsElement;
    };
    interface HTMLScDashboardDownloadsListElement extends Components.ScDashboardDownloadsList, HTMLStencilElement {
    }
    var HTMLScDashboardDownloadsListElement: {
        prototype: HTMLScDashboardDownloadsListElement;
        new (): HTMLScDashboardDownloadsListElement;
    };
    interface HTMLScDashboardModuleElement extends Components.ScDashboardModule, HTMLStencilElement {
    }
    var HTMLScDashboardModuleElement: {
        prototype: HTMLScDashboardModuleElement;
        new (): HTMLScDashboardModuleElement;
    };
    interface HTMLScDialogElement extends Components.ScDialog, HTMLStencilElement {
    }
    var HTMLScDialogElement: {
        prototype: HTMLScDialogElement;
        new (): HTMLScDialogElement;
    };
    interface HTMLScDividerElement extends Components.ScDivider, HTMLStencilElement {
    }
    var HTMLScDividerElement: {
        prototype: HTMLScDividerElement;
        new (): HTMLScDividerElement;
    };
    interface HTMLScDonationChoicesElement extends Components.ScDonationChoices, HTMLStencilElement {
    }
    var HTMLScDonationChoicesElement: {
        prototype: HTMLScDonationChoicesElement;
        new (): HTMLScDonationChoicesElement;
    };
    interface HTMLScDownloadsListElement extends Components.ScDownloadsList, HTMLStencilElement {
    }
    var HTMLScDownloadsListElement: {
        prototype: HTMLScDownloadsListElement;
        new (): HTMLScDownloadsListElement;
    };
    interface HTMLScDrawerElement extends Components.ScDrawer, HTMLStencilElement {
    }
    var HTMLScDrawerElement: {
        prototype: HTMLScDrawerElement;
        new (): HTMLScDrawerElement;
    };
    interface HTMLScDropdownElement extends Components.ScDropdown, HTMLStencilElement {
    }
    var HTMLScDropdownElement: {
        prototype: HTMLScDropdownElement;
        new (): HTMLScDropdownElement;
    };
    interface HTMLScEmptyElement extends Components.ScEmpty, HTMLStencilElement {
    }
    var HTMLScEmptyElement: {
        prototype: HTMLScEmptyElement;
        new (): HTMLScEmptyElement;
    };
    interface HTMLScErrorElement extends Components.ScError, HTMLStencilElement {
    }
    var HTMLScErrorElement: {
        prototype: HTMLScErrorElement;
        new (): HTMLScErrorElement;
    };
    interface HTMLScExpressPaymentElement extends Components.ScExpressPayment, HTMLStencilElement {
    }
    var HTMLScExpressPaymentElement: {
        prototype: HTMLScExpressPaymentElement;
        new (): HTMLScExpressPaymentElement;
    };
    interface HTMLScFlexElement extends Components.ScFlex, HTMLStencilElement {
    }
    var HTMLScFlexElement: {
        prototype: HTMLScFlexElement;
        new (): HTMLScFlexElement;
    };
    interface HTMLScFormElement extends Components.ScForm, HTMLStencilElement {
    }
    var HTMLScFormElement: {
        prototype: HTMLScFormElement;
        new (): HTMLScFormElement;
    };
    interface HTMLScFormComponentsValidatorElement extends Components.ScFormComponentsValidator, HTMLStencilElement {
    }
    var HTMLScFormComponentsValidatorElement: {
        prototype: HTMLScFormComponentsValidatorElement;
        new (): HTMLScFormComponentsValidatorElement;
    };
    interface HTMLScFormControlElement extends Components.ScFormControl, HTMLStencilElement {
    }
    var HTMLScFormControlElement: {
        prototype: HTMLScFormControlElement;
        new (): HTMLScFormControlElement;
    };
    interface HTMLScFormErrorProviderElement extends Components.ScFormErrorProvider, HTMLStencilElement {
    }
    var HTMLScFormErrorProviderElement: {
        prototype: HTMLScFormErrorProviderElement;
        new (): HTMLScFormErrorProviderElement;
    };
    interface HTMLScFormRowElement extends Components.ScFormRow, HTMLStencilElement {
    }
    var HTMLScFormRowElement: {
        prototype: HTMLScFormRowElement;
        new (): HTMLScFormRowElement;
    };
    interface HTMLScFormStateProviderElement extends Components.ScFormStateProvider, HTMLStencilElement {
    }
    var HTMLScFormStateProviderElement: {
        prototype: HTMLScFormStateProviderElement;
        new (): HTMLScFormStateProviderElement;
    };
    interface HTMLScFormatBytesElement extends Components.ScFormatBytes, HTMLStencilElement {
    }
    var HTMLScFormatBytesElement: {
        prototype: HTMLScFormatBytesElement;
        new (): HTMLScFormatBytesElement;
    };
    interface HTMLScFormatDateElement extends Components.ScFormatDate, HTMLStencilElement {
    }
    var HTMLScFormatDateElement: {
        prototype: HTMLScFormatDateElement;
        new (): HTMLScFormatDateElement;
    };
    interface HTMLScFormatIntervalElement extends Components.ScFormatInterval, HTMLStencilElement {
    }
    var HTMLScFormatIntervalElement: {
        prototype: HTMLScFormatIntervalElement;
        new (): HTMLScFormatIntervalElement;
    };
    interface HTMLScFormatNumberElement extends Components.ScFormatNumber, HTMLStencilElement {
    }
    var HTMLScFormatNumberElement: {
        prototype: HTMLScFormatNumberElement;
        new (): HTMLScFormatNumberElement;
    };
    interface HTMLScHeadingElement extends Components.ScHeading, HTMLStencilElement {
    }
    var HTMLScHeadingElement: {
        prototype: HTMLScHeadingElement;
        new (): HTMLScHeadingElement;
    };
    interface HTMLScIconElement extends Components.ScIcon, HTMLStencilElement {
    }
    var HTMLScIconElement: {
        prototype: HTMLScIconElement;
        new (): HTMLScIconElement;
    };
    interface HTMLScInputElement extends Components.ScInput, HTMLStencilElement {
    }
    var HTMLScInputElement: {
        prototype: HTMLScInputElement;
        new (): HTMLScInputElement;
    };
    interface HTMLScInvoicesListElement extends Components.ScInvoicesList, HTMLStencilElement {
    }
    var HTMLScInvoicesListElement: {
        prototype: HTMLScInvoicesListElement;
        new (): HTMLScInvoicesListElement;
    };
    interface HTMLScLicensesListElement extends Components.ScLicensesList, HTMLStencilElement {
    }
    var HTMLScLicensesListElement: {
        prototype: HTMLScLicensesListElement;
        new (): HTMLScLicensesListElement;
    };
    interface HTMLScLineItemElement extends Components.ScLineItem, HTMLStencilElement {
    }
    var HTMLScLineItemElement: {
        prototype: HTMLScLineItemElement;
        new (): HTMLScLineItemElement;
    };
    interface HTMLScLineItemBumpElement extends Components.ScLineItemBump, HTMLStencilElement {
    }
    var HTMLScLineItemBumpElement: {
        prototype: HTMLScLineItemBumpElement;
        new (): HTMLScLineItemBumpElement;
    };
    interface HTMLScLineItemTaxElement extends Components.ScLineItemTax, HTMLStencilElement {
    }
    var HTMLScLineItemTaxElement: {
        prototype: HTMLScLineItemTaxElement;
        new (): HTMLScLineItemTaxElement;
    };
    interface HTMLScLineItemTotalElement extends Components.ScLineItemTotal, HTMLStencilElement {
    }
    var HTMLScLineItemTotalElement: {
        prototype: HTMLScLineItemTotalElement;
        new (): HTMLScLineItemTotalElement;
    };
    interface HTMLScLineItemsElement extends Components.ScLineItems, HTMLStencilElement {
    }
    var HTMLScLineItemsElement: {
        prototype: HTMLScLineItemsElement;
        new (): HTMLScLineItemsElement;
    };
    interface HTMLScLineItemsProviderElement extends Components.ScLineItemsProvider, HTMLStencilElement {
    }
    var HTMLScLineItemsProviderElement: {
        prototype: HTMLScLineItemsProviderElement;
        new (): HTMLScLineItemsProviderElement;
    };
    interface HTMLScLoginFormElement extends Components.ScLoginForm, HTMLStencilElement {
    }
    var HTMLScLoginFormElement: {
        prototype: HTMLScLoginFormElement;
        new (): HTMLScLoginFormElement;
    };
    interface HTMLScLoginProviderElement extends Components.ScLoginProvider, HTMLStencilElement {
    }
    var HTMLScLoginProviderElement: {
        prototype: HTMLScLoginProviderElement;
        new (): HTMLScLoginProviderElement;
    };
    interface HTMLScMenuElement extends Components.ScMenu, HTMLStencilElement {
    }
    var HTMLScMenuElement: {
        prototype: HTMLScMenuElement;
        new (): HTMLScMenuElement;
    };
    interface HTMLScMenuDividerElement extends Components.ScMenuDivider, HTMLStencilElement {
    }
    var HTMLScMenuDividerElement: {
        prototype: HTMLScMenuDividerElement;
        new (): HTMLScMenuDividerElement;
    };
    interface HTMLScMenuItemElement extends Components.ScMenuItem, HTMLStencilElement {
    }
    var HTMLScMenuItemElement: {
        prototype: HTMLScMenuItemElement;
        new (): HTMLScMenuItemElement;
    };
    interface HTMLScMenuLabelElement extends Components.ScMenuLabel, HTMLStencilElement {
    }
    var HTMLScMenuLabelElement: {
        prototype: HTMLScMenuLabelElement;
        new (): HTMLScMenuLabelElement;
    };
    interface HTMLScMollieAddMethodElement extends Components.ScMollieAddMethod, HTMLStencilElement {
    }
    var HTMLScMollieAddMethodElement: {
        prototype: HTMLScMollieAddMethodElement;
        new (): HTMLScMollieAddMethodElement;
    };
    interface HTMLScOrderElement extends Components.ScOrder, HTMLStencilElement {
    }
    var HTMLScOrderElement: {
        prototype: HTMLScOrderElement;
        new (): HTMLScOrderElement;
    };
    interface HTMLScOrderBumpElement extends Components.ScOrderBump, HTMLStencilElement {
    }
    var HTMLScOrderBumpElement: {
        prototype: HTMLScOrderBumpElement;
        new (): HTMLScOrderBumpElement;
    };
    interface HTMLScOrderBumpsElement extends Components.ScOrderBumps, HTMLStencilElement {
    }
    var HTMLScOrderBumpsElement: {
        prototype: HTMLScOrderBumpsElement;
        new (): HTMLScOrderBumpsElement;
    };
    interface HTMLScOrderConfirmComponentsValidatorElement extends Components.ScOrderConfirmComponentsValidator, HTMLStencilElement {
    }
    var HTMLScOrderConfirmComponentsValidatorElement: {
        prototype: HTMLScOrderConfirmComponentsValidatorElement;
        new (): HTMLScOrderConfirmComponentsValidatorElement;
    };
    interface HTMLScOrderConfirmProviderElement extends Components.ScOrderConfirmProvider, HTMLStencilElement {
    }
    var HTMLScOrderConfirmProviderElement: {
        prototype: HTMLScOrderConfirmProviderElement;
        new (): HTMLScOrderConfirmProviderElement;
    };
    interface HTMLScOrderConfirmationElement extends Components.ScOrderConfirmation, HTMLStencilElement {
    }
    var HTMLScOrderConfirmationElement: {
        prototype: HTMLScOrderConfirmationElement;
        new (): HTMLScOrderConfirmationElement;
    };
    interface HTMLScOrderConfirmationCustomerElement extends Components.ScOrderConfirmationCustomer, HTMLStencilElement {
    }
    var HTMLScOrderConfirmationCustomerElement: {
        prototype: HTMLScOrderConfirmationCustomerElement;
        new (): HTMLScOrderConfirmationCustomerElement;
    };
    interface HTMLScOrderConfirmationDetailsElement extends Components.ScOrderConfirmationDetails, HTMLStencilElement {
    }
    var HTMLScOrderConfirmationDetailsElement: {
        prototype: HTMLScOrderConfirmationDetailsElement;
        new (): HTMLScOrderConfirmationDetailsElement;
    };
    interface HTMLScOrderConfirmationLineItemsElement extends Components.ScOrderConfirmationLineItems, HTMLStencilElement {
    }
    var HTMLScOrderConfirmationLineItemsElement: {
        prototype: HTMLScOrderConfirmationLineItemsElement;
        new (): HTMLScOrderConfirmationLineItemsElement;
    };
    interface HTMLScOrderConfirmationTotalsElement extends Components.ScOrderConfirmationTotals, HTMLStencilElement {
    }
    var HTMLScOrderConfirmationTotalsElement: {
        prototype: HTMLScOrderConfirmationTotalsElement;
        new (): HTMLScOrderConfirmationTotalsElement;
    };
    interface HTMLScOrderCouponFormElement extends Components.ScOrderCouponForm, HTMLStencilElement {
    }
    var HTMLScOrderCouponFormElement: {
        prototype: HTMLScOrderCouponFormElement;
        new (): HTMLScOrderCouponFormElement;
    };
    interface HTMLScOrderDetailElement extends Components.ScOrderDetail, HTMLStencilElement {
    }
    var HTMLScOrderDetailElement: {
        prototype: HTMLScOrderDetailElement;
        new (): HTMLScOrderDetailElement;
    };
    interface HTMLScOrderManualInstructionsElement extends Components.ScOrderManualInstructions, HTMLStencilElement {
    }
    var HTMLScOrderManualInstructionsElement: {
        prototype: HTMLScOrderManualInstructionsElement;
        new (): HTMLScOrderManualInstructionsElement;
    };
    interface HTMLScOrderPasswordElement extends Components.ScOrderPassword, HTMLStencilElement {
    }
    var HTMLScOrderPasswordElement: {
        prototype: HTMLScOrderPasswordElement;
        new (): HTMLScOrderPasswordElement;
    };
    interface HTMLScOrderShippingAddressElement extends Components.ScOrderShippingAddress, HTMLStencilElement {
    }
    var HTMLScOrderShippingAddressElement: {
        prototype: HTMLScOrderShippingAddressElement;
        new (): HTMLScOrderShippingAddressElement;
    };
    interface HTMLScOrderStatusBadgeElement extends Components.ScOrderStatusBadge, HTMLStencilElement {
    }
    var HTMLScOrderStatusBadgeElement: {
        prototype: HTMLScOrderStatusBadgeElement;
        new (): HTMLScOrderStatusBadgeElement;
    };
    interface HTMLScOrderSubmitElement extends Components.ScOrderSubmit, HTMLStencilElement {
    }
    var HTMLScOrderSubmitElement: {
        prototype: HTMLScOrderSubmitElement;
        new (): HTMLScOrderSubmitElement;
    };
    interface HTMLScOrderSummaryElement extends Components.ScOrderSummary, HTMLStencilElement {
    }
    var HTMLScOrderSummaryElement: {
        prototype: HTMLScOrderSummaryElement;
        new (): HTMLScOrderSummaryElement;
    };
    interface HTMLScOrderTaxIdInputElement extends Components.ScOrderTaxIdInput, HTMLStencilElement {
    }
    var HTMLScOrderTaxIdInputElement: {
        prototype: HTMLScOrderTaxIdInputElement;
        new (): HTMLScOrderTaxIdInputElement;
    };
    interface HTMLScOrdersListElement extends Components.ScOrdersList, HTMLStencilElement {
    }
    var HTMLScOrdersListElement: {
        prototype: HTMLScOrdersListElement;
        new (): HTMLScOrdersListElement;
    };
    interface HTMLScPaginationElement extends Components.ScPagination, HTMLStencilElement {
    }
    var HTMLScPaginationElement: {
        prototype: HTMLScPaginationElement;
        new (): HTMLScPaginationElement;
    };
    interface HTMLScPasswordNagElement extends Components.ScPasswordNag, HTMLStencilElement {
    }
    var HTMLScPasswordNagElement: {
        prototype: HTMLScPasswordNagElement;
        new (): HTMLScPasswordNagElement;
    };
    interface HTMLScPaymentElement extends Components.ScPayment, HTMLStencilElement {
    }
    var HTMLScPaymentElement: {
        prototype: HTMLScPaymentElement;
        new (): HTMLScPaymentElement;
    };
    interface HTMLScPaymentMethodElement extends Components.ScPaymentMethod, HTMLStencilElement {
    }
    var HTMLScPaymentMethodElement: {
        prototype: HTMLScPaymentMethodElement;
        new (): HTMLScPaymentMethodElement;
    };
    interface HTMLScPaymentMethodChoiceElement extends Components.ScPaymentMethodChoice, HTMLStencilElement {
    }
    var HTMLScPaymentMethodChoiceElement: {
        prototype: HTMLScPaymentMethodChoiceElement;
        new (): HTMLScPaymentMethodChoiceElement;
    };
    interface HTMLScPaymentMethodsListElement extends Components.ScPaymentMethodsList, HTMLStencilElement {
    }
    var HTMLScPaymentMethodsListElement: {
        prototype: HTMLScPaymentMethodsListElement;
        new (): HTMLScPaymentMethodsListElement;
    };
    interface HTMLScPaymentSelectedElement extends Components.ScPaymentSelected, HTMLStencilElement {
    }
    var HTMLScPaymentSelectedElement: {
        prototype: HTMLScPaymentSelectedElement;
        new (): HTMLScPaymentSelectedElement;
    };
    interface HTMLScPaypalAddMethodElement extends Components.ScPaypalAddMethod, HTMLStencilElement {
    }
    var HTMLScPaypalAddMethodElement: {
        prototype: HTMLScPaypalAddMethodElement;
        new (): HTMLScPaypalAddMethodElement;
    };
    interface HTMLScPaypalButtonsElement extends Components.ScPaypalButtons, HTMLStencilElement {
    }
    var HTMLScPaypalButtonsElement: {
        prototype: HTMLScPaypalButtonsElement;
        new (): HTMLScPaypalButtonsElement;
    };
    interface HTMLScPremiumTagElement extends Components.ScPremiumTag, HTMLStencilElement {
    }
    var HTMLScPremiumTagElement: {
        prototype: HTMLScPremiumTagElement;
        new (): HTMLScPremiumTagElement;
    };
    interface HTMLScPriceChoiceElement extends Components.ScPriceChoice, HTMLStencilElement {
    }
    var HTMLScPriceChoiceElement: {
        prototype: HTMLScPriceChoiceElement;
        new (): HTMLScPriceChoiceElement;
    };
    interface HTMLScPriceChoicesElement extends Components.ScPriceChoices, HTMLStencilElement {
    }
    var HTMLScPriceChoicesElement: {
        prototype: HTMLScPriceChoicesElement;
        new (): HTMLScPriceChoicesElement;
    };
    interface HTMLScPriceInputElement extends Components.ScPriceInput, HTMLStencilElement {
    }
    var HTMLScPriceInputElement: {
        prototype: HTMLScPriceInputElement;
        new (): HTMLScPriceInputElement;
    };
    interface HTMLScPriceRangeElement extends Components.ScPriceRange, HTMLStencilElement {
    }
    var HTMLScPriceRangeElement: {
        prototype: HTMLScPriceRangeElement;
        new (): HTMLScPriceRangeElement;
    };
    interface HTMLScProductLineItemElement extends Components.ScProductLineItem, HTMLStencilElement {
    }
    var HTMLScProductLineItemElement: {
        prototype: HTMLScProductLineItemElement;
        new (): HTMLScProductLineItemElement;
    };
    interface HTMLScProductSelectedPriceElement extends Components.ScProductSelectedPrice, HTMLStencilElement {
    }
    var HTMLScProductSelectedPriceElement: {
        prototype: HTMLScProductSelectedPriceElement;
        new (): HTMLScProductSelectedPriceElement;
    };
    interface HTMLScProseElement extends Components.ScProse, HTMLStencilElement {
    }
    var HTMLScProseElement: {
        prototype: HTMLScProseElement;
        new (): HTMLScProseElement;
    };
    interface HTMLScProviderElement extends Components.ScProvider, HTMLStencilElement {
    }
    var HTMLScProviderElement: {
        prototype: HTMLScProviderElement;
        new (): HTMLScProviderElement;
    };
    interface HTMLScPurchaseDownloadsListElement extends Components.ScPurchaseDownloadsList, HTMLStencilElement {
    }
    var HTMLScPurchaseDownloadsListElement: {
        prototype: HTMLScPurchaseDownloadsListElement;
        new (): HTMLScPurchaseDownloadsListElement;
    };
    interface HTMLScQuantitySelectElement extends Components.ScQuantitySelect, HTMLStencilElement {
    }
    var HTMLScQuantitySelectElement: {
        prototype: HTMLScQuantitySelectElement;
        new (): HTMLScQuantitySelectElement;
    };
    interface HTMLScRadioElement extends Components.ScRadio, HTMLStencilElement {
    }
    var HTMLScRadioElement: {
        prototype: HTMLScRadioElement;
        new (): HTMLScRadioElement;
    };
    interface HTMLScRadioGroupElement extends Components.ScRadioGroup, HTMLStencilElement {
    }
    var HTMLScRadioGroupElement: {
        prototype: HTMLScRadioGroupElement;
        new (): HTMLScRadioGroupElement;
    };
    interface HTMLScRichTextElement extends Components.ScRichText, HTMLStencilElement {
    }
    var HTMLScRichTextElement: {
        prototype: HTMLScRichTextElement;
        new (): HTMLScRichTextElement;
    };
    interface HTMLScSecureNoticeElement extends Components.ScSecureNotice, HTMLStencilElement {
    }
    var HTMLScSecureNoticeElement: {
        prototype: HTMLScSecureNoticeElement;
        new (): HTMLScSecureNoticeElement;
    };
    interface HTMLScSelectElement extends Components.ScSelect, HTMLStencilElement {
    }
    var HTMLScSelectElement: {
        prototype: HTMLScSelectElement;
        new (): HTMLScSelectElement;
    };
    interface HTMLScSessionProviderElement extends Components.ScSessionProvider, HTMLStencilElement {
    }
    var HTMLScSessionProviderElement: {
        prototype: HTMLScSessionProviderElement;
        new (): HTMLScSessionProviderElement;
    };
    interface HTMLScSkeletonElement extends Components.ScSkeleton, HTMLStencilElement {
    }
    var HTMLScSkeletonElement: {
        prototype: HTMLScSkeletonElement;
        new (): HTMLScSkeletonElement;
    };
    interface HTMLScSpacingElement extends Components.ScSpacing, HTMLStencilElement {
    }
    var HTMLScSpacingElement: {
        prototype: HTMLScSpacingElement;
        new (): HTMLScSpacingElement;
    };
    interface HTMLScSpinnerElement extends Components.ScSpinner, HTMLStencilElement {
    }
    var HTMLScSpinnerElement: {
        prototype: HTMLScSpinnerElement;
        new (): HTMLScSpinnerElement;
    };
    interface HTMLScStackedListElement extends Components.ScStackedList, HTMLStencilElement {
    }
    var HTMLScStackedListElement: {
        prototype: HTMLScStackedListElement;
        new (): HTMLScStackedListElement;
    };
    interface HTMLScStackedListRowElement extends Components.ScStackedListRow, HTMLStencilElement {
    }
    var HTMLScStackedListRowElement: {
        prototype: HTMLScStackedListRowElement;
        new (): HTMLScStackedListRowElement;
    };
    interface HTMLScStripeAddMethodElement extends Components.ScStripeAddMethod, HTMLStencilElement {
    }
    var HTMLScStripeAddMethodElement: {
        prototype: HTMLScStripeAddMethodElement;
        new (): HTMLScStripeAddMethodElement;
    };
    interface HTMLScStripeElementElement extends Components.ScStripeElement, HTMLStencilElement {
    }
    var HTMLScStripeElementElement: {
        prototype: HTMLScStripeElementElement;
        new (): HTMLScStripeElementElement;
    };
    interface HTMLScStripePaymentElementElement extends Components.ScStripePaymentElement, HTMLStencilElement {
    }
    var HTMLScStripePaymentElementElement: {
        prototype: HTMLScStripePaymentElementElement;
        new (): HTMLScStripePaymentElementElement;
    };
    interface HTMLScStripePaymentRequestElement extends Components.ScStripePaymentRequest, HTMLStencilElement {
    }
    var HTMLScStripePaymentRequestElement: {
        prototype: HTMLScStripePaymentRequestElement;
        new (): HTMLScStripePaymentRequestElement;
    };
    interface HTMLScSubscriptionElement extends Components.ScSubscription, HTMLStencilElement {
    }
    var HTMLScSubscriptionElement: {
        prototype: HTMLScSubscriptionElement;
        new (): HTMLScSubscriptionElement;
    };
    interface HTMLScSubscriptionAdHocConfirmElement extends Components.ScSubscriptionAdHocConfirm, HTMLStencilElement {
    }
    var HTMLScSubscriptionAdHocConfirmElement: {
        prototype: HTMLScSubscriptionAdHocConfirmElement;
        new (): HTMLScSubscriptionAdHocConfirmElement;
    };
    interface HTMLScSubscriptionCancelElement extends Components.ScSubscriptionCancel, HTMLStencilElement {
    }
    var HTMLScSubscriptionCancelElement: {
        prototype: HTMLScSubscriptionCancelElement;
        new (): HTMLScSubscriptionCancelElement;
    };
    interface HTMLScSubscriptionDetailsElement extends Components.ScSubscriptionDetails, HTMLStencilElement {
    }
    var HTMLScSubscriptionDetailsElement: {
        prototype: HTMLScSubscriptionDetailsElement;
        new (): HTMLScSubscriptionDetailsElement;
    };
    interface HTMLScSubscriptionNextPaymentElement extends Components.ScSubscriptionNextPayment, HTMLStencilElement {
    }
    var HTMLScSubscriptionNextPaymentElement: {
        prototype: HTMLScSubscriptionNextPaymentElement;
        new (): HTMLScSubscriptionNextPaymentElement;
    };
    interface HTMLScSubscriptionPaymentElement extends Components.ScSubscriptionPayment, HTMLStencilElement {
    }
    var HTMLScSubscriptionPaymentElement: {
        prototype: HTMLScSubscriptionPaymentElement;
        new (): HTMLScSubscriptionPaymentElement;
    };
    interface HTMLScSubscriptionPaymentMethodElement extends Components.ScSubscriptionPaymentMethod, HTMLStencilElement {
    }
    var HTMLScSubscriptionPaymentMethodElement: {
        prototype: HTMLScSubscriptionPaymentMethodElement;
        new (): HTMLScSubscriptionPaymentMethodElement;
    };
    interface HTMLScSubscriptionStatusBadgeElement extends Components.ScSubscriptionStatusBadge, HTMLStencilElement {
    }
    var HTMLScSubscriptionStatusBadgeElement: {
        prototype: HTMLScSubscriptionStatusBadgeElement;
        new (): HTMLScSubscriptionStatusBadgeElement;
    };
    interface HTMLScSubscriptionSwitchElement extends Components.ScSubscriptionSwitch, HTMLStencilElement {
    }
    var HTMLScSubscriptionSwitchElement: {
        prototype: HTMLScSubscriptionSwitchElement;
        new (): HTMLScSubscriptionSwitchElement;
    };
    interface HTMLScSubscriptionsListElement extends Components.ScSubscriptionsList, HTMLStencilElement {
    }
    var HTMLScSubscriptionsListElement: {
        prototype: HTMLScSubscriptionsListElement;
        new (): HTMLScSubscriptionsListElement;
    };
    interface HTMLScSwitchElement extends Components.ScSwitch, HTMLStencilElement {
    }
    var HTMLScSwitchElement: {
        prototype: HTMLScSwitchElement;
        new (): HTMLScSwitchElement;
    };
    interface HTMLScTabElement extends Components.ScTab, HTMLStencilElement {
    }
    var HTMLScTabElement: {
        prototype: HTMLScTabElement;
        new (): HTMLScTabElement;
    };
    interface HTMLScTabGroupElement extends Components.ScTabGroup, HTMLStencilElement {
    }
    var HTMLScTabGroupElement: {
        prototype: HTMLScTabGroupElement;
        new (): HTMLScTabGroupElement;
    };
    interface HTMLScTabPanelElement extends Components.ScTabPanel, HTMLStencilElement {
    }
    var HTMLScTabPanelElement: {
        prototype: HTMLScTabPanelElement;
        new (): HTMLScTabPanelElement;
    };
    interface HTMLScTableElement extends Components.ScTable, HTMLStencilElement {
    }
    var HTMLScTableElement: {
        prototype: HTMLScTableElement;
        new (): HTMLScTableElement;
    };
    interface HTMLScTableCellElement extends Components.ScTableCell, HTMLStencilElement {
    }
    var HTMLScTableCellElement: {
        prototype: HTMLScTableCellElement;
        new (): HTMLScTableCellElement;
    };
    interface HTMLScTableHeadElement extends Components.ScTableHead, HTMLStencilElement {
    }
    var HTMLScTableHeadElement: {
        prototype: HTMLScTableHeadElement;
        new (): HTMLScTableHeadElement;
    };
    interface HTMLScTableRowElement extends Components.ScTableRow, HTMLStencilElement {
    }
    var HTMLScTableRowElement: {
        prototype: HTMLScTableRowElement;
        new (): HTMLScTableRowElement;
    };
    interface HTMLScTagElement extends Components.ScTag, HTMLStencilElement {
    }
    var HTMLScTagElement: {
        prototype: HTMLScTagElement;
        new (): HTMLScTagElement;
    };
    interface HTMLScTaxIdInputElement extends Components.ScTaxIdInput, HTMLStencilElement {
    }
    var HTMLScTaxIdInputElement: {
        prototype: HTMLScTaxIdInputElement;
        new (): HTMLScTaxIdInputElement;
    };
    interface HTMLScTextElement extends Components.ScText, HTMLStencilElement {
    }
    var HTMLScTextElement: {
        prototype: HTMLScTextElement;
        new (): HTMLScTextElement;
    };
    interface HTMLScTextareaElement extends Components.ScTextarea, HTMLStencilElement {
    }
    var HTMLScTextareaElement: {
        prototype: HTMLScTextareaElement;
        new (): HTMLScTextareaElement;
    };
    interface HTMLScToggleElement extends Components.ScToggle, HTMLStencilElement {
    }
    var HTMLScToggleElement: {
        prototype: HTMLScToggleElement;
        new (): HTMLScToggleElement;
    };
    interface HTMLScTogglesElement extends Components.ScToggles, HTMLStencilElement {
    }
    var HTMLScTogglesElement: {
        prototype: HTMLScTogglesElement;
        new (): HTMLScTogglesElement;
    };
    interface HTMLScTooltipElement extends Components.ScTooltip, HTMLStencilElement {
    }
    var HTMLScTooltipElement: {
        prototype: HTMLScTooltipElement;
        new (): HTMLScTooltipElement;
    };
    interface HTMLScTotalElement extends Components.ScTotal, HTMLStencilElement {
    }
    var HTMLScTotalElement: {
        prototype: HTMLScTotalElement;
        new (): HTMLScTotalElement;
    };
    interface HTMLScUpcomingInvoiceElement extends Components.ScUpcomingInvoice, HTMLStencilElement {
    }
    var HTMLScUpcomingInvoiceElement: {
        prototype: HTMLScUpcomingInvoiceElement;
        new (): HTMLScUpcomingInvoiceElement;
    };
    interface HTMLScUpgradeRequiredElement extends Components.ScUpgradeRequired, HTMLStencilElement {
    }
    var HTMLScUpgradeRequiredElement: {
        prototype: HTMLScUpgradeRequiredElement;
        new (): HTMLScUpgradeRequiredElement;
    };
    interface HTMLScWordpressPasswordEditElement extends Components.ScWordpressPasswordEdit, HTMLStencilElement {
    }
    var HTMLScWordpressPasswordEditElement: {
        prototype: HTMLScWordpressPasswordEditElement;
        new (): HTMLScWordpressPasswordEditElement;
    };
    interface HTMLScWordpressUserElement extends Components.ScWordpressUser, HTMLStencilElement {
    }
    var HTMLScWordpressUserElement: {
        prototype: HTMLScWordpressUserElement;
        new (): HTMLScWordpressUserElement;
    };
    interface HTMLScWordpressUserEditElement extends Components.ScWordpressUserEdit, HTMLStencilElement {
    }
    var HTMLScWordpressUserEditElement: {
        prototype: HTMLScWordpressUserEditElement;
        new (): HTMLScWordpressUserEditElement;
    };
    interface HTMLElementTagNameMap {
        "sc-address": HTMLScAddressElement;
        "sc-alert": HTMLScAlertElement;
        "sc-avatar": HTMLScAvatarElement;
        "sc-badge-notice": HTMLScBadgeNoticeElement;
        "sc-block-ui": HTMLScBlockUiElement;
        "sc-breadcrumb": HTMLScBreadcrumbElement;
        "sc-breadcrumbs": HTMLScBreadcrumbsElement;
        "sc-button": HTMLScButtonElement;
        "sc-button-group": HTMLScButtonGroupElement;
        "sc-cancel-dialog": HTMLScCancelDialogElement;
        "sc-cancel-discount": HTMLScCancelDiscountElement;
        "sc-cancel-survey": HTMLScCancelSurveyElement;
        "sc-card": HTMLScCardElement;
        "sc-cart": HTMLScCartElement;
        "sc-cart-form": HTMLScCartFormElement;
        "sc-cart-form-submit": HTMLScCartFormSubmitElement;
        "sc-cart-header": HTMLScCartHeaderElement;
        "sc-cart-icon": HTMLScCartIconElement;
        "sc-cart-loader": HTMLScCartLoaderElement;
        "sc-cart-session-provider": HTMLScCartSessionProviderElement;
        "sc-cart-submit": HTMLScCartSubmitElement;
        "sc-cc-logo": HTMLScCcLogoElement;
        "sc-charges-list": HTMLScChargesListElement;
        "sc-checkbox": HTMLScCheckboxElement;
        "sc-checkout": HTMLScCheckoutElement;
        "sc-checkout-form-errors": HTMLScCheckoutFormErrorsElement;
        "sc-checkout-mollie-payment": HTMLScCheckoutMolliePaymentElement;
        "sc-checkout-unsaved-changes-warning": HTMLScCheckoutUnsavedChangesWarningElement;
        "sc-choice": HTMLScChoiceElement;
        "sc-choice-container": HTMLScChoiceContainerElement;
        "sc-choices": HTMLScChoicesElement;
        "sc-column": HTMLScColumnElement;
        "sc-columns": HTMLScColumnsElement;
        "sc-compact-address": HTMLScCompactAddressElement;
        "sc-conditional-form": HTMLScConditionalFormElement;
        "sc-consumer": HTMLScConsumerElement;
        "sc-coupon-form": HTMLScCouponFormElement;
        "sc-custom-order-price-input": HTMLScCustomOrderPriceInputElement;
        "sc-customer-details": HTMLScCustomerDetailsElement;
        "sc-customer-edit": HTMLScCustomerEditElement;
        "sc-customer-email": HTMLScCustomerEmailElement;
        "sc-customer-firstname": HTMLScCustomerFirstnameElement;
        "sc-customer-lastname": HTMLScCustomerLastnameElement;
        "sc-customer-name": HTMLScCustomerNameElement;
        "sc-dashboard-customer-details": HTMLScDashboardCustomerDetailsElement;
        "sc-dashboard-downloads-list": HTMLScDashboardDownloadsListElement;
        "sc-dashboard-module": HTMLScDashboardModuleElement;
        "sc-dialog": HTMLScDialogElement;
        "sc-divider": HTMLScDividerElement;
        "sc-donation-choices": HTMLScDonationChoicesElement;
        "sc-downloads-list": HTMLScDownloadsListElement;
        "sc-drawer": HTMLScDrawerElement;
        "sc-dropdown": HTMLScDropdownElement;
        "sc-empty": HTMLScEmptyElement;
        "sc-error": HTMLScErrorElement;
        "sc-express-payment": HTMLScExpressPaymentElement;
        "sc-flex": HTMLScFlexElement;
        "sc-form": HTMLScFormElement;
        "sc-form-components-validator": HTMLScFormComponentsValidatorElement;
        "sc-form-control": HTMLScFormControlElement;
        "sc-form-error-provider": HTMLScFormErrorProviderElement;
        "sc-form-row": HTMLScFormRowElement;
        "sc-form-state-provider": HTMLScFormStateProviderElement;
        "sc-format-bytes": HTMLScFormatBytesElement;
        "sc-format-date": HTMLScFormatDateElement;
        "sc-format-interval": HTMLScFormatIntervalElement;
        "sc-format-number": HTMLScFormatNumberElement;
        "sc-heading": HTMLScHeadingElement;
        "sc-icon": HTMLScIconElement;
        "sc-input": HTMLScInputElement;
        "sc-invoices-list": HTMLScInvoicesListElement;
        "sc-licenses-list": HTMLScLicensesListElement;
        "sc-line-item": HTMLScLineItemElement;
        "sc-line-item-bump": HTMLScLineItemBumpElement;
        "sc-line-item-tax": HTMLScLineItemTaxElement;
        "sc-line-item-total": HTMLScLineItemTotalElement;
        "sc-line-items": HTMLScLineItemsElement;
        "sc-line-items-provider": HTMLScLineItemsProviderElement;
        "sc-login-form": HTMLScLoginFormElement;
        "sc-login-provider": HTMLScLoginProviderElement;
        "sc-menu": HTMLScMenuElement;
        "sc-menu-divider": HTMLScMenuDividerElement;
        "sc-menu-item": HTMLScMenuItemElement;
        "sc-menu-label": HTMLScMenuLabelElement;
        "sc-mollie-add-method": HTMLScMollieAddMethodElement;
        "sc-order": HTMLScOrderElement;
        "sc-order-bump": HTMLScOrderBumpElement;
        "sc-order-bumps": HTMLScOrderBumpsElement;
        "sc-order-confirm-components-validator": HTMLScOrderConfirmComponentsValidatorElement;
        "sc-order-confirm-provider": HTMLScOrderConfirmProviderElement;
        "sc-order-confirmation": HTMLScOrderConfirmationElement;
        "sc-order-confirmation-customer": HTMLScOrderConfirmationCustomerElement;
        "sc-order-confirmation-details": HTMLScOrderConfirmationDetailsElement;
        "sc-order-confirmation-line-items": HTMLScOrderConfirmationLineItemsElement;
        "sc-order-confirmation-totals": HTMLScOrderConfirmationTotalsElement;
        "sc-order-coupon-form": HTMLScOrderCouponFormElement;
        "sc-order-detail": HTMLScOrderDetailElement;
        "sc-order-manual-instructions": HTMLScOrderManualInstructionsElement;
        "sc-order-password": HTMLScOrderPasswordElement;
        "sc-order-shipping-address": HTMLScOrderShippingAddressElement;
        "sc-order-status-badge": HTMLScOrderStatusBadgeElement;
        "sc-order-submit": HTMLScOrderSubmitElement;
        "sc-order-summary": HTMLScOrderSummaryElement;
        "sc-order-tax-id-input": HTMLScOrderTaxIdInputElement;
        "sc-orders-list": HTMLScOrdersListElement;
        "sc-pagination": HTMLScPaginationElement;
        "sc-password-nag": HTMLScPasswordNagElement;
        "sc-payment": HTMLScPaymentElement;
        "sc-payment-method": HTMLScPaymentMethodElement;
        "sc-payment-method-choice": HTMLScPaymentMethodChoiceElement;
        "sc-payment-methods-list": HTMLScPaymentMethodsListElement;
        "sc-payment-selected": HTMLScPaymentSelectedElement;
        "sc-paypal-add-method": HTMLScPaypalAddMethodElement;
        "sc-paypal-buttons": HTMLScPaypalButtonsElement;
        "sc-premium-tag": HTMLScPremiumTagElement;
        "sc-price-choice": HTMLScPriceChoiceElement;
        "sc-price-choices": HTMLScPriceChoicesElement;
        "sc-price-input": HTMLScPriceInputElement;
        "sc-price-range": HTMLScPriceRangeElement;
        "sc-product-line-item": HTMLScProductLineItemElement;
        "sc-product-selected-price": HTMLScProductSelectedPriceElement;
        "sc-prose": HTMLScProseElement;
        "sc-provider": HTMLScProviderElement;
        "sc-purchase-downloads-list": HTMLScPurchaseDownloadsListElement;
        "sc-quantity-select": HTMLScQuantitySelectElement;
        "sc-radio": HTMLScRadioElement;
        "sc-radio-group": HTMLScRadioGroupElement;
        "sc-rich-text": HTMLScRichTextElement;
        "sc-secure-notice": HTMLScSecureNoticeElement;
        "sc-select": HTMLScSelectElement;
        "sc-session-provider": HTMLScSessionProviderElement;
        "sc-skeleton": HTMLScSkeletonElement;
        "sc-spacing": HTMLScSpacingElement;
        "sc-spinner": HTMLScSpinnerElement;
        "sc-stacked-list": HTMLScStackedListElement;
        "sc-stacked-list-row": HTMLScStackedListRowElement;
        "sc-stripe-add-method": HTMLScStripeAddMethodElement;
        "sc-stripe-element": HTMLScStripeElementElement;
        "sc-stripe-payment-element": HTMLScStripePaymentElementElement;
        "sc-stripe-payment-request": HTMLScStripePaymentRequestElement;
        "sc-subscription": HTMLScSubscriptionElement;
        "sc-subscription-ad-hoc-confirm": HTMLScSubscriptionAdHocConfirmElement;
        "sc-subscription-cancel": HTMLScSubscriptionCancelElement;
        "sc-subscription-details": HTMLScSubscriptionDetailsElement;
        "sc-subscription-next-payment": HTMLScSubscriptionNextPaymentElement;
        "sc-subscription-payment": HTMLScSubscriptionPaymentElement;
        "sc-subscription-payment-method": HTMLScSubscriptionPaymentMethodElement;
        "sc-subscription-status-badge": HTMLScSubscriptionStatusBadgeElement;
        "sc-subscription-switch": HTMLScSubscriptionSwitchElement;
        "sc-subscriptions-list": HTMLScSubscriptionsListElement;
        "sc-switch": HTMLScSwitchElement;
        "sc-tab": HTMLScTabElement;
        "sc-tab-group": HTMLScTabGroupElement;
        "sc-tab-panel": HTMLScTabPanelElement;
        "sc-table": HTMLScTableElement;
        "sc-table-cell": HTMLScTableCellElement;
        "sc-table-head": HTMLScTableHeadElement;
        "sc-table-row": HTMLScTableRowElement;
        "sc-tag": HTMLScTagElement;
        "sc-tax-id-input": HTMLScTaxIdInputElement;
        "sc-text": HTMLScTextElement;
        "sc-textarea": HTMLScTextareaElement;
        "sc-toggle": HTMLScToggleElement;
        "sc-toggles": HTMLScTogglesElement;
        "sc-tooltip": HTMLScTooltipElement;
        "sc-total": HTMLScTotalElement;
        "sc-upcoming-invoice": HTMLScUpcomingInvoiceElement;
        "sc-upgrade-required": HTMLScUpgradeRequiredElement;
        "sc-wordpress-password-edit": HTMLScWordpressPasswordEditElement;
        "sc-wordpress-user": HTMLScWordpressUserElement;
        "sc-wordpress-user-edit": HTMLScWordpressUserEditElement;
    }
}
declare namespace LocalJSX {
    interface ScAddress {
        /**
          * The address.
         */
        "address"?: Partial<Address>;
        /**
          * Is this disabled?
         */
        "disabled"?: boolean;
        /**
          * The label for the field.
         */
        "label"?: string;
        /**
          * Is this loading?
         */
        "loading"?: boolean;
        "names"?: Partial<Address>;
        /**
          * Address change event.
         */
        "onScChangeAddress"?: (event: ScAddressCustomEvent<Partial<Address>>) => void;
        /**
          * Address change event.
         */
        "onScInputAddress"?: (event: ScAddressCustomEvent<Partial<Address>>) => void;
        "placeholders"?: Partial<Address>;
        /**
          * Is this required?
         */
        "required"?: boolean;
        /**
          * Should we show name field?
         */
        "showLine2"?: boolean;
        /**
          * Should we show name field?
         */
        "showName"?: boolean;
    }
    interface ScAlert {
        /**
          * Makes the alert closable.
         */
        "closable"?: boolean;
        /**
          * The length of time, in milliseconds, the alert will show before closing itself. If the user interacts with the alert before it closes (e.g. moves the mouse over it), the timer will restart. Defaults to `Infinity`.
         */
        "duration"?: number;
        /**
          * No icon
         */
        "noIcon"?: boolean;
        /**
          * When alert is hidden
         */
        "onScHide"?: (event: ScAlertCustomEvent<void>) => void;
        /**
          * When alert is shown
         */
        "onScShow"?: (event: ScAlertCustomEvent<void>) => void;
        /**
          * Indicates whether or not the alert is open. You can use this in lieu of the show/hide methods.
         */
        "open"?: boolean;
        /**
          * Scroll margin
         */
        "scrollMargin"?: string;
        /**
          * Scroll into view.
         */
        "scrollOnOpen"?: boolean;
        /**
          * The title.
         */
        "title"?: string;
        /**
          * The type of alert.
         */
        "type"?: 'primary' | 'success' | 'info' | 'warning' | 'danger';
    }
    interface ScAvatar {
        /**
          * The image source to use for the avatar.
         */
        "image"?: string;
        /**
          * Initials to use as a fallback when no image is available (1-2 characters max recommended).
         */
        "initials"?: string;
        /**
          * A label to use to describe the avatar to assistive devices.
         */
        "label"?: string;
        /**
          * Indicates how the browser should load the image.
         */
        "loading"?: 'eager' | 'lazy';
        /**
          * The shape of the avatar.
         */
        "shape"?: 'circle' | 'square' | 'rounded';
    }
    interface ScBadgeNotice {
        "label"?: string;
        "size"?: 'small' | 'medium' | 'large';
        "type"?: 'primary' | 'success' | 'info' | 'warning' | 'danger' | 'default';
    }
    interface ScBlockUi {
        "spinner"?: boolean;
        "transparent"?: boolean;
        "zIndex"?: number;
    }
    interface ScBreadcrumb {
        /**
          * Optional URL to direct the user to when the breadcrumb item is activated. When set, a link will be rendered internally. When unset, a button will be rendered instead.
         */
        "href"?: string;
        /**
          * The `rel` attribute to use on the link. Only used when `href` is set.
         */
        "rel"?: string;
        /**
          * Tells the browser where to open the link. Only used when `href` is set.
         */
        "target"?: '_blank' | '_parent' | '_self' | '_top';
    }
    interface ScBreadcrumbs {
        /**
          * The label to use for the breadcrumb control. This will not be shown, but it will be announced by screen readers and other assistive devices.
         */
        "label"?: string;
    }
    interface ScButton {
        /**
          * Draws the button in a busy state.
         */
        "busy"?: boolean;
        /**
          * Draws the button with a caret for use with dropdowns, popovers, etc.
         */
        "caret"?: boolean;
        /**
          * Draws a circle button.
         */
        "circle"?: boolean;
        /**
          * Disables the button.
         */
        "disabled"?: boolean;
        /**
          * Tells the browser to download the linked file as this filename. Only used when `href` is set.
         */
        "download"?: string;
        /**
          * Draws the button full-width.
         */
        "full"?: boolean;
        /**
          * When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`.
         */
        "href"?: string;
        /**
          * Draws the button in a loading state.
         */
        "loading"?: boolean;
        /**
          * An optional name for the button. Ignored when `href` is set.
         */
        "name"?: string;
        /**
          * Emitted when the button loses focus.
         */
        "onScBlur"?: (event: ScButtonCustomEvent<void>) => void;
        /**
          * Emitted when the button gains focus.
         */
        "onScFocus"?: (event: ScButtonCustomEvent<void>) => void;
        /**
          * Draws an outlined button.
         */
        "outline"?: boolean;
        /**
          * Draws a pill-style button with rounded edges.
         */
        "pill"?: boolean;
        /**
          * The button's size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * Indicates if activating the button should submit the form. Ignored when `href` is set.
         */
        "submit"?: boolean;
        /**
          * Tells the browser where to open the link. Only used when `href` is set.
         */
        "target"?: '_blank' | '_parent' | '_self' | '_top';
        /**
          * The button's type.
         */
        "type"?: 'default' | 'primary' | 'success' | 'info' | 'warning' | 'danger' | 'text' | 'link';
        /**
          * An optional value for the button. Ignored when `href` is set.
         */
        "value"?: string;
    }
    interface ScButtonGroup {
        "label"?: string;
        "separate"?: boolean;
    }
    interface ScCancelDialog {
        "onScRefresh"?: (event: ScCancelDialogCustomEvent<void>) => void;
        "onScRequestClose"?: (event: ScCancelDialogCustomEvent<'close-button' | 'keyboard' | 'overlay'>) => void;
        "open"?: boolean;
        "protocol"?: SubscriptionProtocol;
        "subscription"?: Subscription;
    }
    interface ScCancelDiscount {
        "comment"?: string;
        "onScCancel"?: (event: ScCancelDiscountCustomEvent<void>) => void;
        "onScPreserved"?: (event: ScCancelDiscountCustomEvent<void>) => void;
        "protocol"?: SubscriptionProtocol;
        "reason"?: CancellationReason;
        "subscription"?: Subscription;
    }
    interface ScCancelSurvey {
        "onScAbandon"?: (event: ScCancelSurveyCustomEvent<void>) => void;
        "onScSubmitReason"?: (event: ScCancelSurveyCustomEvent<{ reason: CancellationReason; comment: string }>) => void;
        "protocol"?: SubscriptionProtocol;
        "reasons"?: CancellationReason[];
    }
    interface ScCard {
        /**
          * Is this card borderless.
         */
        "borderless"?: boolean;
        /**
          * A link for the card.
         */
        "href"?: string;
        /**
          * Is this card loading.
         */
        "loading"?: boolean;
        /**
          * Eliminate the divider
         */
        "noDivider"?: boolean;
        /**
          * Remove padding
         */
        "noPadding"?: boolean;
    }
    interface ScCart {
        /**
          * Should we force show the cart, even if there's a form on the page?
         */
        "alwaysShow"?: boolean;
        /**
          * The template for the cart to inject when opened.
         */
        "cartTemplate"?: string;
        "checkoutLink"?: string;
        /**
          * The checkout url for the button.
         */
        "checkoutUrl"?: string;
        /**
          * The form id to use for the cart.
         */
        "formId"?: string;
        /**
          * The header for the popout.
         */
        "header"?: string;
        /**
          * Are we in test or live mode.
         */
        "mode"?: 'test' | 'live';
    }
    interface ScCartForm {
        /**
          * The form id to use for the cart.
         */
        "formId"?: string;
        /**
          * Are we in test or live mode.
         */
        "mode"?: 'test' | 'live';
        /**
          * The price id to add.
         */
        "priceId"?: string;
        /**
          * The quantity
         */
        "quantity"?: number;
    }
    interface ScCartFormSubmit {
        /**
          * Is the cart busy
         */
        "busy"?: boolean;
        /**
          * Show a full-width button.
         */
        "full"?: boolean;
        /**
          * Icon to show.
         */
        "icon"?: string;
        /**
          * The button's size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The button type.
         */
        "type"?: 'default' | 'primary' | 'success' | 'info' | 'warning' | 'danger' | 'text' | 'link';
    }
    interface ScCartHeader {
        "lineItems"?: Array<LineItem>;
        "onScCloseCart"?: (event: ScCartHeaderCustomEvent<void>) => void;
    }
    interface ScCartIcon {
        /**
          * The count to show in the cart icon.
         */
        "count"?: number;
        /**
          * The icon to show.
         */
        "icon"?: string;
    }
    interface ScCartLoader {
        /**
          * The form id to use for the cart.
         */
        "formId"?: string;
        /**
          * The mode for the form.
         */
        "mode"?: 'live' | 'test';
        /**
          * The cart template to inject when opened.
         */
        "template"?: string;
    }
    interface ScCartSessionProvider {
        /**
          * Error event
         */
        "onScError"?: (event: ScCartSessionProviderCustomEvent<{ message: string; code?: string; data?: any; additional_errors?: any } | {}>) => void;
        /**
          * Set the state
         */
        "onScSetState"?: (event: ScCartSessionProviderCustomEvent<'loading' | 'busy' | 'navigating' | 'idle'>) => void;
        /**
          * Update line items event
         */
        "onScUpdateOrderState"?: (event: ScCartSessionProviderCustomEvent<Checkout>) => void;
        /**
          * Order Object
         */
        "order"?: Checkout;
    }
    interface ScCartSubmit {
        /**
          * Is the cart busy
         */
        "busy"?: boolean;
        "checkoutLink"?: string;
        /**
          * Show a full-width button.
         */
        "full"?: boolean;
        /**
          * Icon to show.
         */
        "icon"?: string;
        /**
          * The button's size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The button type.
         */
        "type"?: 'default' | 'primary' | 'success' | 'info' | 'warning' | 'danger' | 'text' | 'link';
    }
    interface ScCcLogo {
        "brand"?: string;
    }
    interface ScChargesList {
        "allLink"?: string;
        "heading"?: string;
        /**
          * Query to fetch charges
         */
        "query"?: {
    page: number;
    per_page: number;
  };
        "showPagination"?: boolean;
    }
    interface ScCheckbox {
        /**
          * Draws the checkbox in a checked state.
         */
        "checked"?: boolean;
        /**
          * Disables the checkbox.
         */
        "disabled"?: boolean;
        /**
          * Makes this edit and not editable.
         */
        "edit"?: boolean;
        /**
          * Draws the checkbox in an indeterminate state.
         */
        "indeterminate"?: boolean;
        /**
          * This will be true when the control is in an invalid state. Validity is determined by the `required` prop.
         */
        "invalid"?: boolean;
        /**
          * The checkbox's name attribute.
         */
        "name"?: string;
        /**
          * Emitted when the control loses focus.
         */
        "onScBlur"?: (event: ScCheckboxCustomEvent<void>) => void;
        /**
          * Emitted when the control's checked state changes.
         */
        "onScChange"?: (event: ScCheckboxCustomEvent<void>) => void;
        /**
          * Emitted when the control gains focus.
         */
        "onScFocus"?: (event: ScCheckboxCustomEvent<void>) => void;
        /**
          * Makes the checkbox a required field.
         */
        "required"?: boolean;
        /**
          * The checkbox's value attribute.
         */
        "value"?: string;
    }
    interface ScCheckout {
        /**
          * The abandoned checkout return url.
         */
        "abandonedCheckoutReturnUrl"?: string;
        /**
          * Alignment
         */
        "alignment"?: 'center' | 'wide' | 'full';
        /**
          * Currency to use for this checkout.
         */
        "currencyCode"?: string;
        /**
          * Stores the current customer
         */
        "customer"?: Customer;
        /**
          * Should we disable components validation
         */
        "disableComponentsValidation"?: boolean;
        /**
          * Can we edit line items?
         */
        "editLineItems"?: boolean;
        /**
          * The checkout form id
         */
        "formId"?: number;
        /**
          * Text for the loading states of the form.
         */
        "loadingText"?: {
    finalizing: string;
    paying: string;
    confirming: string;
    confirmed: string;
  };
        /**
          * Is this user logged in?
         */
        "loggedIn"?: boolean;
        /**
          * Manual payment methods enabled for this form.
         */
        "manualPaymentMethods"?: ManualPaymentMethod[];
        /**
          * Are we in test or live mode.
         */
        "mode"?: 'test' | 'live';
        /**
          * When the form was modified.
         */
        "modified"?: string;
        /**
          * Checkout has an error.
         */
        "onScOrderError"?: (event: ScCheckoutCustomEvent<ResponseError>) => void;
        /**
          * Checkout has been finalized.
         */
        "onScOrderFinalized"?: (event: ScCheckoutCustomEvent<Checkout>) => void;
        /**
          * Checkout has been updated.
         */
        "onScOrderUpdated"?: (event: ScCheckoutCustomEvent<Checkout>) => void;
        /**
          * Whether to persist the session in the browser between visits.
         */
        "persistSession"?: boolean;
        /**
          * An array of prices to pre-fill in the form.
         */
        "prices"?: Array<PriceChoice>;
        /**
          * Processors enabled for this form.
         */
        "processors"?: Processor[];
        /**
          * A product to pre-fill the form.
         */
        "product"?: Product;
        /**
          * Can we remove line items?
         */
        "removeLineItems"?: boolean;
        /**
          * Use the Stripe payment element.
         */
        "stripePaymentElement"?: boolean;
        /**
          * Success text for the form.
         */
        "successText"?: {
    title: string;
    description: string;
    button: string;
  };
        /**
          * Where to go on success
         */
        "successUrl"?: string;
        /**
          * The account tax protocol
         */
        "taxProtocol"?: TaxProtocol;
    }
    interface ScCheckoutFormErrors {
        /**
          * The current order.
         */
        "checkoutState"?: FormState;
        /**
          * Error to display.
         */
        "error"?: ResponseError | null;
    }
    interface ScCheckoutMolliePayment {
        "method"?: string;
        /**
          * Error event
         */
        "onScError"?: (event: ScCheckoutMolliePaymentCustomEvent<ResponseError>) => void;
        "processorId"?: string;
    }
    interface ScCheckoutUnsavedChangesWarning {
        "state"?: FormState;
    }
    interface ScChoice {
        /**
          * Draws the choice in a checked state.
         */
        "checked"?: boolean;
        /**
          * Is the choice disabled
         */
        "disabled"?: boolean;
        /**
          * This will be true when the control is in an invalid state. Validity is determined by the `required` prop.
         */
        "invalid"?: boolean;
        /**
          * The choice name attribute
         */
        "name"?: string;
        /**
          * Emitted when the control loses focus.
         */
        "onScBlur"?: (event: ScChoiceCustomEvent<void>) => void;
        /**
          * Emitted when the control's checked state changes.
         */
        "onScChange"?: (event: ScChoiceCustomEvent<boolean>) => void;
        /**
          * Emitted when the control gains focus.
         */
        "onScFocus"?: (event: ScChoiceCustomEvent<void>) => void;
        /**
          * Is this required
         */
        "required"?: boolean;
        /**
          * Show the radio/checkbox control
         */
        "showControl"?: boolean;
        /**
          * Show the label
         */
        "showLabel"?: boolean;
        /**
          * Show the price
         */
        "showPrice"?: boolean;
        /**
          * The size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The choice name attribute
         */
        "type"?: 'radio' | 'checkbox';
        /**
          * The choice value
         */
        "value"?: string;
    }
    interface ScChoiceContainer {
        /**
          * Draws the choice in a checked state.
         */
        "checked"?: boolean;
        /**
          * Is the choice disabled
         */
        "disabled"?: boolean;
        /**
          * This will be true when the control is in an invalid state. Validity is determined by the `required` prop.
         */
        "invalid"?: boolean;
        /**
          * The choice name attribute
         */
        "name"?: string;
        /**
          * Emitted when the control loses focus.
         */
        "onScBlur"?: (event: ScChoiceContainerCustomEvent<void>) => void;
        /**
          * Emitted when the control's checked state changes.
         */
        "onScChange"?: (event: ScChoiceContainerCustomEvent<boolean>) => void;
        /**
          * Emitted when the control gains focus.
         */
        "onScFocus"?: (event: ScChoiceContainerCustomEvent<void>) => void;
        /**
          * Is this required
         */
        "required"?: boolean;
        /**
          * Show the radio/checkbox control
         */
        "showControl"?: boolean;
        /**
          * The size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The choice name attribute
         */
        "type"?: 'radio' | 'checkbox';
        /**
          * The choice value
         */
        "value"?: string;
    }
    interface ScChoices {
        "autoWidth"?: boolean;
        /**
          * Number of columns on desktop
         */
        "columns"?: number;
        /**
          * Validation error message.
         */
        "errorMessage"?: string;
        /**
          * The input's help text.
         */
        "help"?: string;
        /**
          * Hides the fieldset and legend that surrounds the group. The label will still be read by screen readers.
         */
        "hideLabel"?: boolean;
        /**
          * The group label. Required for proper accessibility. Alternatively, you can use the label slot.
         */
        "label"?: string;
        /**
          * Required
         */
        "required"?: boolean;
        /**
          * Should we show the label
         */
        "showLabel"?: boolean;
        /**
          * Input size
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface ScColumn {
    }
    interface ScColumns {
        /**
          * Is this full vertical height
         */
        "isFullHeight"?: boolean;
        /**
          * Is this reverse ordered on mobile
         */
        "isReversedOnMobile"?: boolean;
        /**
          * Is this stacked on mobile
         */
        "isStackedOnMobile"?: boolean;
        /**
          * The vertical alignment of the columns.
         */
        "verticalAlignment"?: string;
    }
    interface ScCompactAddress {
        /**
          * The address.
         */
        "address"?: Partial<Address>;
        /**
          * Label for the address
         */
        "label"?: string;
        /**
          * Is this loading
         */
        "loading"?: boolean;
        "names"?: Partial<Address>;
        /**
          * Address change event.
         */
        "onScChangeAddress"?: (event: ScCompactAddressCustomEvent<Partial<Address>>) => void;
        /**
          * Address input event.
         */
        "onScInputAddress"?: (event: ScCompactAddressCustomEvent<Partial<Address>>) => void;
        /**
          * Placeholders
         */
        "placeholders"?: Partial<Address>;
        /**
          * Is this required?
         */
        "required"?: boolean;
    }
    interface ScConditionalForm {
        /**
          * Selector label
         */
        "rule_groups"?: RuleGroup[];
    }
    interface ScConsumer {
        "onMountConsumer"?: (event: ScConsumerCustomEvent<any>) => void;
        "renderer"?: any;
    }
    interface ScCouponForm {
        /**
          * Is the form calculating
         */
        "busy"?: boolean;
        /**
          * The text for apply button
         */
        "buttonText"?: string;
        "collapsed"?: boolean;
        /**
          * Currency
         */
        "currency"?: string;
        /**
          * The discount
         */
        "discount"?: DiscountResponse;
        /**
          * The discount amount
         */
        "discountAmount"?: number;
        /**
          * The error message
         */
        "error"?: string;
        /**
          * Force the form to show
         */
        "forceOpen"?: boolean;
        /**
          * The label for the coupon form
         */
        "label"?: string;
        /**
          * Is the form loading
         */
        "loading"?: boolean;
        /**
          * When the coupon is applied
         */
        "onScApplyCoupon"?: (event: ScCouponFormCustomEvent<string>) => void;
        /**
          * Is it open
         */
        "open"?: boolean;
        /**
          * The placeholder for the input
         */
        "placeholder"?: string;
    }
    interface ScCustomOrderPriceInput {
        /**
          * Is this busy
         */
        "busy"?: boolean;
        /**
          * Help text.
         */
        "help"?: string;
        /**
          * Label for the field.
         */
        "label"?: string;
        /**
          * Label for the choice.
         */
        "lineItems"?: LineItem[];
        /**
          * Is this loading
         */
        "loading"?: boolean;
        /**
          * Toggle line item event
         */
        "onScUpdateLineItem"?: (event: ScCustomOrderPriceInputCustomEvent<LineItemData>) => void;
        /**
          * Input placeholder.
         */
        "placeholder"?: string;
        /**
          * Stores the price
         */
        "price"?: Price;
        /**
          * Id of the price.
         */
        "priceId"?: string;
        /**
          * Is this required?
         */
        "required"?: boolean;
        /**
          * Show the currency code?
         */
        "showCode"?: boolean;
    }
    interface ScCustomerDetails {
        "customer"?: Customer;
        "editLink"?: string;
        "error"?: string;
        "heading"?: string;
        "loading"?: boolean;
    }
    interface ScCustomerEdit {
        "customer"?: Customer;
        "heading"?: string;
        "successUrl"?: string;
    }
    interface ScCustomerEmail {
        /**
          * Is abandoned checkout enabled?
         */
        "abandonedCheckoutEnabled"?: boolean;
        /**
          * The input's autofocus attribute.
         */
        "autofocus"?: boolean;
        /**
          * Force a customer.
         */
        "customer"?: Customer;
        /**
          * Disables the input.
         */
        "disabled"?: boolean;
        /**
          * Inputs focus
         */
        "hasFocus"?: boolean;
        /**
          * The input's help text.
         */
        "help"?: string;
        /**
          * This will be true when the control is in an invalid state. Validity is determined by props such as `type`, `required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.
         */
        "invalid"?: boolean;
        /**
          * The input's label.
         */
        "label"?: string;
        /**
          * Is the user logged in.
         */
        "loggedIn"?: boolean;
        /**
          * Emitted when the control loses focus.
         */
        "onScBlur"?: (event: ScCustomerEmailCustomEvent<void>) => void;
        /**
          * Emitted when the control's value changes.
         */
        "onScChange"?: (event: ScCustomerEmailCustomEvent<void>) => void;
        /**
          * Emitted when the clear button is activated.
         */
        "onScClear"?: (event: ScCustomerEmailCustomEvent<void>) => void;
        /**
          * Emitted when the control gains focus.
         */
        "onScFocus"?: (event: ScCustomerEmailCustomEvent<void>) => void;
        /**
          * Emitted when the control receives input.
         */
        "onScInput"?: (event: ScCustomerEmailCustomEvent<void>) => void;
        /**
          * Prompt for login.
         */
        "onScLoginPrompt"?: (event: ScCustomerEmailCustomEvent<void>) => void;
        /**
          * Update the abandoned cart.
         */
        "onScUpdateAbandonedCart"?: (event: ScCustomerEmailCustomEvent<boolean>) => void;
        /**
          * Update the order state.
         */
        "onScUpdateOrderState"?: (event: ScCustomerEmailCustomEvent<Checkout>) => void;
        /**
          * (passed from the sc-checkout component automatically)
         */
        "order"?: Checkout;
        /**
          * Draws a pill-style input with rounded edges.
         */
        "pill"?: boolean;
        /**
          * The input's placeholder text.
         */
        "placeholder"?: string;
        /**
          * Makes the input readonly.
         */
        "readonly"?: boolean;
        /**
          * Makes the input a required field.
         */
        "required"?: boolean;
        /**
          * Should we show the label
         */
        "showLabel"?: boolean;
        /**
          * The input's size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * A message for tracking confirmation.
         */
        "trackingConfirmationMessage"?: string;
        /**
          * The input's value attribute.
         */
        "value"?: string;
    }
    interface ScCustomerFirstname {
        /**
          * The input's autofocus attribute.
         */
        "autofocus"?: boolean;
        /**
          * Force a customer.
         */
        "customer"?: Customer;
        /**
          * Disables the input.
         */
        "disabled"?: boolean;
        /**
          * Inputs focus
         */
        "hasFocus"?: boolean;
        /**
          * The input's help text.
         */
        "help"?: string;
        /**
          * This will be true when the control is in an invalid state. Validity is determined by props such as `type`, `required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.
         */
        "invalid"?: boolean;
        /**
          * The input's label.
         */
        "label"?: string;
        /**
          * Is the user logged in.
         */
        "loggedIn"?: boolean;
        /**
          * Emitted when the control loses focus.
         */
        "onScBlur"?: (event: ScCustomerFirstnameCustomEvent<void>) => void;
        /**
          * Emitted when the control's value changes.
         */
        "onScChange"?: (event: ScCustomerFirstnameCustomEvent<void>) => void;
        /**
          * Emitted when the clear button is activated.
         */
        "onScClear"?: (event: ScCustomerFirstnameCustomEvent<void>) => void;
        /**
          * Emitted when the control gains focus.
         */
        "onScFocus"?: (event: ScCustomerFirstnameCustomEvent<void>) => void;
        /**
          * Emitted when the control receives input.
         */
        "onScInput"?: (event: ScCustomerFirstnameCustomEvent<void>) => void;
        "onScUpdateCustomer"?: (event: ScCustomerFirstnameCustomEvent<{ email: string }>) => void;
        "onScUpdateOrderState"?: (event: ScCustomerFirstnameCustomEvent<Partial<Checkout>>) => void;
        /**
          * (passed from the sc-checkout component automatically)
         */
        "order"?: Checkout;
        /**
          * Draws a pill-style input with rounded edges.
         */
        "pill"?: boolean;
        /**
          * The input's placeholder text.
         */
        "placeholder"?: string;
        /**
          * Makes the input readonly.
         */
        "readonly"?: boolean;
        /**
          * Makes the input a required field.
         */
        "required"?: boolean;
        /**
          * Should we show the label
         */
        "showLabel"?: boolean;
        /**
          * The input's size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The input's value attribute.
         */
        "value"?: string;
    }
    interface ScCustomerLastname {
        /**
          * The input's autofocus attribute.
         */
        "autofocus"?: boolean;
        /**
          * Force a customer.
         */
        "customer"?: Customer;
        /**
          * Disables the input.
         */
        "disabled"?: boolean;
        /**
          * Inputs focus
         */
        "hasFocus"?: boolean;
        /**
          * The input's help text.
         */
        "help"?: string;
        /**
          * This will be true when the control is in an invalid state. Validity is determined by props such as `type`, `required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.
         */
        "invalid"?: boolean;
        /**
          * The input's label.
         */
        "label"?: string;
        /**
          * Is the user logged in.
         */
        "loggedIn"?: boolean;
        /**
          * Emitted when the control loses focus.
         */
        "onScBlur"?: (event: ScCustomerLastnameCustomEvent<void>) => void;
        /**
          * Emitted when the control's value changes.
         */
        "onScChange"?: (event: ScCustomerLastnameCustomEvent<void>) => void;
        /**
          * Emitted when the clear button is activated.
         */
        "onScClear"?: (event: ScCustomerLastnameCustomEvent<void>) => void;
        /**
          * Emitted when the control gains focus.
         */
        "onScFocus"?: (event: ScCustomerLastnameCustomEvent<void>) => void;
        /**
          * Emitted when the control receives input.
         */
        "onScInput"?: (event: ScCustomerLastnameCustomEvent<void>) => void;
        "onScUpdateCustomer"?: (event: ScCustomerLastnameCustomEvent<{ email: string }>) => void;
        "onScUpdateOrderState"?: (event: ScCustomerLastnameCustomEvent<Partial<Checkout>>) => void;
        /**
          * (passed from the sc-checkout component automatically)
         */
        "order"?: Checkout;
        /**
          * Draws a pill-style input with rounded edges.
         */
        "pill"?: boolean;
        /**
          * The input's placeholder text.
         */
        "placeholder"?: string;
        /**
          * Makes the input readonly.
         */
        "readonly"?: boolean;
        /**
          * Makes the input a required field.
         */
        "required"?: boolean;
        /**
          * Should we show the label
         */
        "showLabel"?: boolean;
        /**
          * The input's size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The input's value attribute.
         */
        "value"?: string;
    }
    interface ScCustomerName {
        /**
          * The input's autofocus attribute.
         */
        "autofocus"?: boolean;
        /**
          * Force a customer.
         */
        "customer"?: Customer;
        /**
          * Disables the input.
         */
        "disabled"?: boolean;
        /**
          * Inputs focus
         */
        "hasFocus"?: boolean;
        /**
          * The input's help text.
         */
        "help"?: string;
        /**
          * This will be true when the control is in an invalid state. Validity is determined by props such as `type`, `required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.
         */
        "invalid"?: boolean;
        /**
          * The input's label.
         */
        "label"?: string;
        /**
          * Is the user logged in.
         */
        "loggedIn"?: boolean;
        /**
          * Emitted when the control loses focus.
         */
        "onScBlur"?: (event: ScCustomerNameCustomEvent<void>) => void;
        /**
          * Emitted when the control's value changes.
         */
        "onScChange"?: (event: ScCustomerNameCustomEvent<void>) => void;
        /**
          * Emitted when the clear button is activated.
         */
        "onScClear"?: (event: ScCustomerNameCustomEvent<void>) => void;
        /**
          * Emitted when the control gains focus.
         */
        "onScFocus"?: (event: ScCustomerNameCustomEvent<void>) => void;
        /**
          * Emitted when the control receives input.
         */
        "onScInput"?: (event: ScCustomerNameCustomEvent<void>) => void;
        "onScUpdateCustomer"?: (event: ScCustomerNameCustomEvent<{ email: string }>) => void;
        "onScUpdateOrderState"?: (event: ScCustomerNameCustomEvent<Partial<Checkout>>) => void;
        /**
          * (passed from the sc-checkout component automatically)
         */
        "order"?: Checkout;
        /**
          * Draws a pill-style input with rounded edges.
         */
        "pill"?: boolean;
        /**
          * The input's placeholder text.
         */
        "placeholder"?: string;
        /**
          * Makes the input readonly.
         */
        "readonly"?: boolean;
        /**
          * Makes the input a required field.
         */
        "required"?: boolean;
        /**
          * Should we show the label
         */
        "showLabel"?: boolean;
        /**
          * The input's size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The input's value attribute.
         */
        "value"?: string;
    }
    interface ScDashboardCustomerDetails {
        "customerId"?: string;
        "heading"?: string;
    }
    interface ScDashboardDownloadsList {
        "allLink"?: string;
        "heading"?: string;
        "isCustomer"?: boolean;
        /**
          * Customer id to fetch subscriptions
         */
        "query"?: any;
        "requestNonce"?: string;
    }
    interface ScDashboardModule {
        "error"?: string;
        "heading"?: string;
        "loading"?: boolean;
    }
    interface ScDialog {
        /**
          * The dialog's label as displayed in the header. You should always include a relevant label even when using `no-header`, as it is required for proper accessibility.
         */
        "label"?: string;
        /**
          * Disables the header. This will also remove the default close button, so please ensure you provide an easy, accessible way for users to dismiss the dialog.
         */
        "noHeader"?: boolean;
        "onScAfterHide"?: (event: ScDialogCustomEvent<void>) => void;
        "onScAfterShow"?: (event: ScDialogCustomEvent<void>) => void;
        "onScHide"?: (event: ScDialogCustomEvent<void>) => void;
        "onScInitialFocus"?: (event: ScDialogCustomEvent<void>) => void;
        /**
          * Request close event
         */
        "onScRequestClose"?: (event: ScDialogCustomEvent<'close-button' | 'keyboard' | 'overlay'>) => void;
        "onScShow"?: (event: ScDialogCustomEvent<void>) => void;
        /**
          * Indicates whether or not the dialog is open. You can use this in lieu of the show/hide methods.
         */
        "open"?: boolean;
    }
    interface ScDivider {
    }
    interface ScDonationChoices {
        "busy"?: boolean;
        /**
          * Currency code for the donation.
         */
        "currencyCode"?: string;
        /**
          * The default amount to load the page with.
         */
        "defaultAmount"?: string;
        /**
          * The label for the field.
         */
        "label"?: string;
        /**
          * Order line items.
         */
        "lineItems"?: LineItem[];
        /**
          * Is this loading
         */
        "loading"?: boolean;
        /**
          * Toggle line item event
         */
        "onScAddLineItem"?: (event: ScDonationChoicesCustomEvent<LineItemData>) => void;
        /**
          * Toggle line item event
         */
        "onScRemoveLineItem"?: (event: ScDonationChoicesCustomEvent<LineItemData>) => void;
        /**
          * Toggle line item event
         */
        "onScUpdateLineItem"?: (event: ScDonationChoicesCustomEvent<LineItemData>) => void;
        /**
          * The price id for the fields.
         */
        "priceId"?: string;
        "removeInvalid"?: boolean;
    }
    interface ScDownloadsList {
        "customerId"?: string;
        "downloads"?: Download[];
        "heading"?: string;
    }
    interface ScDrawer {
        /**
          * By default, the drawer slides out of its containing block (usually the viewport). To make the drawer slide out of its parent element, set this prop and add `position: relative` to the parent.
         */
        "contained"?: boolean;
        /**
          * The drawer's label as displayed in the header. You should always include a relevant label even when using `no-header`, as it is required for proper accessibility.
         */
        "label"?: string;
        /**
          * Removes the header. This will also remove the default close button, so please ensure you provide an easy, accessible way for users to dismiss the drawer.
         */
        "noHeader"?: boolean;
        "onScAfterHide"?: (event: ScDrawerCustomEvent<void>) => void;
        "onScAfterShow"?: (event: ScDrawerCustomEvent<void>) => void;
        "onScHide"?: (event: ScDrawerCustomEvent<void>) => void;
        "onScInitialFocus"?: (event: ScDrawerCustomEvent<void>) => void;
        "onScRequestClose"?: (event: ScDrawerCustomEvent<'close-button' | 'keyboard' | 'overlay'>) => void;
        "onScShow"?: (event: ScDrawerCustomEvent<void>) => void;
        /**
          * Indicates whether or not the drawer is open. You can use this in lieu of the show/hide methods.
         */
        "open"?: boolean;
        /**
          * The direction from which the drawer will open.
         */
        "placement"?: 'top' | 'end' | 'bottom' | 'start';
    }
    interface ScDropdown {
        "clickEl"?: HTMLElement;
        /**
          * Determines whether the dropdown should hide when a menu item is selected
         */
        "closeOnSelect"?: boolean;
        /**
          * Is this disabled.
         */
        "disabled"?: boolean;
        /**
          * The distance in pixels from which to offset the panel away from its trigger.
         */
        "distance"?: number;
        /**
          * Enable this option to prevent the panel from being clipped when the component is placed inside a container with `overflow: auto|scroll`.
         */
        "hoist"?: boolean;
        /**
          * Emitted when the dropdown closes. Calling `event.preventDefault()` will prevent it from being closed.
         */
        "onScHide"?: (event: ScDropdownCustomEvent<void>) => void;
        /**
          * Emitted when the dropdown opens. Calling `event.preventDefault()` will prevent it from being opened.
         */
        "onScShow"?: (event: ScDropdownCustomEvent<void>) => void;
        /**
          * Indicates whether or not the dropdown is open. You can use this in lieu of the show/hide methods.
         */
        "open"?: boolean;
        /**
          * The placement of the dropdown.
         */
        "placement"?: | 'top'
    | 'top-start'
    | 'top-end'
    | 'bottom'
    | 'bottom-start'
    | 'bottom-end'
    | 'right'
    | 'right-start'
    | 'right-end'
    | 'left'
    | 'left-start'
    | 'left-end';
        /**
          * The placement of the dropdown panel
         */
        "position"?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
        /**
          * The distance in pixels from which to offset the panel along its trigger.
         */
        "skidding"?: number;
    }
    interface ScEmpty {
        "icon"?: string;
    }
    interface ScError {
        /**
          * Error to display.
         */
        "error"?: ResponseError | null;
        /**
          * Set the state.
         */
        "onScUpdateError"?: (event: ScErrorCustomEvent<ResponseError>) => void;
    }
    interface ScExpressPayment {
        "busy"?: boolean;
        "debug"?: boolean;
        "dividerText"?: string;
        "formId"?: number | string;
        "hasPaymentOptions"?: boolean;
        "order"?: Checkout;
        "processor"?: ProcessorName;
    }
    interface ScFlex {
        "alignItems"?: string;
        "columnGap"?: string;
        "flexDirection"?: string;
        "flexWrap"?: string;
        "justifyContent"?: string;
        "stack"?: string;
    }
    interface ScForm {
        /**
          * Prevent the form from validating inputs before submitting.
         */
        "novalidate"?: boolean;
        /**
          * Emitted when the form is submitted. This event will not be emitted if any form control inside of it is in an invalid state, unless the form has the `novalidate` attribute. Note that there is never a need to prevent this event, since it doen't send a GET or POST request like native forms. To "prevent" submission, use a conditional around the XHR request you use to submit the form's data with.
         */
        "onScFormChange"?: (event: ScFormCustomEvent<Object>) => void;
        /**
          * Backwards compat.
         */
        "onScFormSubmit"?: (event: ScFormCustomEvent<void>) => void;
        /**
          * Emitted when the form is submitted. This event will not be emitted if any form control inside of it is in an invalid state, unless the form has the `novalidate` attribute. Note that there is never a need to prevent this event, since it doen't send a GET or POST request like native forms. To "prevent" submission, use a conditional around the XHR request you use to submit the form's data with.
         */
        "onScSubmit"?: (event: ScFormCustomEvent<void>) => void;
    }
    interface ScFormComponentsValidator {
        /**
          * Disable validation?
         */
        "disabled"?: boolean;
        /**
          * The order
         */
        "order"?: Checkout;
        /**
          * The tax protocol
         */
        "taxProtocol"?: TaxProtocol;
    }
    interface ScFormControl {
        /**
          * Store the error message
         */
        "errorMessage"?: string;
        /**
          * Display server-side validation errors.
         */
        "errors"?: any;
        /**
          * Help text
         */
        "help"?: string;
        /**
          * Help id
         */
        "helpId"?: string;
        /**
          * Input id.
         */
        "inputId"?: string;
        /**
          * Input label.
         */
        "label"?: string;
        /**
          * Input label id.
         */
        "labelId"?: string;
        /**
          * Name for the input. Used for validation errors.
         */
        "name"?: string;
        /**
          * Whether the input is required.
         */
        "required"?: boolean;
        /**
          * Show the label.
         */
        "showLabel"?: boolean;
        /**
          * Size of the label
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface ScFormErrorProvider {
        /**
          * The current order.
         */
        "checkoutState"?: FormState;
        /**
          * Form state event.
         */
        "onScSetState"?: (event: ScFormErrorProviderCustomEvent<FormStateSetter>) => void;
        /**
          * Set the state.
         */
        "onScUpdateError"?: (event: ScFormErrorProviderCustomEvent<ResponseError>) => void;
    }
    interface ScFormRow {
    }
    interface ScFormStateProvider {
        /**
          * Set the state.
         */
        "onScSetCheckoutFormState"?: (event: ScFormStateProviderCustomEvent<FormState>) => void;
    }
    interface ScFormatBytes {
        /**
          * Determines how to display the result, e.g. "100 bytes", "100 b", or "100b".
         */
        "display"?: 'long' | 'short' | 'narrow';
        /**
          * The locale to use when formatting the number.
         */
        "locale"?: string;
        /**
          * The unit to display.
         */
        "unit"?: 'byte' | 'bit';
        /**
          * The number to format in bytes.
         */
        "value"?: number;
    }
    interface ScFormatDate {
        /**
          * The date/time to format. If not set, the current date and time will be used.
         */
        "date"?: Date | string | number;
        /**
          * The format for displaying the day.
         */
        "day"?: 'numeric' | '2-digit';
        /**
          * The format for displaying the era.
         */
        "era"?: 'narrow' | 'short' | 'long';
        /**
          * The format for displaying the hour.
         */
        "hour"?: 'numeric' | '2-digit';
        /**
          * When set, 24 hour time will always be used.
         */
        "hourFormat"?: 'auto' | '12' | '24';
        /**
          * The locale to use when formatting the date/time.
         */
        "locale"?: string;
        /**
          * The format for displaying the minute.
         */
        "minute"?: 'numeric' | '2-digit';
        /**
          * The format for displaying the month.
         */
        "month"?: 'numeric' | '2-digit' | 'narrow' | 'short' | 'long';
        /**
          * The format for displaying the second.
         */
        "second"?: 'numeric' | '2-digit';
        /**
          * The time zone to express the time in.
         */
        "timeZone"?: string;
        /**
          * The format for displaying the time.
         */
        "timeZoneName"?: 'short' | 'long';
        "type"?: 'timestamp' | 'date';
        /**
          * The format for displaying the weekday.
         */
        "weekday"?: 'narrow' | 'short' | 'long';
        /**
          * The format for displaying the year.
         */
        "year"?: 'numeric' | '2-digit';
    }
    interface ScFormatInterval {
        "every"?: string;
        "fallback"?: string;
        "interval"?: string;
        /**
          * The number to format.
         */
        "value"?: number;
    }
    interface ScFormatNumber {
        /**
          * The currency to use when formatting. Must be an ISO 4217 currency code such as `USD` or `EUR`.
         */
        "currency"?: string;
        /**
          * How to display the currency.
         */
        "currencyDisplay"?: 'symbol' | 'narrowSymbol' | 'code' | 'name';
        /**
          * The locale to use when formatting the number.
         */
        "locale"?: string;
        /**
          * The maximum number of fraction digits to use. Possible values are 0 - 20.
         */
        "maximumFractionDigits"?: number;
        /**
          * The maximum number of significant digits to use,. Possible values are 1 - 21.
         */
        "maximumSignificantDigits"?: number;
        /**
          * The minimum number of fraction digits to use. Possible values are 0 - 20.
         */
        "minimumFractionDigits"?: number;
        /**
          * The minimum number of integer digits to use. Possible values are 1 - 21.
         */
        "minimumIntegerDigits"?: number;
        /**
          * The minimum number of significant digits to use. Possible values are 1 - 21.
         */
        "minimumSignificantDigits"?: number;
        "noConvert"?: boolean;
        /**
          * Turns off grouping separators.
         */
        "noGrouping"?: boolean;
        /**
          * The formatting style to use.
         */
        "type"?: 'currency' | 'decimal' | 'percent';
        /**
          * The number to format.
         */
        "value"?: number;
    }
    interface ScHeading {
        "size"?: 'small' | 'medium' | 'large';
    }
    interface ScIcon {
        /**
          * An alternative description to use for accessibility. If omitted, the name or src will be used to generate it.
         */
        "label"?: string;
        /**
          * The name of a registered custom icon library.
         */
        "library"?: string;
        /**
          * The name of the icon to draw.
         */
        "name"?: string;
        /**
          * Emitted when the icon failed to load.
         */
        "onScError"?: (event: ScIconCustomEvent<{ status: number }>) => void;
        /**
          * Emitted when the icon has loaded.
         */
        "onScLoad"?: (event: ScIconCustomEvent<void>) => void;
        /**
          * An external URL of an SVG file.
         */
        "src"?: string;
    }
    interface ScInput {
        /**
          * The input's autocomplete attribute.
         */
        "autocomplete"?: string;
        /**
          * The input's autocorrect attribute.
         */
        "autocorrect"?: string;
        /**
          * The input's autofocus attribute.
         */
        "autofocus"?: boolean;
        /**
          * Adds a clear button when the input is populated.
         */
        "clearable"?: boolean;
        /**
          * Disables the input.
         */
        "disabled"?: boolean;
        /**
          * Inputs focus
         */
        "hasFocus"?: boolean;
        /**
          * The input's help text.
         */
        "help"?: string;
        /**
          * Hidden
         */
        "hidden"?: boolean;
        /**
          * The input's inputmode attribute.
         */
        "inputmode"?: 'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url';
        /**
          * This will be true when the control is in an invalid state. Validity is determined by props such as `type`, `required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.
         */
        "invalid"?: boolean;
        /**
          * The input's label.
         */
        "label"?: string;
        /**
          * The input's maximum value.
         */
        "max"?: number | string;
        /**
          * The maximum length of input that will be considered valid.
         */
        "maxlength"?: number;
        /**
          * The input's minimum value.
         */
        "min"?: number | string;
        /**
          * The minimum length of input that will be considered valid.
         */
        "minlength"?: number;
        /**
          * The input's name attribute.
         */
        "name"?: string;
        /**
          * Emitted when the control loses focus.
         */
        "onScBlur"?: (event: ScInputCustomEvent<void>) => void;
        /**
          * Emitted when the control's value changes.
         */
        "onScChange"?: (event: ScInputCustomEvent<void>) => void;
        /**
          * Emitted when the clear button is activated.
         */
        "onScClear"?: (event: ScInputCustomEvent<void>) => void;
        /**
          * Emitted when the control gains focus.
         */
        "onScFocus"?: (event: ScInputCustomEvent<void>) => void;
        /**
          * Emitted when the control receives input.
         */
        "onScInput"?: (event: ScInputCustomEvent<void>) => void;
        /**
          * A pattern to validate input against.
         */
        "pattern"?: string;
        /**
          * Draws a pill-style input with rounded edges.
         */
        "pill"?: boolean;
        /**
          * The input's placeholder text.
         */
        "placeholder"?: string;
        /**
          * Makes the input readonly.
         */
        "readonly"?: boolean;
        /**
          * Makes the input a required field.
         */
        "required"?: boolean;
        /**
          * Should we show the label
         */
        "showLabel"?: boolean;
        /**
          * The input's size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * Enables spell checking on the input.
         */
        "spellcheck"?: boolean;
        "squared"?: boolean;
        "squaredBottom"?: boolean;
        "squaredLeft"?: boolean;
        "squaredRight"?: boolean;
        "squaredTop"?: boolean;
        /**
          * The input's step attribute.
         */
        "step"?: number;
        /**
          * Adds a password toggle button to password inputs.
         */
        "togglePassword"?: boolean;
        /**
          * The input's type.
         */
        "type"?: 'email' | 'number' | 'password' | 'search' | 'tel' | 'text' | 'url' | 'hidden';
        /**
          * The input's value attribute.
         */
        "value"?: string;
    }
    interface ScInvoicesList {
        "allLink"?: string;
        "heading"?: string;
        /**
          * Query to fetch invoices
         */
        "query"?: {
    page: number;
    per_page: number;
  };
    }
    interface ScLicensesList {
        "activations"?: Activation[];
        "copied"?: boolean;
        "heading"?: string;
        "licenses"?: License[];
    }
    interface ScLineItem {
        /**
          * Currency symbol
         */
        "currency"?: string;
        /**
          * Price of the item
         */
        "price"?: string;
    }
    interface ScLineItemBump {
        "label"?: string;
        "loading"?: boolean;
        "order"?: Checkout;
    }
    interface ScLineItemTax {
        "loading"?: boolean;
        "order"?: Checkout;
    }
    interface ScLineItemTotal {
        "loading"?: boolean;
        "order"?: Checkout;
        "size"?: 'large' | 'medium';
        "total"?: 'total' | 'subtotal';
    }
    interface ScLineItems {
        "busy"?: boolean;
        "editLineItems"?: boolean;
        "editable"?: boolean;
        "lockedChoices"?: Array<PriceChoice>;
        /**
          * Remove the line item.
         */
        "onScRemoveLineItem"?: (event: ScLineItemsCustomEvent<LineItemData>) => void;
        /**
          * Update the line item.
         */
        "onScUpdateLineItem"?: (event: ScLineItemsCustomEvent<LineItemData>) => void;
        "order"?: Checkout;
        "prices"?: Prices;
        "removable"?: boolean;
        "removeLineItems"?: boolean;
    }
    interface ScLineItemsProvider {
        /**
          * Update line items event
         */
        "onScUpdateLineItems"?: (event: ScLineItemsProviderCustomEvent<Array<LineItemData>>) => void;
        /**
          * Order Object
         */
        "order"?: Checkout;
    }
    interface ScLoginForm {
    }
    interface ScLoginProvider {
        /**
          * Is the user logged in.
         */
        "loggedIn"?: boolean;
        "onScSetCustomer"?: (event: ScLoginProviderCustomEvent<{ email: string; name?: string }>) => void;
        "onScSetLoggedIn"?: (event: ScLoginProviderCustomEvent<boolean>) => void;
        "order"?: Checkout;
    }
    interface ScMenu {
        "onScSelect"?: (event: ScMenuCustomEvent<{ item: HTMLScMenuItemElement }>) => void;
    }
    interface ScMenuDivider {
    }
    interface ScMenuItem {
        /**
          * Draws the item in a checked state.
         */
        "checked"?: boolean;
        /**
          * Draws the menu item in a disabled state.
         */
        "disabled"?: boolean;
        /**
          * Optional link to follow.
         */
        "href"?: string;
        /**
          * A unique value to store in the menu item. This can be used as a way to identify menu items when selected.
         */
        "value"?: string;
    }
    interface ScMenuLabel {
    }
    interface ScMollieAddMethod {
        "country"?: string;
        "currency"?: string;
        "customerId"?: string;
        "liveMode"?: boolean;
        "processorId"?: string;
        "successUrl"?: string;
    }
    interface ScOrder {
        "customerIds"?: string[];
        "heading"?: string;
        "orderId"?: string;
    }
    interface ScOrderBump {
        /**
          * The bump
         */
        "bump"?: Bump;
        /**
          * The checkout
         */
        "checkout"?: Checkout;
        /**
          * Add line item event
         */
        "onScAddLineItem"?: (event: ScOrderBumpCustomEvent<LineItemData>) => void;
        /**
          * Remove line item event
         */
        "onScRemoveLineItem"?: (event: ScOrderBumpCustomEvent<LineItemData>) => void;
        /**
          * Should we show the controls
         */
        "showControl"?: boolean;
    }
    interface ScOrderBumps {
        "bumps"?: Bump[];
        "checkout"?: Checkout;
        "help"?: string;
        "label"?: string;
        "showControl"?: boolean;
    }
    interface ScOrderConfirmComponentsValidator {
        /**
          * The checkout
         */
        "checkout"?: Checkout;
    }
    interface ScOrderConfirmProvider {
        /**
          * Error event.
         */
        "onScError"?: (event: ScOrderConfirmProviderCustomEvent<{ message: string; code?: string; data?: any; additional_errors?: any } | {}>) => void;
        /**
          * The order is paid event.
         */
        "onScOrderPaid"?: (event: ScOrderConfirmProviderCustomEvent<Checkout>) => void;
        "onScSetState"?: (event: ScOrderConfirmProviderCustomEvent<string>) => void;
        /**
          * Success text for the form.
         */
        "successText"?: {
    title: string;
    description: string;
    button: string;
  };
        /**
          * Success url.
         */
        "successUrl"?: string;
    }
    interface ScOrderConfirmation {
        "order"?: Checkout;
    }
    interface ScOrderConfirmationCustomer {
        /**
          * The customer
         */
        "customer"?: Customer;
        /**
          * Error message.
         */
        "error"?: string;
        /**
          * The heading
         */
        "heading"?: string;
        /**
          * Is this loading?
         */
        "loading"?: boolean;
        /**
          * The Order
         */
        "order"?: Checkout;
    }
    interface ScOrderConfirmationDetails {
        "loading"?: boolean;
        "order"?: Order;
    }
    interface ScOrderConfirmationLineItems {
        "loading"?: boolean;
        "order"?: Checkout;
    }
    interface ScOrderConfirmationTotals {
        "order"?: Checkout;
    }
    interface ScOrderCouponForm {
        "busy"?: boolean;
        "buttonText"?: string;
        "collapsed"?: boolean;
        "error"?: any;
        "label"?: string;
        "loading"?: boolean;
        "onScApplyCoupon"?: (event: ScOrderCouponFormCustomEvent<string>) => void;
        "order"?: Checkout;
        "placeholder"?: string;
    }
    interface ScOrderDetail {
        "fallback"?: string;
        "label"?: string;
        "loading"?: boolean;
        "metaKey"?: string;
        "order"?: Checkout;
        "value"?: string;
    }
    interface ScOrderManualInstructions {
        "manualPaymentInstructions"?: string;
        "manualPaymentTitle"?: string;
    }
    interface ScOrderPassword {
        /**
          * The input's autofocus attribute.
         */
        "autofocus"?: boolean;
        /**
          * The input's password confirmation attribute.
         */
        "confirmation"?: boolean;
        /**
          * The input's confirmation help text.
         */
        "confirmationHelp"?: string;
        /**
          * The input's confirmation label text.
         */
        "confirmationLabel"?: string;
        /**
          * The input's confirmation placeholder text.
         */
        "confirmationPlaceholder"?: string;
        /**
          * Disables the input.
         */
        "disabled"?: boolean;
        /**
          * Does the email exist?
         */
        "emailExists"?: boolean;
        /**
          * The input's help text.
         */
        "help"?: string;
        /**
          * The input's label.
         */
        "label"?: string;
        "loggedIn"?: boolean;
        /**
          * Draws a pill-style input with rounded edges.
         */
        "pill"?: boolean;
        /**
          * The input's placeholder text.
         */
        "placeholder"?: string;
        /**
          * Makes the input readonly.
         */
        "readonly"?: boolean;
        /**
          * Makes the input a required field.
         */
        "required"?: boolean;
        /**
          * Should we show the label
         */
        "showLabel"?: boolean;
        /**
          * The input's size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The input's value attribute.
         */
        "value"?: string;
    }
    interface ScOrderShippingAddress {
        "cityPlaceholder"?: string;
        "countryPlaceholder"?: string;
        /**
          * Default country for address
         */
        "defaultCountry"?: string;
        /**
          * Show the full address
         */
        "full"?: boolean;
        /**
          * Label for the field.
         */
        "label"?: string;
        "line1Placeholder"?: string;
        "line2Placeholder"?: string;
        /**
          * Is this loading.
         */
        "loading"?: boolean;
        /**
          * Show the placeholder fields.
         */
        "namePlaceholder"?: string;
        /**
          * Make a request to update the order.
         */
        "onScUpdateOrder"?: (event: ScOrderShippingAddressCustomEvent<{
    data: Partial<Checkout>;
    options?: { silent?: boolean };
  }>) => void;
        /**
          * Placeholder values.
         */
        "placeholders"?: Partial<Address>;
        "postalCodePlaceholder"?: string;
        /**
          * Is this required (defaults to false)
         */
        "required"?: boolean;
        /**
          * Holds the customer's billing address
         */
        "shippingAddress"?: Address;
        /**
          * Is shipping enabled for this order?
         */
        "shippingEnabled"?: boolean;
        /**
          * Show the name field.
         */
        "showName"?: boolean;
        "statePlaceholder"?: string;
        /**
          * Tax enabled status of the order
         */
        "taxEnabled"?: boolean;
        /**
          * Tax status of the order
         */
        "taxStatus"?: TaxStatus;
    }
    interface ScOrderStatusBadge {
        /**
          * Makes the tag clearable.
         */
        "clearable"?: boolean;
        /**
          * Draws a pill-style tag with rounded edges.
         */
        "pill"?: boolean;
        /**
          * The tag's size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The tag's statux type.
         */
        "status"?: OrderStatus;
    }
    interface ScOrderSubmit {
        /**
          * Is the order busy
         */
        "busy"?: boolean;
        /**
          * Currency Code
         */
        "currencyCode"?: string;
        /**
          * Show a full-width button.
         */
        "full"?: boolean;
        /**
          * Icon to show.
         */
        "icon"?: string;
        /**
          * Is the order loading.
         */
        "loading"?: boolean;
        /**
          * Is this created in "test" mode
         */
        "mode"?: 'test' | 'live';
        /**
          * The current order.
         */
        "order"?: Checkout;
        /**
          * Is the order paying.
         */
        "paying"?: boolean;
        /**
          * The selected processor.
         */
        "processor"?: ProcessorName;
        /**
          * Keys and secrets for processors.
         */
        "processors"?: Processor[];
        /**
          * Show the secure notice
         */
        "secureNotice"?: boolean;
        /**
          * Secure
         */
        "secureNoticeText"?: string;
        /**
          * Show the total.
         */
        "showTotal"?: boolean;
        /**
          * The button's size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The button type.
         */
        "type"?: 'default' | 'primary' | 'success' | 'info' | 'warning' | 'danger' | 'text' | 'link';
    }
    interface ScOrderSummary {
        "busy"?: boolean;
        "closedText"?: string;
        "collapsed"?: boolean;
        "collapsedOnMobile"?: boolean;
        "collapsible"?: boolean;
        /**
          * Show the toggle
         */
        "onScHide"?: (event: ScOrderSummaryCustomEvent<void>) => void;
        /**
          * Show the toggle
         */
        "onScShow"?: (event: ScOrderSummaryCustomEvent<void>) => void;
        "openText"?: string;
        "order"?: Checkout;
    }
    interface ScOrderTaxIdInput {
        /**
          * AU zone label
         */
        "auAbnLabel"?: string;
        /**
          * Is this busy
         */
        "busy"?: boolean;
        /**
          * GST zone label
         */
        "caGstLabel"?: string;
        /**
          * EU zone label
         */
        "euVatLabel"?: string;
        /**
          * UK zone label
         */
        "gbVatLabel"?: string;
        /**
          * Error event
         */
        "onScError"?: (event: ScOrderTaxIdInputCustomEvent<ResponseError>) => void;
        /**
          * Make a request to update the order.
         */
        "onScUpdateOrder"?: (event: ScOrderTaxIdInputCustomEvent<{
    data: Partial<Checkout>;
    options?: { silent?: boolean };
  }>) => void;
        /**
          * The order
         */
        "order"?: Partial<Checkout>;
        /**
          * Other zones label
         */
        "otherLabel"?: string;
        /**
          * Force show the field.
         */
        "show"?: boolean;
        /**
          * Tax identifier
         */
        "taxIdentifier"?: TaxIdentifier;
        /**
          * The tax protocol.
         */
        "taxProtocol"?: TaxProtocol;
    }
    interface ScOrdersList {
        "allLink"?: string;
        "heading"?: string;
        "isCustomer"?: boolean;
        /**
          * Query to fetch orders
         */
        "query"?: {
    page: number;
    per_page: number;
  };
    }
    interface ScPagination {
        "onScNextPage"?: (event: ScPaginationCustomEvent<void>) => void;
        "onScPrevPage"?: (event: ScPaginationCustomEvent<void>) => void;
        "page"?: number;
        "perPage"?: number;
        "total"?: number;
        "totalPages"?: number;
        "totalShowing"?: number;
    }
    interface ScPasswordNag {
        "open"?: boolean;
        /**
          * The success url.
         */
        "successUrl"?: string;
        /**
          * The type of alert.
         */
        "type"?: 'primary' | 'success' | 'info' | 'warning' | 'danger';
    }
    interface ScPayment {
        /**
          * Disabled processor types
         */
        "disabledProcessorTypes"?: string[];
        /**
          * Hide the test mode badge
         */
        "hideTestModeBadge"?: boolean;
        /**
          * The input's label.
         */
        "label"?: string;
        "secureNotice"?: string;
        "stripePaymentElement"?: boolean;
    }
    interface ScPaymentMethod {
        "externalLink"?: string;
        "externalLinkTooltipText"?: string;
        "full"?: boolean;
        "paymentMethod"?: PaymentMethod;
    }
    interface ScPaymentMethodChoice {
        /**
          * Should we show this in a card?
         */
        "card"?: boolean;
        /**
          * Is this a manual processor
         */
        "isManual"?: boolean;
        /**
          * The method id
         */
        "methodId"?: string;
        /**
          * The processor ID
         */
        "processorId"?: string;
    }
    interface ScPaymentMethodsList {
        /**
          * The heading
         */
        "heading"?: string;
        /**
          * Is this a customer
         */
        "isCustomer"?: boolean;
        /**
          * Query to fetch paymentMethods
         */
        "query"?: object;
    }
    interface ScPaymentSelected {
        "iconName"?: string;
        "label"?: string;
    }
    interface ScPaypalAddMethod {
        "currency"?: string;
        "customerId"?: string;
        "liveMode"?: boolean;
        "successUrl"?: string;
    }
    interface ScPaypalButtons {
        /**
          * Is this busy?
         */
        "busy"?: boolean;
        /**
          * Buttons to render
         */
        "buttons"?: string[];
        /**
          * Client id for the script.
         */
        "clientId"?: string;
        /**
          * Button color.
         */
        "color"?: 'gold' | 'blue' | 'silver' | 'black' | 'white';
        /**
          * Label for the button.
         */
        "label"?: 'paypal' | 'checkout' | 'buynow' | 'pay' | 'installment';
        /**
          * The merchant id for paypal.
         */
        "merchantId"?: string;
        /**
          * Merchant initiated billing enabled.
         */
        "merchantInitiated"?: boolean;
        /**
          * Test or live mode.
         */
        "mode"?: 'test' | 'live';
        /**
          * Emit an error
         */
        "onScError"?: (event: ScPaypalButtonsCustomEvent<object>) => void;
        "onScPaid"?: (event: ScPaypalButtonsCustomEvent<void>) => void;
        /**
          * Set the state machine
         */
        "onScSetState"?: (event: ScPaypalButtonsCustomEvent<string>) => void;
        /**
          * The order.
         */
        "order"?: Checkout;
    }
    interface ScPremiumTag {
        /**
          * The tag's size.
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface ScPriceChoice {
        /**
          * Is this blank?
         */
        "blank"?: boolean;
        /**
          * Is this checked by default
         */
        "checked"?: boolean;
        /**
          * Label for the choice.
         */
        "description"?: string;
        /**
          * Errors from response
         */
        "error"?: ResponseError;
        /**
          * Is this an ad-hoc price choice
         */
        "isAdHoc"?: Boolean;
        /**
          * Label for the choice.
         */
        "label"?: string;
        /**
          * Is this loading
         */
        "loading"?: boolean;
        /**
          * Add entities
         */
        "onScAddEntities"?: (event: ScPriceChoiceCustomEvent<any>) => void;
        /**
          * Toggle line item event
         */
        "onScRemoveLineItem"?: (event: ScPriceChoiceCustomEvent<LineItemData>) => void;
        /**
          * Toggle line item event
         */
        "onScUpdateLineItem"?: (event: ScPriceChoiceCustomEvent<LineItemData>) => void;
        /**
          * Session
         */
        "order"?: Checkout;
        /**
          * Stores the price
         */
        "price"?: Price;
        /**
          * Id of the price.
         */
        "priceId"?: string;
        /**
          * Price entities
         */
        "prices"?: Prices;
        /**
          * Product entity
         */
        "products"?: Products;
        /**
          * Default quantity
         */
        "quantity"?: number;
        /**
          * Show the radio/checkbox control
         */
        "showControl"?: boolean;
        /**
          * Show the label
         */
        "showLabel"?: boolean;
        /**
          * Show the price amount
         */
        "showPrice"?: boolean;
        /**
          * Choice Type
         */
        "type"?: 'checkbox' | 'radio';
    }
    interface ScPriceChoices {
        /**
          * Number of columns
         */
        "columns"?: number;
        /**
          * Selector label
         */
        "label"?: string;
        /**
          * Toggle line item event
         */
        "onScRemoveLineItem"?: (event: ScPriceChoicesCustomEvent<LineItemData>) => void;
        /**
          * Toggle line item event
         */
        "onScUpdateLineItem"?: (event: ScPriceChoicesCustomEvent<LineItemData>) => void;
        /**
          * Session
         */
        "order"?: Checkout;
        /**
          * Required by default
         */
        "required"?: boolean;
    }
    interface ScPriceInput {
        /**
          * The input's autofocus attribute.
         */
        "autofocus"?: boolean;
        /**
          * Adds a clear button when the input is populated.
         */
        "clearable"?: boolean;
        /**
          * 3 letter currency code for input
         */
        "currencyCode"?: string;
        /**
          * Disables the input.
         */
        "disabled"?: boolean;
        /**
          * Inputs focus
         */
        "hasFocus"?: boolean;
        /**
          * The input's help text.
         */
        "help"?: string;
        /**
          * This will be true when the control is in an invalid state. Validity is determined by props such as `type`, `required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.
         */
        "invalid"?: boolean;
        /**
          * The input's label.
         */
        "label"?: string;
        /**
          * The input's maximum value.
         */
        "max"?: number;
        /**
          * The maximum length of input that will be considered valid.
         */
        "maxlength"?: number;
        /**
          * The input's minimum value.
         */
        "min"?: number;
        /**
          * The minimum length of input that will be considered valid.
         */
        "minlength"?: number;
        /**
          * The input's name attribute.
         */
        "name"?: string;
        /**
          * Emitted when the control loses focus.
         */
        "onScBlur"?: (event: ScPriceInputCustomEvent<void>) => void;
        /**
          * Emitted when the control's value changes.
         */
        "onScChange"?: (event: ScPriceInputCustomEvent<void>) => void;
        /**
          * Emitted when the control gains focus.
         */
        "onScFocus"?: (event: ScPriceInputCustomEvent<void>) => void;
        /**
          * Emitted when the control's value changes.
         */
        "onScInput"?: (event: ScPriceInputCustomEvent<void>) => void;
        /**
          * Draws a pill-style input with rounded edges.
         */
        "pill"?: boolean;
        /**
          * The input's placeholder text.
         */
        "placeholder"?: string;
        /**
          * Makes the input readonly.
         */
        "readonly"?: boolean;
        /**
          * Makes the input a required field.
         */
        "required"?: boolean;
        /**
          * Show the currency code with the input
         */
        "showCode"?: boolean;
        /**
          * Should we show the label
         */
        "showLabel"?: boolean;
        /**
          * The input's size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The input's value attribute.
         */
        "value"?: string;
    }
    interface ScPriceRange {
        /**
          * The array of price objects
         */
        "prices"?: Price[];
    }
    interface ScProductLineItem {
        /**
          * Product monetary amount
         */
        "amount"?: number;
        /**
          * Currency for the product
         */
        "currency"?: string;
        /**
          * Can we select the quantity
         */
        "editable"?: boolean;
        /**
          * Product line item fees.
         */
        "fees"?: Fee[];
        /**
          * Url for the product image
         */
        "imageUrl"?: string;
        /**
          * Recurring interval (i.e. monthly, once, etc.)
         */
        "interval"?: string;
        /**
          * The max allowed.
         */
        "max"?: number;
        /**
          * Product name
         */
        "name"?: string;
        /**
          * Emitted when the quantity changes.
         */
        "onScRemove"?: (event: ScProductLineItemCustomEvent<void>) => void;
        /**
          * Emitted when the quantity changes.
         */
        "onScUpdateQuantity"?: (event: ScProductLineItemCustomEvent<number>) => void;
        /**
          * Quantity
         */
        "quantity"?: number;
        /**
          * Is the line item removable
         */
        "removable"?: boolean;
        /**
          * The line item scratch amount
         */
        "scratchAmount"?: number;
        /**
          * Is the setup fee not included in the free trial?
         */
        "setupFeeTrialEnabled"?: boolean;
        /**
          * Trial duration days
         */
        "trialDurationDays"?: number;
    }
    interface ScProductSelectedPrice {
        /**
          * Toggle line item event
         */
        "onScUpdateLineItem"?: (event: ScProductSelectedPriceCustomEvent<LineItemData1>) => void;
        /**
          * The product id.
         */
        "productId"?: string;
    }
    interface ScProse {
    }
    interface ScProvider {
        "STENCIL_CONTEXT"?: { [key: string]: any };
        "onMountConsumer"?: (event: ScProviderCustomEvent<any>) => void;
    }
    interface ScPurchaseDownloadsList {
        "allLink"?: string;
        "busy"?: boolean;
        "error"?: string;
        "heading"?: string;
        "loading"?: boolean;
        "purchases"?: Array<Purchase>;
        "requestNonce"?: string;
    }
    interface ScQuantitySelect {
        "clickEl"?: HTMLElement;
        "disabled"?: boolean;
        /**
          * Inputs focus
         */
        "hasFocus"?: boolean;
        "max"?: number;
        "min"?: number;
        /**
          * Emitted when the control loses focus.
         */
        "onScBlur"?: (event: ScQuantitySelectCustomEvent<void>) => void;
        "onScChange"?: (event: ScQuantitySelectCustomEvent<number>) => void;
        /**
          * Emitted when the control gains focus.
         */
        "onScFocus"?: (event: ScQuantitySelectCustomEvent<void>) => void;
        /**
          * Emitted when the control receives input.
         */
        "onScInput"?: (event: ScQuantitySelectCustomEvent<number>) => void;
        "quantity"?: number;
    }
    interface ScRadio {
        /**
          * Draws the radio in a checked state.
         */
        "checked"?: boolean;
        /**
          * Is the radio disabled
         */
        "disabled"?: boolean;
        /**
          * This will be true as a workaround in the block editor to focus on the content.
         */
        "edit"?: boolean;
        /**
          * This will be true when the control is in an invalid state. Validity is determined by the `required` prop.
         */
        "invalid"?: boolean;
        /**
          * The radios name attribute
         */
        "name"?: string;
        /**
          * Emitted when the control loses focus.
         */
        "onScBlur"?: (event: ScRadioCustomEvent<void>) => void;
        /**
          * Emitted when the control's checked state changes.
         */
        "onScChange"?: (event: ScRadioCustomEvent<void>) => void;
        /**
          * Emitted when the control gains focus.
         */
        "onScFocus"?: (event: ScRadioCustomEvent<void>) => void;
        /**
          * Is this required
         */
        "required"?: boolean;
        /**
          * The radios value
         */
        "value"?: string;
    }
    interface ScRadioGroup {
        /**
          * This will be true when the control is in an invalid state. Validity is determined by props such as `type`, `required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.
         */
        "invalid"?: boolean;
        /**
          * The radio group label. Required for proper accessibility.
         */
        "label"?: string;
        /**
          * Is one of these items required.
         */
        "required"?: boolean;
        /**
          * The selected value of the control.
         */
        "value"?: string;
    }
    interface ScRichText {
        /**
          * Disables the textarea.
         */
        "disabled"?: boolean;
        /**
          * The textarea's help text. Alternatively, you can use the help-text slot.
         */
        "help"?: string;
        /**
          * The textarea's label. Alternatively, you can use the label slot.
         */
        "label"?: string;
        /**
          * The max length.
         */
        "maxlength"?: number;
        /**
          * The textarea's name attribute.
         */
        "name"?: string;
        "onScBlur"?: (event: ScRichTextCustomEvent<void>) => void;
        "onScChange"?: (event: ScRichTextCustomEvent<void>) => void;
        "onScFocus"?: (event: ScRichTextCustomEvent<void>) => void;
        "onScInput"?: (event: ScRichTextCustomEvent<void>) => void;
        /**
          * The textarea's placeholder text.
         */
        "placeholder"?: string;
        /**
          * Makes the textarea readonly.
         */
        "readonly"?: boolean;
        /**
          * Makes the textarea a required field.
         */
        "required"?: boolean;
        /**
          * Should we show the label
         */
        "showLabel"?: boolean;
        /**
          * The textarea's size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The textarea's value attribute.
         */
        "value"?: string;
    }
    interface ScSecureNotice {
    }
    interface ScSelect {
        /**
          * The input's autocomplete attribute.
         */
        "autocomplete"?: string;
        /**
          * The input's value attribute.
         */
        "choices"?: Array<ChoiceItem>;
        "disabled"?: boolean;
        /**
          * Some help text for the input.
         */
        "help"?: string;
        "hoist"?: boolean;
        /**
          * This will be true when the control is in an invalid state. Validity is determined by props such as `type`, `required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.
         */
        "invalid"?: boolean;
        /**
          * The input's label.
         */
        "label"?: string;
        "loading"?: boolean;
        /**
          * The input's name attribute.
         */
        "name"?: string;
        /**
          * Emitted when the control loses focus.
         */
        "onScBlur"?: (event: ScSelectCustomEvent<void>) => void;
        /**
          * Emitted when the control's value changes.
         */
        "onScChange"?: (event: ScSelectCustomEvent<void>) => void;
        /**
          * Emitted whent the components search query changes
         */
        "onScClose"?: (event: ScSelectCustomEvent<string>) => void;
        /**
          * Emitted when the control gains focus.
         */
        "onScFocus"?: (event: ScSelectCustomEvent<void>) => void;
        /**
          * Emitted whent the components search query changes
         */
        "onScOpen"?: (event: ScSelectCustomEvent<string>) => void;
        /**
          * Emitted when the list scrolls to the end.
         */
        "onScScrollEnd"?: (event: ScSelectCustomEvent<void>) => void;
        /**
          * Emitted whent the components search query changes
         */
        "onScSearch"?: (event: ScSelectCustomEvent<string>) => void;
        /**
          * Is this open
         */
        "open"?: boolean;
        /**
          * Placeholder for no value
         */
        "placeholder"?: string;
        "position"?: 'bottom-left' | 'bottom-right';
        "required"?: boolean;
        /**
          * Is search enabled?
         */
        "search"?: boolean;
        /**
          * Placeholder for search
         */
        "searchPlaceholder"?: string;
        "showParentLabel"?: boolean;
        /**
          * The input's size.
         */
        "size"?: 'small' | 'medium' | 'large';
        "squared"?: boolean;
        "squaredBottom"?: boolean;
        "squaredLeft"?: boolean;
        "squaredRight"?: boolean;
        "squaredTop"?: boolean;
        /**
          * Can we unselect items.
         */
        "unselect"?: boolean;
        /**
          * The input's value attribute.
         */
        "value"?: string;
    }
    interface ScSessionProvider {
        /**
          * Error event
         */
        "onScError"?: (event: ScSessionProviderCustomEvent<{ message: string; code?: string; data?: any; additional_errors?: any } | {}>) => void;
        "onScPaid"?: (event: ScSessionProviderCustomEvent<void>) => void;
        /**
          * Set the state
         */
        "onScSetState"?: (event: ScSessionProviderCustomEvent<FormStateSetter>) => void;
        /**
          * Update line items event
         */
        "onScUpdateDraftState"?: (event: ScSessionProviderCustomEvent<Checkout>) => void;
        /**
          * Update line items event
         */
        "onScUpdateOrderState"?: (event: ScSessionProviderCustomEvent<Checkout>) => void;
        /**
          * Should we persist the session.
         */
        "persist"?: boolean;
        /**
          * An array of prices to pre-fill in the form.
         */
        "prices"?: Array<PriceChoice>;
    }
    interface ScSkeleton {
        /**
          * Animation effect
         */
        "effect"?: 'pulse' | 'sheen' | 'none';
    }
    interface ScSpacing {
    }
    interface ScSpinner {
    }
    interface ScStackedList {
    }
    interface ScStackedListRow {
        "href"?: string;
        "mobileSize"?: number;
        "target"?: string;
    }
    interface ScStripeAddMethod {
        "customerId"?: string;
        "liveMode"?: boolean;
        "successUrl"?: string;
    }
    interface ScStripeElement {
        /**
          * Whether this field is disabled
         */
        "disabled"?: boolean;
        /**
          * The form state
         */
        "formState"?: FormState;
        /**
          * Inputs focus
         */
        "hasFocus"?: boolean;
        /**
          * The input's label. Alternatively, you can use the label slot.
         */
        "label"?: string;
        /**
          * Mode for the payment
         */
        "mode"?: 'live' | 'test';
        "onScPaid"?: (event: ScStripeElementCustomEvent<void>) => void;
        "onScPayError"?: (event: ScStripeElementCustomEvent<any>) => void;
        /**
          * Set the state
         */
        "onScSetState"?: (event: ScStripeElementCustomEvent<FormStateSetter>) => void;
        /**
          * The checkout session object for finalizing intents
         */
        "order"?: Checkout;
        /**
          * The input's help text. Alternatively, you can use the help-text slot.
         */
        "secureText"?: string;
        /**
          * The selected processor id
         */
        "selectedProcessorId"?: ProcessorName;
        /**
          * Should we show the label
         */
        "showLabel"?: boolean;
        /**
          * The input's size.
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface ScStripePaymentElement {
        /**
          * Should we collect an address?
         */
        "address"?: boolean;
        /**
          * The current form state.
         */
        "formState"?: FormState;
        /**
          * The order/invoice was paid for.
         */
        "onScPaid"?: (event: ScStripePaymentElementCustomEvent<void>) => void;
        /**
          * There was a payment error.
         */
        "onScPayError"?: (event: ScStripePaymentElementCustomEvent<any>) => void;
        /**
          * Set the state
         */
        "onScSetState"?: (event: ScStripePaymentElementCustomEvent<FormStateSetter>) => void;
        /**
          * Order to watch
         */
        "order"?: Checkout;
        /**
          * The selected processor name.
         */
        "selectedProcessorId"?: ProcessorName;
        /**
          * The Payment Intent
         */
        "stripePaymentIntent"?: PaymentIntent;
        /**
          * Success url to redirect.
         */
        "successUrl"?: string;
    }
    interface ScStripePaymentRequest {
        /**
          * Amount
         */
        "amount"?: number;
        /**
          * Country
         */
        "country"?: string;
        /**
          * Currency
         */
        "currencyCode"?: string;
        /**
          * Is this in debug mode.
         */
        "debug"?: boolean;
        "error"?: ResponseError | null;
        /**
          * This is required to validate the form on the server
         */
        "formId"?: number | string;
        /**
          * Label
         */
        "label"?: string;
        "onScFormSubmit"?: (event: ScStripePaymentRequestCustomEvent<any>) => void;
        "onScPaid"?: (event: ScStripePaymentRequestCustomEvent<void>) => void;
        "onScPayError"?: (event: ScStripePaymentRequestCustomEvent<any>) => void;
        "onScPaymentRequestLoaded"?: (event: ScStripePaymentRequestCustomEvent<boolean>) => void;
        "onScSetState"?: (event: ScStripePaymentRequestCustomEvent<string>) => void;
        "onScUpdateOrderState"?: (event: ScStripePaymentRequestCustomEvent<any>) => void;
        /**
          * Checkout Session
         */
        "order"?: Checkout;
        "paymentMethod"?: string;
        "prices"?: Prices;
        /**
          * Stripe publishable key
         */
        "publishableKey"?: string;
        /**
          * Your stripe connected account id.
         */
        "stripeAccountId"?: string;
        /**
          * Payment request theme
         */
        "theme"?: string;
    }
    interface ScSubscription {
        "heading"?: string;
        "protocol"?: SubscriptionProtocol;
        "query"?: object;
        "showCancel"?: boolean;
        "subscription"?: Subscription;
        /**
          * Customer id to fetch subscriptions
         */
        "subscriptionId"?: string;
    }
    interface ScSubscriptionAdHocConfirm {
        "heading"?: string;
        "price"?: Price;
    }
    interface ScSubscriptionCancel {
        "backUrl"?: string;
        "comment"?: string;
        "heading"?: string;
        "onScAbandon"?: (event: ScSubscriptionCancelCustomEvent<void>) => void;
        "onScCancelled"?: (event: ScSubscriptionCancelCustomEvent<void>) => void;
        "protocol"?: SubscriptionProtocol;
        "reason"?: CancellationReason;
        "subscription"?: Subscription;
        "successUrl"?: string;
    }
    interface ScSubscriptionDetails {
        "hideRenewalText"?: boolean;
        "pendingPrice"?: Price;
        "subscription"?: Subscription;
    }
    interface ScSubscriptionNextPayment {
        "subscription"?: Subscription;
    }
    interface ScSubscriptionPayment {
        "backUrl"?: string;
        "customerIds"?: Array<string>;
        "paymentMethods"?: Array<PaymentMethod>;
        "subscription"?: Subscription;
        "subscriptionId"?: string;
        "successUrl"?: string;
    }
    interface ScSubscriptionPaymentMethod {
        /**
          * The heading
         */
        "heading"?: string;
        /**
          * The subscription
         */
        "subscription"?: Subscription;
    }
    interface ScSubscriptionStatusBadge {
        /**
          * Makes the tag clearable.
         */
        "clearable"?: boolean;
        /**
          * Draws a pill-style tag with rounded edges.
         */
        "pill"?: boolean;
        /**
          * The tag's size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * Subscription status
         */
        "status"?: SubscriptionStatus;
        /**
          * The tag's status type.
         */
        "subscription"?: Subscription;
    }
    interface ScSubscriptionSwitch {
        "filterAbove"?: number;
        "heading"?: string;
        "productGroupId"?: ProductGroup;
        "productId"?: string;
        /**
          * Customer id to fetch subscriptions
         */
        "query"?: object;
        "subscription"?: Subscription;
    }
    interface ScSubscriptionsList {
        "allLink"?: string;
        "cancelBehavior"?: 'period_end' | 'immediate';
        "heading"?: string;
        "isCustomer"?: boolean;
        /**
          * Customer id to fetch subscriptions
         */
        "query"?: {
    page: number;
    per_page: number;
  };
    }
    interface ScSwitch {
        /**
          * Draws the switch in a checked state.
         */
        "checked"?: boolean;
        /**
          * Disables the switch.
         */
        "disabled"?: boolean;
        /**
          * This will be true as a workaround in the block editor to focus on the content.
         */
        "edit"?: boolean;
        /**
          * This will be true when the control is in an invalid state. Validity is determined by the `required` prop.
         */
        "invalid"?: boolean;
        /**
          * The switch's name attribute.
         */
        "name"?: string;
        /**
          * Emitted when the control loses focus.
         */
        "onScBlur"?: (event: ScSwitchCustomEvent<void>) => void;
        /**
          * Emitted when the control's checked state changes.
         */
        "onScChange"?: (event: ScSwitchCustomEvent<void>) => void;
        /**
          * Emitted when the control gains focus.
         */
        "onScFocus"?: (event: ScSwitchCustomEvent<void>) => void;
        /**
          * Makes the switch a required field.
         */
        "required"?: boolean;
        "reversed"?: boolean;
        /**
          * The switch's value attribute.
         */
        "value"?: string;
    }
    interface ScTab {
        /**
          * Draws the tab in an active state.
         */
        "active"?: boolean;
        "count"?: string;
        /**
          * Draws the tab in a disabled state.
         */
        "disabled"?: boolean;
        "href"?: string;
        /**
          * Close event
         */
        "onScClose"?: (event: ScTabCustomEvent<void>) => void;
        /**
          * The name of the tab panel the tab will control. The panel must be located in the same tab group.
         */
        "panel"?: string;
    }
    interface ScTabGroup {
        "onScTabHide"?: (event: ScTabGroupCustomEvent<string>) => void;
        "onScTabShow"?: (event: ScTabGroupCustomEvent<string>) => void;
    }
    interface ScTabPanel {
        /**
          * When true, the tab panel will be shown.
         */
        "active"?: boolean;
        /**
          * The tab panel's name.
         */
        "name"?: string;
    }
    interface ScTable {
    }
    interface ScTableCell {
    }
    interface ScTableHead {
    }
    interface ScTableRow {
        "href"?: string;
    }
    interface ScTag {
        /**
          * Makes the tag clearable.
         */
        "clearable"?: boolean;
        "onScClear"?: (event: ScTagCustomEvent<ScTag>) => void;
        /**
          * Draws a pill-style tag with rounded edges.
         */
        "pill"?: boolean;
        /**
          * The tag's size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The tag's type.
         */
        "type"?: 'primary' | 'success' | 'info' | 'warning' | 'danger' | 'default';
    }
    interface ScTaxIdInput {
        /**
          * AU zone label
         */
        "auAbnLabel"?: string;
        /**
          * GST zone label
         */
        "caGstLabel"?: string;
        /**
          * The country code.
         */
        "country"?: string;
        /**
          * EU zone label
         */
        "euVatLabel"?: string;
        /**
          * UK zone label
         */
        "gbVatLabel"?: string;
        /**
          * Help text.
         */
        "help"?: string;
        /**
          * Is this loading?
         */
        "loading"?: boolean;
        /**
          * Tax ID Number
         */
        "number"?: string;
        /**
          * Make a request to update the order.
         */
        "onScChange"?: (event: ScTaxIdInputCustomEvent<{ number: string; number_type: string }>) => void;
        /**
          * Make a request to update the order.
         */
        "onScInput"?: (event: ScTaxIdInputCustomEvent<Partial<{ number: string; number_type: string }>>) => void;
        /**
          * Change the Type
         */
        "onScInputType"?: (event: ScTaxIdInputCustomEvent<string>) => void;
        /**
          * Set the checkout state.
         */
        "onScSetState"?: (event: ScTaxIdInputCustomEvent<string>) => void;
        /**
          * Other zones label
         */
        "otherLabel"?: string;
        /**
          * Force show the field.
         */
        "show"?: boolean;
        /**
          * The status
         */
        "status"?: 'valid' | 'invalid' | 'unknown';
        /**
          * Type of tax id
         */
        "type"?: string;
    }
    interface ScText {
        "tag"?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'p';
        "truncate"?: boolean;
    }
    interface ScTextarea {
        /**
          * The textarea's autocapitalize attribute.
         */
        "autocapitalize"?: 'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters';
        /**
          * The textarea's autocomplete attribute.
         */
        "autocomplete"?: string;
        /**
          * The textarea's autocorrect attribute.
         */
        "autocorrect"?: string;
        /**
          * The textarea's autofocus attribute.
         */
        "autofocus"?: boolean;
        /**
          * Disables the textarea.
         */
        "disabled"?: boolean;
        /**
          * The input's enterkeyhint attribute. This can be used to customize the label or icon of the Enter key on virtual keyboards.
         */
        "enterkeyhint"?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';
        /**
          * Draws a filled textarea.
         */
        "filled"?: boolean;
        /**
          * The textarea's help text. Alternatively, you can use the help-text slot.
         */
        "help"?: string;
        /**
          * The textarea's inputmode attribute.
         */
        "inputmode"?: 'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url';
        /**
          * This will be true when the control is in an invalid state. Validity is determined by props such as `type`, `required`, `minlength`, and `maxlength` using the browser's constraint validation API.
         */
        "invalid"?: boolean;
        /**
          * The textarea's label. Alternatively, you can use the label slot.
         */
        "label"?: string;
        /**
          * The maximum length of input that will be considered valid.
         */
        "maxlength"?: number;
        /**
          * The minimum length of input that will be considered valid.
         */
        "minlength"?: number;
        /**
          * The textarea's name attribute.
         */
        "name"?: string;
        "onScBlur"?: (event: ScTextareaCustomEvent<void>) => void;
        "onScChange"?: (event: ScTextareaCustomEvent<void>) => void;
        "onScFocus"?: (event: ScTextareaCustomEvent<void>) => void;
        "onScInput"?: (event: ScTextareaCustomEvent<void>) => void;
        /**
          * The textarea's placeholder text.
         */
        "placeholder"?: string;
        /**
          * Makes the textarea readonly.
         */
        "readonly"?: boolean;
        /**
          * Makes the textarea a required field.
         */
        "required"?: boolean;
        /**
          * Controls how the textarea can be resized.
         */
        "resize"?: 'none' | 'vertical' | 'auto';
        /**
          * The number of rows to display by default.
         */
        "rows"?: number;
        /**
          * Should we show the label
         */
        "showLabel"?: boolean;
        /**
          * The textarea's size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * Enables spell checking on the textarea.
         */
        "spellcheck"?: boolean;
        /**
          * The textarea's value attribute.
         */
        "value"?: string;
    }
    interface ScToggle {
        /**
          * Is this a borderless toggle?
         */
        "borderless"?: boolean;
        /**
          * Are these collapsible?
         */
        "collapsible"?: boolean;
        /**
          * Disables the details so it can't be toggled.
         */
        "disabled"?: boolean;
        /**
          * Show the toggle
         */
        "onScHide"?: (event: ScToggleCustomEvent<void>) => void;
        /**
          * Show the toggle
         */
        "onScShow"?: (event: ScToggleCustomEvent<void>) => void;
        /**
          * Indicates whether or not the details is open. You can use this in lieu of the show/hide methods.
         */
        "open"?: boolean;
        /**
          * Is this a shady
         */
        "shady"?: boolean;
        /**
          * Should we show a radio control?
         */
        "showControl"?: boolean;
        /**
          * Should we show the arrow icon?
         */
        "showIcon"?: boolean;
        /**
          * The summary to show in the details header. If you need to display HTML, use the `summary` slot instead.
         */
        "summary"?: string;
    }
    interface ScToggles {
        /**
          * Should this function as an accordion?
         */
        "accordion"?: boolean;
        /**
          * Are these collapsible?
         */
        "collapsible"?: boolean;
        /**
          * Theme for the toggles
         */
        "theme"?: 'default' | 'container';
    }
    interface ScTooltip {
        /**
          * Freeze open or closed.
         */
        "freeze"?: boolean;
        /**
          * Open or not
         */
        "open"?: boolean;
        /**
          * The tooltip's padding.
         */
        "padding"?: number;
        /**
          * Tooltip text
         */
        "text"?: string;
        /**
          * The tooltip's type.
         */
        "type"?: 'primary' | 'success' | 'info' | 'warning' | 'danger' | 'text';
        /**
          * Tooltip fixed width
         */
        "width"?: string;
    }
    interface ScTotal {
        "order"?: Checkout;
        "total"?: 'total' | 'subtotal' | 'amount_due';
    }
    interface ScUpcomingInvoice {
        "adHocAmount"?: number;
        "discount"?: {
    promotion_code?: string;
    coupon?: string;
  };
        "heading"?: string;
        "payment_method"?: PaymentMethod;
        "priceId"?: string;
        "quantity"?: number;
        "quantityUpdatesEnabled"?: boolean;
        "subscriptionId"?: string;
        "successUrl"?: string;
    }
    interface ScUpgradeRequired {
        "required"?: boolean;
        /**
          * The tag's size.
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface ScWordpressPasswordEdit {
        "heading"?: string;
        "successUrl"?: string;
        "user"?: WordPressUser;
    }
    interface ScWordpressUser {
        "heading"?: string;
        "user"?: WordPressUser;
    }
    interface ScWordpressUserEdit {
        "heading"?: string;
        "successUrl"?: string;
        "user"?: WordPressUser;
    }
    interface IntrinsicElements {
        "sc-address": ScAddress;
        "sc-alert": ScAlert;
        "sc-avatar": ScAvatar;
        "sc-badge-notice": ScBadgeNotice;
        "sc-block-ui": ScBlockUi;
        "sc-breadcrumb": ScBreadcrumb;
        "sc-breadcrumbs": ScBreadcrumbs;
        "sc-button": ScButton;
        "sc-button-group": ScButtonGroup;
        "sc-cancel-dialog": ScCancelDialog;
        "sc-cancel-discount": ScCancelDiscount;
        "sc-cancel-survey": ScCancelSurvey;
        "sc-card": ScCard;
        "sc-cart": ScCart;
        "sc-cart-form": ScCartForm;
        "sc-cart-form-submit": ScCartFormSubmit;
        "sc-cart-header": ScCartHeader;
        "sc-cart-icon": ScCartIcon;
        "sc-cart-loader": ScCartLoader;
        "sc-cart-session-provider": ScCartSessionProvider;
        "sc-cart-submit": ScCartSubmit;
        "sc-cc-logo": ScCcLogo;
        "sc-charges-list": ScChargesList;
        "sc-checkbox": ScCheckbox;
        "sc-checkout": ScCheckout;
        "sc-checkout-form-errors": ScCheckoutFormErrors;
        "sc-checkout-mollie-payment": ScCheckoutMolliePayment;
        "sc-checkout-unsaved-changes-warning": ScCheckoutUnsavedChangesWarning;
        "sc-choice": ScChoice;
        "sc-choice-container": ScChoiceContainer;
        "sc-choices": ScChoices;
        "sc-column": ScColumn;
        "sc-columns": ScColumns;
        "sc-compact-address": ScCompactAddress;
        "sc-conditional-form": ScConditionalForm;
        "sc-consumer": ScConsumer;
        "sc-coupon-form": ScCouponForm;
        "sc-custom-order-price-input": ScCustomOrderPriceInput;
        "sc-customer-details": ScCustomerDetails;
        "sc-customer-edit": ScCustomerEdit;
        "sc-customer-email": ScCustomerEmail;
        "sc-customer-firstname": ScCustomerFirstname;
        "sc-customer-lastname": ScCustomerLastname;
        "sc-customer-name": ScCustomerName;
        "sc-dashboard-customer-details": ScDashboardCustomerDetails;
        "sc-dashboard-downloads-list": ScDashboardDownloadsList;
        "sc-dashboard-module": ScDashboardModule;
        "sc-dialog": ScDialog;
        "sc-divider": ScDivider;
        "sc-donation-choices": ScDonationChoices;
        "sc-downloads-list": ScDownloadsList;
        "sc-drawer": ScDrawer;
        "sc-dropdown": ScDropdown;
        "sc-empty": ScEmpty;
        "sc-error": ScError;
        "sc-express-payment": ScExpressPayment;
        "sc-flex": ScFlex;
        "sc-form": ScForm;
        "sc-form-components-validator": ScFormComponentsValidator;
        "sc-form-control": ScFormControl;
        "sc-form-error-provider": ScFormErrorProvider;
        "sc-form-row": ScFormRow;
        "sc-form-state-provider": ScFormStateProvider;
        "sc-format-bytes": ScFormatBytes;
        "sc-format-date": ScFormatDate;
        "sc-format-interval": ScFormatInterval;
        "sc-format-number": ScFormatNumber;
        "sc-heading": ScHeading;
        "sc-icon": ScIcon;
        "sc-input": ScInput;
        "sc-invoices-list": ScInvoicesList;
        "sc-licenses-list": ScLicensesList;
        "sc-line-item": ScLineItem;
        "sc-line-item-bump": ScLineItemBump;
        "sc-line-item-tax": ScLineItemTax;
        "sc-line-item-total": ScLineItemTotal;
        "sc-line-items": ScLineItems;
        "sc-line-items-provider": ScLineItemsProvider;
        "sc-login-form": ScLoginForm;
        "sc-login-provider": ScLoginProvider;
        "sc-menu": ScMenu;
        "sc-menu-divider": ScMenuDivider;
        "sc-menu-item": ScMenuItem;
        "sc-menu-label": ScMenuLabel;
        "sc-mollie-add-method": ScMollieAddMethod;
        "sc-order": ScOrder;
        "sc-order-bump": ScOrderBump;
        "sc-order-bumps": ScOrderBumps;
        "sc-order-confirm-components-validator": ScOrderConfirmComponentsValidator;
        "sc-order-confirm-provider": ScOrderConfirmProvider;
        "sc-order-confirmation": ScOrderConfirmation;
        "sc-order-confirmation-customer": ScOrderConfirmationCustomer;
        "sc-order-confirmation-details": ScOrderConfirmationDetails;
        "sc-order-confirmation-line-items": ScOrderConfirmationLineItems;
        "sc-order-confirmation-totals": ScOrderConfirmationTotals;
        "sc-order-coupon-form": ScOrderCouponForm;
        "sc-order-detail": ScOrderDetail;
        "sc-order-manual-instructions": ScOrderManualInstructions;
        "sc-order-password": ScOrderPassword;
        "sc-order-shipping-address": ScOrderShippingAddress;
        "sc-order-status-badge": ScOrderStatusBadge;
        "sc-order-submit": ScOrderSubmit;
        "sc-order-summary": ScOrderSummary;
        "sc-order-tax-id-input": ScOrderTaxIdInput;
        "sc-orders-list": ScOrdersList;
        "sc-pagination": ScPagination;
        "sc-password-nag": ScPasswordNag;
        "sc-payment": ScPayment;
        "sc-payment-method": ScPaymentMethod;
        "sc-payment-method-choice": ScPaymentMethodChoice;
        "sc-payment-methods-list": ScPaymentMethodsList;
        "sc-payment-selected": ScPaymentSelected;
        "sc-paypal-add-method": ScPaypalAddMethod;
        "sc-paypal-buttons": ScPaypalButtons;
        "sc-premium-tag": ScPremiumTag;
        "sc-price-choice": ScPriceChoice;
        "sc-price-choices": ScPriceChoices;
        "sc-price-input": ScPriceInput;
        "sc-price-range": ScPriceRange;
        "sc-product-line-item": ScProductLineItem;
        "sc-product-selected-price": ScProductSelectedPrice;
        "sc-prose": ScProse;
        "sc-provider": ScProvider;
        "sc-purchase-downloads-list": ScPurchaseDownloadsList;
        "sc-quantity-select": ScQuantitySelect;
        "sc-radio": ScRadio;
        "sc-radio-group": ScRadioGroup;
        "sc-rich-text": ScRichText;
        "sc-secure-notice": ScSecureNotice;
        "sc-select": ScSelect;
        "sc-session-provider": ScSessionProvider;
        "sc-skeleton": ScSkeleton;
        "sc-spacing": ScSpacing;
        "sc-spinner": ScSpinner;
        "sc-stacked-list": ScStackedList;
        "sc-stacked-list-row": ScStackedListRow;
        "sc-stripe-add-method": ScStripeAddMethod;
        "sc-stripe-element": ScStripeElement;
        "sc-stripe-payment-element": ScStripePaymentElement;
        "sc-stripe-payment-request": ScStripePaymentRequest;
        "sc-subscription": ScSubscription;
        "sc-subscription-ad-hoc-confirm": ScSubscriptionAdHocConfirm;
        "sc-subscription-cancel": ScSubscriptionCancel;
        "sc-subscription-details": ScSubscriptionDetails;
        "sc-subscription-next-payment": ScSubscriptionNextPayment;
        "sc-subscription-payment": ScSubscriptionPayment;
        "sc-subscription-payment-method": ScSubscriptionPaymentMethod;
        "sc-subscription-status-badge": ScSubscriptionStatusBadge;
        "sc-subscription-switch": ScSubscriptionSwitch;
        "sc-subscriptions-list": ScSubscriptionsList;
        "sc-switch": ScSwitch;
        "sc-tab": ScTab;
        "sc-tab-group": ScTabGroup;
        "sc-tab-panel": ScTabPanel;
        "sc-table": ScTable;
        "sc-table-cell": ScTableCell;
        "sc-table-head": ScTableHead;
        "sc-table-row": ScTableRow;
        "sc-tag": ScTag;
        "sc-tax-id-input": ScTaxIdInput;
        "sc-text": ScText;
        "sc-textarea": ScTextarea;
        "sc-toggle": ScToggle;
        "sc-toggles": ScToggles;
        "sc-tooltip": ScTooltip;
        "sc-total": ScTotal;
        "sc-upcoming-invoice": ScUpcomingInvoice;
        "sc-upgrade-required": ScUpgradeRequired;
        "sc-wordpress-password-edit": ScWordpressPasswordEdit;
        "sc-wordpress-user": ScWordpressUser;
        "sc-wordpress-user-edit": ScWordpressUserEdit;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "sc-address": LocalJSX.ScAddress & JSXBase.HTMLAttributes<HTMLScAddressElement>;
            "sc-alert": LocalJSX.ScAlert & JSXBase.HTMLAttributes<HTMLScAlertElement>;
            "sc-avatar": LocalJSX.ScAvatar & JSXBase.HTMLAttributes<HTMLScAvatarElement>;
            "sc-badge-notice": LocalJSX.ScBadgeNotice & JSXBase.HTMLAttributes<HTMLScBadgeNoticeElement>;
            "sc-block-ui": LocalJSX.ScBlockUi & JSXBase.HTMLAttributes<HTMLScBlockUiElement>;
            "sc-breadcrumb": LocalJSX.ScBreadcrumb & JSXBase.HTMLAttributes<HTMLScBreadcrumbElement>;
            "sc-breadcrumbs": LocalJSX.ScBreadcrumbs & JSXBase.HTMLAttributes<HTMLScBreadcrumbsElement>;
            "sc-button": LocalJSX.ScButton & JSXBase.HTMLAttributes<HTMLScButtonElement>;
            "sc-button-group": LocalJSX.ScButtonGroup & JSXBase.HTMLAttributes<HTMLScButtonGroupElement>;
            "sc-cancel-dialog": LocalJSX.ScCancelDialog & JSXBase.HTMLAttributes<HTMLScCancelDialogElement>;
            "sc-cancel-discount": LocalJSX.ScCancelDiscount & JSXBase.HTMLAttributes<HTMLScCancelDiscountElement>;
            "sc-cancel-survey": LocalJSX.ScCancelSurvey & JSXBase.HTMLAttributes<HTMLScCancelSurveyElement>;
            "sc-card": LocalJSX.ScCard & JSXBase.HTMLAttributes<HTMLScCardElement>;
            "sc-cart": LocalJSX.ScCart & JSXBase.HTMLAttributes<HTMLScCartElement>;
            "sc-cart-form": LocalJSX.ScCartForm & JSXBase.HTMLAttributes<HTMLScCartFormElement>;
            "sc-cart-form-submit": LocalJSX.ScCartFormSubmit & JSXBase.HTMLAttributes<HTMLScCartFormSubmitElement>;
            "sc-cart-header": LocalJSX.ScCartHeader & JSXBase.HTMLAttributes<HTMLScCartHeaderElement>;
            "sc-cart-icon": LocalJSX.ScCartIcon & JSXBase.HTMLAttributes<HTMLScCartIconElement>;
            "sc-cart-loader": LocalJSX.ScCartLoader & JSXBase.HTMLAttributes<HTMLScCartLoaderElement>;
            "sc-cart-session-provider": LocalJSX.ScCartSessionProvider & JSXBase.HTMLAttributes<HTMLScCartSessionProviderElement>;
            "sc-cart-submit": LocalJSX.ScCartSubmit & JSXBase.HTMLAttributes<HTMLScCartSubmitElement>;
            "sc-cc-logo": LocalJSX.ScCcLogo & JSXBase.HTMLAttributes<HTMLScCcLogoElement>;
            "sc-charges-list": LocalJSX.ScChargesList & JSXBase.HTMLAttributes<HTMLScChargesListElement>;
            "sc-checkbox": LocalJSX.ScCheckbox & JSXBase.HTMLAttributes<HTMLScCheckboxElement>;
            "sc-checkout": LocalJSX.ScCheckout & JSXBase.HTMLAttributes<HTMLScCheckoutElement>;
            "sc-checkout-form-errors": LocalJSX.ScCheckoutFormErrors & JSXBase.HTMLAttributes<HTMLScCheckoutFormErrorsElement>;
            "sc-checkout-mollie-payment": LocalJSX.ScCheckoutMolliePayment & JSXBase.HTMLAttributes<HTMLScCheckoutMolliePaymentElement>;
            "sc-checkout-unsaved-changes-warning": LocalJSX.ScCheckoutUnsavedChangesWarning & JSXBase.HTMLAttributes<HTMLScCheckoutUnsavedChangesWarningElement>;
            "sc-choice": LocalJSX.ScChoice & JSXBase.HTMLAttributes<HTMLScChoiceElement>;
            "sc-choice-container": LocalJSX.ScChoiceContainer & JSXBase.HTMLAttributes<HTMLScChoiceContainerElement>;
            "sc-choices": LocalJSX.ScChoices & JSXBase.HTMLAttributes<HTMLScChoicesElement>;
            "sc-column": LocalJSX.ScColumn & JSXBase.HTMLAttributes<HTMLScColumnElement>;
            "sc-columns": LocalJSX.ScColumns & JSXBase.HTMLAttributes<HTMLScColumnsElement>;
            "sc-compact-address": LocalJSX.ScCompactAddress & JSXBase.HTMLAttributes<HTMLScCompactAddressElement>;
            "sc-conditional-form": LocalJSX.ScConditionalForm & JSXBase.HTMLAttributes<HTMLScConditionalFormElement>;
            "sc-consumer": LocalJSX.ScConsumer & JSXBase.HTMLAttributes<HTMLScConsumerElement>;
            "sc-coupon-form": LocalJSX.ScCouponForm & JSXBase.HTMLAttributes<HTMLScCouponFormElement>;
            "sc-custom-order-price-input": LocalJSX.ScCustomOrderPriceInput & JSXBase.HTMLAttributes<HTMLScCustomOrderPriceInputElement>;
            "sc-customer-details": LocalJSX.ScCustomerDetails & JSXBase.HTMLAttributes<HTMLScCustomerDetailsElement>;
            "sc-customer-edit": LocalJSX.ScCustomerEdit & JSXBase.HTMLAttributes<HTMLScCustomerEditElement>;
            "sc-customer-email": LocalJSX.ScCustomerEmail & JSXBase.HTMLAttributes<HTMLScCustomerEmailElement>;
            "sc-customer-firstname": LocalJSX.ScCustomerFirstname & JSXBase.HTMLAttributes<HTMLScCustomerFirstnameElement>;
            "sc-customer-lastname": LocalJSX.ScCustomerLastname & JSXBase.HTMLAttributes<HTMLScCustomerLastnameElement>;
            "sc-customer-name": LocalJSX.ScCustomerName & JSXBase.HTMLAttributes<HTMLScCustomerNameElement>;
            "sc-dashboard-customer-details": LocalJSX.ScDashboardCustomerDetails & JSXBase.HTMLAttributes<HTMLScDashboardCustomerDetailsElement>;
            "sc-dashboard-downloads-list": LocalJSX.ScDashboardDownloadsList & JSXBase.HTMLAttributes<HTMLScDashboardDownloadsListElement>;
            "sc-dashboard-module": LocalJSX.ScDashboardModule & JSXBase.HTMLAttributes<HTMLScDashboardModuleElement>;
            "sc-dialog": LocalJSX.ScDialog & JSXBase.HTMLAttributes<HTMLScDialogElement>;
            "sc-divider": LocalJSX.ScDivider & JSXBase.HTMLAttributes<HTMLScDividerElement>;
            "sc-donation-choices": LocalJSX.ScDonationChoices & JSXBase.HTMLAttributes<HTMLScDonationChoicesElement>;
            "sc-downloads-list": LocalJSX.ScDownloadsList & JSXBase.HTMLAttributes<HTMLScDownloadsListElement>;
            "sc-drawer": LocalJSX.ScDrawer & JSXBase.HTMLAttributes<HTMLScDrawerElement>;
            "sc-dropdown": LocalJSX.ScDropdown & JSXBase.HTMLAttributes<HTMLScDropdownElement>;
            "sc-empty": LocalJSX.ScEmpty & JSXBase.HTMLAttributes<HTMLScEmptyElement>;
            "sc-error": LocalJSX.ScError & JSXBase.HTMLAttributes<HTMLScErrorElement>;
            "sc-express-payment": LocalJSX.ScExpressPayment & JSXBase.HTMLAttributes<HTMLScExpressPaymentElement>;
            "sc-flex": LocalJSX.ScFlex & JSXBase.HTMLAttributes<HTMLScFlexElement>;
            "sc-form": LocalJSX.ScForm & JSXBase.HTMLAttributes<HTMLScFormElement>;
            "sc-form-components-validator": LocalJSX.ScFormComponentsValidator & JSXBase.HTMLAttributes<HTMLScFormComponentsValidatorElement>;
            "sc-form-control": LocalJSX.ScFormControl & JSXBase.HTMLAttributes<HTMLScFormControlElement>;
            "sc-form-error-provider": LocalJSX.ScFormErrorProvider & JSXBase.HTMLAttributes<HTMLScFormErrorProviderElement>;
            "sc-form-row": LocalJSX.ScFormRow & JSXBase.HTMLAttributes<HTMLScFormRowElement>;
            "sc-form-state-provider": LocalJSX.ScFormStateProvider & JSXBase.HTMLAttributes<HTMLScFormStateProviderElement>;
            "sc-format-bytes": LocalJSX.ScFormatBytes & JSXBase.HTMLAttributes<HTMLScFormatBytesElement>;
            "sc-format-date": LocalJSX.ScFormatDate & JSXBase.HTMLAttributes<HTMLScFormatDateElement>;
            "sc-format-interval": LocalJSX.ScFormatInterval & JSXBase.HTMLAttributes<HTMLScFormatIntervalElement>;
            "sc-format-number": LocalJSX.ScFormatNumber & JSXBase.HTMLAttributes<HTMLScFormatNumberElement>;
            "sc-heading": LocalJSX.ScHeading & JSXBase.HTMLAttributes<HTMLScHeadingElement>;
            "sc-icon": LocalJSX.ScIcon & JSXBase.HTMLAttributes<HTMLScIconElement>;
            "sc-input": LocalJSX.ScInput & JSXBase.HTMLAttributes<HTMLScInputElement>;
            "sc-invoices-list": LocalJSX.ScInvoicesList & JSXBase.HTMLAttributes<HTMLScInvoicesListElement>;
            "sc-licenses-list": LocalJSX.ScLicensesList & JSXBase.HTMLAttributes<HTMLScLicensesListElement>;
            "sc-line-item": LocalJSX.ScLineItem & JSXBase.HTMLAttributes<HTMLScLineItemElement>;
            "sc-line-item-bump": LocalJSX.ScLineItemBump & JSXBase.HTMLAttributes<HTMLScLineItemBumpElement>;
            "sc-line-item-tax": LocalJSX.ScLineItemTax & JSXBase.HTMLAttributes<HTMLScLineItemTaxElement>;
            "sc-line-item-total": LocalJSX.ScLineItemTotal & JSXBase.HTMLAttributes<HTMLScLineItemTotalElement>;
            "sc-line-items": LocalJSX.ScLineItems & JSXBase.HTMLAttributes<HTMLScLineItemsElement>;
            "sc-line-items-provider": LocalJSX.ScLineItemsProvider & JSXBase.HTMLAttributes<HTMLScLineItemsProviderElement>;
            "sc-login-form": LocalJSX.ScLoginForm & JSXBase.HTMLAttributes<HTMLScLoginFormElement>;
            "sc-login-provider": LocalJSX.ScLoginProvider & JSXBase.HTMLAttributes<HTMLScLoginProviderElement>;
            "sc-menu": LocalJSX.ScMenu & JSXBase.HTMLAttributes<HTMLScMenuElement>;
            "sc-menu-divider": LocalJSX.ScMenuDivider & JSXBase.HTMLAttributes<HTMLScMenuDividerElement>;
            "sc-menu-item": LocalJSX.ScMenuItem & JSXBase.HTMLAttributes<HTMLScMenuItemElement>;
            "sc-menu-label": LocalJSX.ScMenuLabel & JSXBase.HTMLAttributes<HTMLScMenuLabelElement>;
            "sc-mollie-add-method": LocalJSX.ScMollieAddMethod & JSXBase.HTMLAttributes<HTMLScMollieAddMethodElement>;
            "sc-order": LocalJSX.ScOrder & JSXBase.HTMLAttributes<HTMLScOrderElement>;
            "sc-order-bump": LocalJSX.ScOrderBump & JSXBase.HTMLAttributes<HTMLScOrderBumpElement>;
            "sc-order-bumps": LocalJSX.ScOrderBumps & JSXBase.HTMLAttributes<HTMLScOrderBumpsElement>;
            "sc-order-confirm-components-validator": LocalJSX.ScOrderConfirmComponentsValidator & JSXBase.HTMLAttributes<HTMLScOrderConfirmComponentsValidatorElement>;
            "sc-order-confirm-provider": LocalJSX.ScOrderConfirmProvider & JSXBase.HTMLAttributes<HTMLScOrderConfirmProviderElement>;
            "sc-order-confirmation": LocalJSX.ScOrderConfirmation & JSXBase.HTMLAttributes<HTMLScOrderConfirmationElement>;
            "sc-order-confirmation-customer": LocalJSX.ScOrderConfirmationCustomer & JSXBase.HTMLAttributes<HTMLScOrderConfirmationCustomerElement>;
            "sc-order-confirmation-details": LocalJSX.ScOrderConfirmationDetails & JSXBase.HTMLAttributes<HTMLScOrderConfirmationDetailsElement>;
            "sc-order-confirmation-line-items": LocalJSX.ScOrderConfirmationLineItems & JSXBase.HTMLAttributes<HTMLScOrderConfirmationLineItemsElement>;
            "sc-order-confirmation-totals": LocalJSX.ScOrderConfirmationTotals & JSXBase.HTMLAttributes<HTMLScOrderConfirmationTotalsElement>;
            "sc-order-coupon-form": LocalJSX.ScOrderCouponForm & JSXBase.HTMLAttributes<HTMLScOrderCouponFormElement>;
            "sc-order-detail": LocalJSX.ScOrderDetail & JSXBase.HTMLAttributes<HTMLScOrderDetailElement>;
            "sc-order-manual-instructions": LocalJSX.ScOrderManualInstructions & JSXBase.HTMLAttributes<HTMLScOrderManualInstructionsElement>;
            "sc-order-password": LocalJSX.ScOrderPassword & JSXBase.HTMLAttributes<HTMLScOrderPasswordElement>;
            "sc-order-shipping-address": LocalJSX.ScOrderShippingAddress & JSXBase.HTMLAttributes<HTMLScOrderShippingAddressElement>;
            "sc-order-status-badge": LocalJSX.ScOrderStatusBadge & JSXBase.HTMLAttributes<HTMLScOrderStatusBadgeElement>;
            "sc-order-submit": LocalJSX.ScOrderSubmit & JSXBase.HTMLAttributes<HTMLScOrderSubmitElement>;
            "sc-order-summary": LocalJSX.ScOrderSummary & JSXBase.HTMLAttributes<HTMLScOrderSummaryElement>;
            "sc-order-tax-id-input": LocalJSX.ScOrderTaxIdInput & JSXBase.HTMLAttributes<HTMLScOrderTaxIdInputElement>;
            "sc-orders-list": LocalJSX.ScOrdersList & JSXBase.HTMLAttributes<HTMLScOrdersListElement>;
            "sc-pagination": LocalJSX.ScPagination & JSXBase.HTMLAttributes<HTMLScPaginationElement>;
            "sc-password-nag": LocalJSX.ScPasswordNag & JSXBase.HTMLAttributes<HTMLScPasswordNagElement>;
            "sc-payment": LocalJSX.ScPayment & JSXBase.HTMLAttributes<HTMLScPaymentElement>;
            "sc-payment-method": LocalJSX.ScPaymentMethod & JSXBase.HTMLAttributes<HTMLScPaymentMethodElement>;
            "sc-payment-method-choice": LocalJSX.ScPaymentMethodChoice & JSXBase.HTMLAttributes<HTMLScPaymentMethodChoiceElement>;
            "sc-payment-methods-list": LocalJSX.ScPaymentMethodsList & JSXBase.HTMLAttributes<HTMLScPaymentMethodsListElement>;
            "sc-payment-selected": LocalJSX.ScPaymentSelected & JSXBase.HTMLAttributes<HTMLScPaymentSelectedElement>;
            "sc-paypal-add-method": LocalJSX.ScPaypalAddMethod & JSXBase.HTMLAttributes<HTMLScPaypalAddMethodElement>;
            "sc-paypal-buttons": LocalJSX.ScPaypalButtons & JSXBase.HTMLAttributes<HTMLScPaypalButtonsElement>;
            "sc-premium-tag": LocalJSX.ScPremiumTag & JSXBase.HTMLAttributes<HTMLScPremiumTagElement>;
            "sc-price-choice": LocalJSX.ScPriceChoice & JSXBase.HTMLAttributes<HTMLScPriceChoiceElement>;
            "sc-price-choices": LocalJSX.ScPriceChoices & JSXBase.HTMLAttributes<HTMLScPriceChoicesElement>;
            "sc-price-input": LocalJSX.ScPriceInput & JSXBase.HTMLAttributes<HTMLScPriceInputElement>;
            "sc-price-range": LocalJSX.ScPriceRange & JSXBase.HTMLAttributes<HTMLScPriceRangeElement>;
            "sc-product-line-item": LocalJSX.ScProductLineItem & JSXBase.HTMLAttributes<HTMLScProductLineItemElement>;
            "sc-product-selected-price": LocalJSX.ScProductSelectedPrice & JSXBase.HTMLAttributes<HTMLScProductSelectedPriceElement>;
            "sc-prose": LocalJSX.ScProse & JSXBase.HTMLAttributes<HTMLScProseElement>;
            "sc-provider": LocalJSX.ScProvider & JSXBase.HTMLAttributes<HTMLScProviderElement>;
            "sc-purchase-downloads-list": LocalJSX.ScPurchaseDownloadsList & JSXBase.HTMLAttributes<HTMLScPurchaseDownloadsListElement>;
            "sc-quantity-select": LocalJSX.ScQuantitySelect & JSXBase.HTMLAttributes<HTMLScQuantitySelectElement>;
            "sc-radio": LocalJSX.ScRadio & JSXBase.HTMLAttributes<HTMLScRadioElement>;
            "sc-radio-group": LocalJSX.ScRadioGroup & JSXBase.HTMLAttributes<HTMLScRadioGroupElement>;
            "sc-rich-text": LocalJSX.ScRichText & JSXBase.HTMLAttributes<HTMLScRichTextElement>;
            "sc-secure-notice": LocalJSX.ScSecureNotice & JSXBase.HTMLAttributes<HTMLScSecureNoticeElement>;
            "sc-select": LocalJSX.ScSelect & JSXBase.HTMLAttributes<HTMLScSelectElement>;
            "sc-session-provider": LocalJSX.ScSessionProvider & JSXBase.HTMLAttributes<HTMLScSessionProviderElement>;
            "sc-skeleton": LocalJSX.ScSkeleton & JSXBase.HTMLAttributes<HTMLScSkeletonElement>;
            "sc-spacing": LocalJSX.ScSpacing & JSXBase.HTMLAttributes<HTMLScSpacingElement>;
            "sc-spinner": LocalJSX.ScSpinner & JSXBase.HTMLAttributes<HTMLScSpinnerElement>;
            "sc-stacked-list": LocalJSX.ScStackedList & JSXBase.HTMLAttributes<HTMLScStackedListElement>;
            "sc-stacked-list-row": LocalJSX.ScStackedListRow & JSXBase.HTMLAttributes<HTMLScStackedListRowElement>;
            "sc-stripe-add-method": LocalJSX.ScStripeAddMethod & JSXBase.HTMLAttributes<HTMLScStripeAddMethodElement>;
            "sc-stripe-element": LocalJSX.ScStripeElement & JSXBase.HTMLAttributes<HTMLScStripeElementElement>;
            "sc-stripe-payment-element": LocalJSX.ScStripePaymentElement & JSXBase.HTMLAttributes<HTMLScStripePaymentElementElement>;
            "sc-stripe-payment-request": LocalJSX.ScStripePaymentRequest & JSXBase.HTMLAttributes<HTMLScStripePaymentRequestElement>;
            "sc-subscription": LocalJSX.ScSubscription & JSXBase.HTMLAttributes<HTMLScSubscriptionElement>;
            "sc-subscription-ad-hoc-confirm": LocalJSX.ScSubscriptionAdHocConfirm & JSXBase.HTMLAttributes<HTMLScSubscriptionAdHocConfirmElement>;
            "sc-subscription-cancel": LocalJSX.ScSubscriptionCancel & JSXBase.HTMLAttributes<HTMLScSubscriptionCancelElement>;
            "sc-subscription-details": LocalJSX.ScSubscriptionDetails & JSXBase.HTMLAttributes<HTMLScSubscriptionDetailsElement>;
            "sc-subscription-next-payment": LocalJSX.ScSubscriptionNextPayment & JSXBase.HTMLAttributes<HTMLScSubscriptionNextPaymentElement>;
            "sc-subscription-payment": LocalJSX.ScSubscriptionPayment & JSXBase.HTMLAttributes<HTMLScSubscriptionPaymentElement>;
            "sc-subscription-payment-method": LocalJSX.ScSubscriptionPaymentMethod & JSXBase.HTMLAttributes<HTMLScSubscriptionPaymentMethodElement>;
            "sc-subscription-status-badge": LocalJSX.ScSubscriptionStatusBadge & JSXBase.HTMLAttributes<HTMLScSubscriptionStatusBadgeElement>;
            "sc-subscription-switch": LocalJSX.ScSubscriptionSwitch & JSXBase.HTMLAttributes<HTMLScSubscriptionSwitchElement>;
            "sc-subscriptions-list": LocalJSX.ScSubscriptionsList & JSXBase.HTMLAttributes<HTMLScSubscriptionsListElement>;
            "sc-switch": LocalJSX.ScSwitch & JSXBase.HTMLAttributes<HTMLScSwitchElement>;
            "sc-tab": LocalJSX.ScTab & JSXBase.HTMLAttributes<HTMLScTabElement>;
            "sc-tab-group": LocalJSX.ScTabGroup & JSXBase.HTMLAttributes<HTMLScTabGroupElement>;
            "sc-tab-panel": LocalJSX.ScTabPanel & JSXBase.HTMLAttributes<HTMLScTabPanelElement>;
            "sc-table": LocalJSX.ScTable & JSXBase.HTMLAttributes<HTMLScTableElement>;
            "sc-table-cell": LocalJSX.ScTableCell & JSXBase.HTMLAttributes<HTMLScTableCellElement>;
            "sc-table-head": LocalJSX.ScTableHead & JSXBase.HTMLAttributes<HTMLScTableHeadElement>;
            "sc-table-row": LocalJSX.ScTableRow & JSXBase.HTMLAttributes<HTMLScTableRowElement>;
            "sc-tag": LocalJSX.ScTag & JSXBase.HTMLAttributes<HTMLScTagElement>;
            "sc-tax-id-input": LocalJSX.ScTaxIdInput & JSXBase.HTMLAttributes<HTMLScTaxIdInputElement>;
            "sc-text": LocalJSX.ScText & JSXBase.HTMLAttributes<HTMLScTextElement>;
            "sc-textarea": LocalJSX.ScTextarea & JSXBase.HTMLAttributes<HTMLScTextareaElement>;
            "sc-toggle": LocalJSX.ScToggle & JSXBase.HTMLAttributes<HTMLScToggleElement>;
            "sc-toggles": LocalJSX.ScToggles & JSXBase.HTMLAttributes<HTMLScTogglesElement>;
            "sc-tooltip": LocalJSX.ScTooltip & JSXBase.HTMLAttributes<HTMLScTooltipElement>;
            "sc-total": LocalJSX.ScTotal & JSXBase.HTMLAttributes<HTMLScTotalElement>;
            "sc-upcoming-invoice": LocalJSX.ScUpcomingInvoice & JSXBase.HTMLAttributes<HTMLScUpcomingInvoiceElement>;
            "sc-upgrade-required": LocalJSX.ScUpgradeRequired & JSXBase.HTMLAttributes<HTMLScUpgradeRequiredElement>;
            "sc-wordpress-password-edit": LocalJSX.ScWordpressPasswordEdit & JSXBase.HTMLAttributes<HTMLScWordpressPasswordEditElement>;
            "sc-wordpress-user": LocalJSX.ScWordpressUser & JSXBase.HTMLAttributes<HTMLScWordpressUserElement>;
            "sc-wordpress-user-edit": LocalJSX.ScWordpressUserEdit & JSXBase.HTMLAttributes<HTMLScWordpressUserEditElement>;
        }
    }
}
